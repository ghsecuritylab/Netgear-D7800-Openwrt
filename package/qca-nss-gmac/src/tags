!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATHR_PHY_SPEED_1000M	ipq806x/nss_gmac_ctrl.c	597;"	d	file:
ATHR_PHY_SPEED_100M	ipq806x/nss_gmac_ctrl.c	596;"	d	file:
ATHR_PHY_SPEED_10M	ipq806x/nss_gmac_ctrl.c	595;"	d	file:
ATH_MII_MMD_ACCESS_ADDR_DATA	include/nss_gmac_dev.h	94;"	d
ATH_MII_MMD_ACCESS_ADDR_DATA	ipq806x/include/nss_gmac_dev.h	94;"	d
ATH_MII_MMD_ACCESS_CTRL	include/nss_gmac_dev.h	93;"	d
ATH_MII_MMD_ACCESS_CTRL	ipq806x/include/nss_gmac_dev.h	93;"	d
ATH_MMD_DEVADDR_3	include/nss_gmac_dev.h	97;"	d
ATH_MMD_DEVADDR_3	ipq806x/include/nss_gmac_dev.h	97;"	d
ATH_MMD_DEVADDR_7	include/nss_gmac_dev.h	98;"	d
ATH_MMD_DEVADDR_7	ipq806x/include/nss_gmac_dev.h	98;"	d
CAL_PBRS_RST_N_RESET	include/nss_gmac_clocks.h	49;"	d
CAL_PBRS_RST_N_RESET	ipq806x/include/nss_gmac_clocks.h	49;"	d
CHAINMODE	include/nss_gmac_dev.h	/^	CHAINMODE = 0x00000002,$/;"	e	enum:desc_mode
CHAINMODE	ipq806x/include/nss_gmac_dev.h	/^	CHAINMODE = 0x00000002,$/;"	e	enum:desc_mode
CLK_HALT_NSSFAB0_NSSFAB1_STATEA	include/nss_gmac_clocks.h	29;"	d
CLK_HALT_NSSFAB0_NSSFAB1_STATEA	ipq806x/include/nss_gmac_clocks.h	29;"	d
CONFIG_PSSTHRGH	ipq806x/include/ipv6_pssthrgh.h	4;"	d
DEFAULT_DELAY_VARIABLE	include/nss_gmac_dev.h	59;"	d
DEFAULT_DELAY_VARIABLE	ipq806x/include/nss_gmac_dev.h	59;"	d
DEFAULT_LOOP_VARIABLE	include/nss_gmac_dev.h	60;"	d
DEFAULT_LOOP_VARIABLE	ipq806x/include/nss_gmac_dev.h	60;"	d
DNI_ENET_INFO	ipq806x/include/ipv6_pssthrgh.h	11;"	d
DRVINFO_LEN	ipq806x/nss_gmac_ethtool.c	45;"	d	file:
FULLDUPLEX	include/nss_gmac_dev.h	/^	FULLDUPLEX = 2,$/;"	e	enum:mii_duplex_mode
FULLDUPLEX	ipq806x/include/nss_gmac_dev.h	/^	FULLDUPLEX = 2,$/;"	e	enum:mii_duplex_mode
GMAC0_GMII_CLK_RGMII	include/msm_nss_gmac.h	111;"	d
GMAC0_GMII_CLK_RGMII	ipq806x/include/msm_nss_gmac.h	111;"	d
GMAC0_GMII_RX_CLK	include/msm_nss_gmac.h	74;"	d
GMAC0_GMII_RX_CLK	ipq806x/include/msm_nss_gmac.h	74;"	d
GMAC0_GMII_RX_CLK_SHIFT	include/msm_nss_gmac.h	79;"	d
GMAC0_GMII_RX_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	79;"	d
GMAC0_GMII_TX_CLK	include/msm_nss_gmac.h	75;"	d
GMAC0_GMII_TX_CLK	ipq806x/include/msm_nss_gmac.h	75;"	d
GMAC0_GMII_TX_CLK_SHIFT	include/msm_nss_gmac.h	80;"	d
GMAC0_GMII_TX_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	80;"	d
GMAC0_PTP_CLK	include/msm_nss_gmac.h	71;"	d
GMAC0_PTP_CLK	ipq806x/include/msm_nss_gmac.h	71;"	d
GMAC0_PTP_CLK_SHIFT	include/msm_nss_gmac.h	81;"	d
GMAC0_PTP_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	81;"	d
GMAC0_QSGMII_RX_CLK_SHIFT	include/msm_nss_gmac.h	135;"	d
GMAC0_QSGMII_RX_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	135;"	d
GMAC0_QSGMII_TX_CLK_SHIFT	include/msm_nss_gmac.h	134;"	d
GMAC0_QSGMII_TX_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	134;"	d
GMAC0_RGMII_RX_CLK	include/msm_nss_gmac.h	72;"	d
GMAC0_RGMII_RX_CLK	ipq806x/include/msm_nss_gmac.h	72;"	d
GMAC0_RGMII_RX_CLK_SHIFT	include/msm_nss_gmac.h	78;"	d
GMAC0_RGMII_RX_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	78;"	d
GMAC0_RGMII_TX_CLK	include/msm_nss_gmac.h	73;"	d
GMAC0_RGMII_TX_CLK	ipq806x/include/msm_nss_gmac.h	73;"	d
GMAC0_RGMII_TX_CLK_SHIFT	include/msm_nss_gmac.h	77;"	d
GMAC0_RGMII_TX_CLK_SHIFT	ipq806x/include/msm_nss_gmac.h	77;"	d
GMAC0_RX_CLK_HALT	include/msm_nss_gmac.h	126;"	d
GMAC0_RX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	126;"	d
GMAC0_TX_CLK_HALT	include/msm_nss_gmac.h	125;"	d
GMAC0_TX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	125;"	d
GMAC1_GMII_CLK_RGMII	include/msm_nss_gmac.h	112;"	d
GMAC1_GMII_CLK_RGMII	ipq806x/include/msm_nss_gmac.h	112;"	d
GMAC1_MACSEC_BYPASS	include/msm_nss_gmac.h	115;"	d
GMAC1_MACSEC_BYPASS	ipq806x/include/msm_nss_gmac.h	115;"	d
GMAC1_RX_CLK_HALT	include/msm_nss_gmac.h	128;"	d
GMAC1_RX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	128;"	d
GMAC1_TX_CLK_HALT	include/msm_nss_gmac.h	127;"	d
GMAC1_TX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	127;"	d
GMAC2_RX_CLK_HALT	include/msm_nss_gmac.h	130;"	d
GMAC2_RX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	130;"	d
GMAC2_TX_CLK_HALT	include/msm_nss_gmac.h	129;"	d
GMAC2_TX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	129;"	d
GMAC3_RX_CLK_HALT	include/msm_nss_gmac.h	132;"	d
GMAC3_RX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	132;"	d
GMAC3_TX_CLK_HALT	include/msm_nss_gmac.h	131;"	d
GMAC3_TX_CLK_HALT	ipq806x/include/msm_nss_gmac.h	131;"	d
GMAC_ACC_CUST_MASK	include/nss_gmac_clocks.h	41;"	d
GMAC_ACC_CUST_MASK	ipq806x/include/nss_gmac_clocks.h	41;"	d
GMAC_AHB_RESET	include/nss_gmac_clocks.h	38;"	d
GMAC_AHB_RESET	ipq806x/include/nss_gmac_clocks.h	38;"	d
GMAC_CLK_BRANCH_EN	include/nss_gmac_clocks.h	96;"	d
GMAC_CLK_BRANCH_EN	ipq806x/include/nss_gmac_clocks.h	96;"	d
GMAC_CLK_FABRIC_GATE_EN	include/nss_gmac_clocks.h	98;"	d
GMAC_CLK_FABRIC_GATE_EN	ipq806x/include/nss_gmac_clocks.h	98;"	d
GMAC_CLK_INV	include/nss_gmac_clocks.h	97;"	d
GMAC_CLK_INV	ipq806x/include/nss_gmac_clocks.h	97;"	d
GMAC_CLK_LOW_PWR_ENA	include/nss_gmac_clocks.h	57;"	d
GMAC_CLK_LOW_PWR_ENA	ipq806x/include/nss_gmac_clocks.h	57;"	d
GMAC_CLK_ROOT_ENA	include/nss_gmac_clocks.h	56;"	d
GMAC_CLK_ROOT_ENA	ipq806x/include/nss_gmac_clocks.h	56;"	d
GMAC_CORE_CLK_D	include/nss_gmac_clocks.h	61;"	d
GMAC_CORE_CLK_D	ipq806x/include/nss_gmac_clocks.h	61;"	d
GMAC_CORE_CLK_D_SHIFT	include/nss_gmac_clocks.h	63;"	d
GMAC_CORE_CLK_D_SHIFT	ipq806x/include/nss_gmac_clocks.h	63;"	d
GMAC_CORE_CLK_D_VAL	include/nss_gmac_clocks.h	65;"	d
GMAC_CORE_CLK_D_VAL	ipq806x/include/nss_gmac_clocks.h	65;"	d
GMAC_CORE_CLK_M	include/nss_gmac_clocks.h	60;"	d
GMAC_CORE_CLK_M	ipq806x/include/nss_gmac_clocks.h	60;"	d
GMAC_CORE_CLK_MNCNTR_EN	include/nss_gmac_clocks.h	71;"	d
GMAC_CORE_CLK_MNCNTR_EN	ipq806x/include/nss_gmac_clocks.h	71;"	d
GMAC_CORE_CLK_MNCNTR_MODE_DUAL	include/nss_gmac_clocks.h	77;"	d
GMAC_CORE_CLK_MNCNTR_MODE_DUAL	ipq806x/include/nss_gmac_clocks.h	77;"	d
GMAC_CORE_CLK_MNCNTR_MODE_MASK	include/nss_gmac_clocks.h	74;"	d
GMAC_CORE_CLK_MNCNTR_MODE_MASK	ipq806x/include/nss_gmac_clocks.h	74;"	d
GMAC_CORE_CLK_MNCNTR_MODE_SHIFT	include/nss_gmac_clocks.h	76;"	d
GMAC_CORE_CLK_MNCNTR_MODE_SHIFT	ipq806x/include/nss_gmac_clocks.h	76;"	d
GMAC_CORE_CLK_MNCNTR_RST	include/nss_gmac_clocks.h	72;"	d
GMAC_CORE_CLK_MNCNTR_RST	ipq806x/include/nss_gmac_clocks.h	72;"	d
GMAC_CORE_CLK_M_SHIFT	include/nss_gmac_clocks.h	62;"	d
GMAC_CORE_CLK_M_SHIFT	ipq806x/include/nss_gmac_clocks.h	62;"	d
GMAC_CORE_CLK_M_VAL	include/nss_gmac_clocks.h	64;"	d
GMAC_CORE_CLK_M_VAL	ipq806x/include/nss_gmac_clocks.h	64;"	d
GMAC_CORE_CLK_N	include/nss_gmac_clocks.h	68;"	d
GMAC_CORE_CLK_N	ipq806x/include/nss_gmac_clocks.h	68;"	d
GMAC_CORE_CLK_N_SHIFT	include/nss_gmac_clocks.h	69;"	d
GMAC_CORE_CLK_N_SHIFT	ipq806x/include/nss_gmac_clocks.h	69;"	d
GMAC_CORE_CLK_N_VAL	include/nss_gmac_clocks.h	70;"	d
GMAC_CORE_CLK_N_VAL	ipq806x/include/nss_gmac_clocks.h	70;"	d
GMAC_CORE_CLK_PRE_DIV_SEL_BYP	include/nss_gmac_clocks.h	83;"	d
GMAC_CORE_CLK_PRE_DIV_SEL_BYP	ipq806x/include/nss_gmac_clocks.h	83;"	d
GMAC_CORE_CLK_PRE_DIV_SEL_MASK	include/nss_gmac_clocks.h	80;"	d
GMAC_CORE_CLK_PRE_DIV_SEL_MASK	ipq806x/include/nss_gmac_clocks.h	80;"	d
GMAC_CORE_CLK_PRE_DIV_SEL_SHIFT	include/nss_gmac_clocks.h	82;"	d
GMAC_CORE_CLK_PRE_DIV_SEL_SHIFT	ipq806x/include/nss_gmac_clocks.h	82;"	d
GMAC_CORE_CLK_SRC_SEL_MASK	include/nss_gmac_clocks.h	85;"	d
GMAC_CORE_CLK_SRC_SEL_MASK	ipq806x/include/nss_gmac_clocks.h	85;"	d
GMAC_CORE_CLK_SRC_SEL_PLL0	include/nss_gmac_clocks.h	88;"	d
GMAC_CORE_CLK_SRC_SEL_PLL0	ipq806x/include/nss_gmac_clocks.h	88;"	d
GMAC_CORE_CLK_SRC_SEL_SHIFT	include/nss_gmac_clocks.h	87;"	d
GMAC_CORE_CLK_SRC_SEL_SHIFT	ipq806x/include/nss_gmac_clocks.h	87;"	d
GMAC_COREn_CLK_CTL	include/nss_gmac_clocks.h	35;"	d
GMAC_COREn_CLK_CTL	ipq806x/include/nss_gmac_clocks.h	35;"	d
GMAC_COREn_CLK_FS	include/nss_gmac_clocks.h	36;"	d
GMAC_COREn_CLK_FS	ipq806x/include/nss_gmac_clocks.h	36;"	d
GMAC_COREn_CLK_SRC0_MD	include/nss_gmac_clocks.h	31;"	d
GMAC_COREn_CLK_SRC0_MD	ipq806x/include/nss_gmac_clocks.h	31;"	d
GMAC_COREn_CLK_SRC0_NS	include/nss_gmac_clocks.h	33;"	d
GMAC_COREn_CLK_SRC0_NS	ipq806x/include/nss_gmac_clocks.h	33;"	d
GMAC_COREn_CLK_SRC1_MD	include/nss_gmac_clocks.h	32;"	d
GMAC_COREn_CLK_SRC1_MD	ipq806x/include/nss_gmac_clocks.h	32;"	d
GMAC_COREn_CLK_SRC1_NS	include/nss_gmac_clocks.h	34;"	d
GMAC_COREn_CLK_SRC1_NS	ipq806x/include/nss_gmac_clocks.h	34;"	d
GMAC_COREn_CLK_SRC_CTL	include/nss_gmac_clocks.h	30;"	d
GMAC_COREn_CLK_SRC_CTL	ipq806x/include/nss_gmac_clocks.h	30;"	d
GMAC_COREn_RESET	include/nss_gmac_clocks.h	37;"	d
GMAC_COREn_RESET	ipq806x/include/nss_gmac_clocks.h	37;"	d
GMAC_CSYS_REQ	include/msm_nss_gmac.h	147;"	d
GMAC_CSYS_REQ	ipq806x/include/msm_nss_gmac.h	147;"	d
GMAC_DUAL_MN8_SEL	include/nss_gmac_clocks.h	55;"	d
GMAC_DUAL_MN8_SEL	ipq806x/include/nss_gmac_clocks.h	55;"	d
GMAC_FLOW_CTL	include/msm_nss_gmac.h	146;"	d
GMAC_FLOW_CTL	ipq806x/include/msm_nss_gmac.h	146;"	d
GMAC_FS_S_W_VAL	include/nss_gmac_clocks.h	43;"	d
GMAC_FS_S_W_VAL	ipq806x/include/nss_gmac_clocks.h	43;"	d
GMAC_IFG	include/msm_nss_gmac.h	151;"	d
GMAC_IFG	ipq806x/include/msm_nss_gmac.h	151;"	d
GMAC_IFG_CTL	include/msm_nss_gmac.h	142;"	d
GMAC_IFG_CTL	ipq806x/include/msm_nss_gmac.h	142;"	d
GMAC_IFG_LIMIT	include/msm_nss_gmac.h	143;"	d
GMAC_IFG_LIMIT	ipq806x/include/msm_nss_gmac.h	143;"	d
GMAC_IFG_LIMIT_HALF	include/msm_nss_gmac.h	161;"	d
GMAC_IFG_LIMIT_HALF	ipq806x/include/msm_nss_gmac.h	161;"	d
GMAC_IFG_MIN_1000	include/msm_nss_gmac.h	154;"	d
GMAC_IFG_MIN_1000	ipq806x/include/msm_nss_gmac.h	154;"	d
GMAC_IFG_MIN_HALF_DUPLEX	include/msm_nss_gmac.h	155;"	d
GMAC_IFG_MIN_HALF_DUPLEX	ipq806x/include/msm_nss_gmac.h	155;"	d
GMAC_INCLUDE	ipq806x/Makefile	/^GMAC_INCLUDE = -I$(obj)\/include -I$(obj)\/exports$/;"	m
GMAC_INTF_QSGMII	include/msm_nss_gmac.h	299;"	d
GMAC_INTF_QSGMII	ipq806x/include/msm_nss_gmac.h	299;"	d
GMAC_INTF_RGMII	include/msm_nss_gmac.h	297;"	d
GMAC_INTF_RGMII	ipq806x/include/msm_nss_gmac.h	297;"	d
GMAC_INTF_SGMII	include/msm_nss_gmac.h	298;"	d
GMAC_INTF_SGMII	ipq806x/include/msm_nss_gmac.h	298;"	d
GMAC_PHY_QSGMII	include/msm_nss_gmac.h	145;"	d
GMAC_PHY_QSGMII	ipq806x/include/msm_nss_gmac.h	145;"	d
GMAC_PHY_RGMII	include/msm_nss_gmac.h	144;"	d
GMAC_PHY_RGMII	ipq806x/include/msm_nss_gmac.h	144;"	d
GMAC_PTP_TRIG	include/msm_nss_gmac.h	148;"	d
GMAC_PTP_TRIG	ipq806x/include/msm_nss_gmac.h	148;"	d
GMACn_CLK_DIV	include/msm_nss_gmac.h	108;"	d
GMACn_CLK_DIV	ipq806x/include/msm_nss_gmac.h	108;"	d
GMACn_CLK_DIV_SIZE	include/msm_nss_gmac.h	107;"	d
GMACn_CLK_DIV_SIZE	ipq806x/include/msm_nss_gmac.h	107;"	d
GMACn_CORE_CLK_HALT	include/nss_gmac_clocks.h	93;"	d
GMACn_CORE_CLK_HALT	ipq806x/include/nss_gmac_clocks.h	93;"	d
GMACn_GMII_CLK_RGMII	include/msm_nss_gmac.h	122;"	d
GMACn_GMII_CLK_RGMII	ipq806x/include/msm_nss_gmac.h	122;"	d
GMACn_GMII_RX_CLK	include/msm_nss_gmac.h	91;"	d
GMACn_GMII_RX_CLK	ipq806x/include/msm_nss_gmac.h	91;"	d
GMACn_GMII_TX_CLK	include/msm_nss_gmac.h	90;"	d
GMACn_GMII_TX_CLK	ipq806x/include/msm_nss_gmac.h	90;"	d
GMACn_MACSEC_BYPASS	include/msm_nss_gmac.h	116;"	d
GMACn_MACSEC_BYPASS	ipq806x/include/msm_nss_gmac.h	116;"	d
GMACn_PTP_CLK	include/msm_nss_gmac.h	94;"	d
GMACn_PTP_CLK	ipq806x/include/msm_nss_gmac.h	94;"	d
GMACn_QSGMII_RX_CLK	include/msm_nss_gmac.h	139;"	d
GMACn_QSGMII_RX_CLK	ipq806x/include/msm_nss_gmac.h	139;"	d
GMACn_QSGMII_TX_CLK	include/msm_nss_gmac.h	138;"	d
GMACn_QSGMII_TX_CLK	ipq806x/include/msm_nss_gmac.h	138;"	d
GMACn_RGMII_RX_CLK	include/msm_nss_gmac.h	93;"	d
GMACn_RGMII_RX_CLK	ipq806x/include/msm_nss_gmac.h	93;"	d
GMACn_RGMII_TX_CLK	include/msm_nss_gmac.h	92;"	d
GMACn_RGMII_TX_CLK	ipq806x/include/msm_nss_gmac.h	92;"	d
HALFDUPLEX	include/nss_gmac_dev.h	/^	HALFDUPLEX = 1,$/;"	e	enum:mii_duplex_mode
HALFDUPLEX	ipq806x/include/nss_gmac_dev.h	/^	HALFDUPLEX = 1,$/;"	e	enum:mii_duplex_mode
HW_ERR_SIZE	ipq806x/nss_gmac_ethtool.c	47;"	d	file:
IFG_MASK	include/msm_nss_gmac.h	153;"	d
IFG_MASK	ipq806x/include/msm_nss_gmac.h	153;"	d
IOCTL_READ_REGISTER	include/nss_gmac_network_interface.h	39;"	d
IOCTL_READ_REGISTER	ipq806x/include/nss_gmac_network_interface.h	39;"	d
IOCTL_WRITE_REGISTER	include/nss_gmac_network_interface.h	40;"	d
IOCTL_WRITE_REGISTER	ipq806x/include/nss_gmac_network_interface.h	40;"	d
IPQ806X_CLK_CTL_PHYS	include/msm_nss_gmac.h	330;"	d
IPQ806X_CLK_CTL_PHYS	ipq806x/include/msm_nss_gmac.h	330;"	d
IPQ806X_CLK_CTL_SIZE	include/msm_nss_gmac.h	331;"	d
IPQ806X_CLK_CTL_SIZE	ipq806x/include/msm_nss_gmac.h	331;"	d
IPQ806X_MDIO_BUS_MAX	include/msm_nss_gmac.h	328;"	d
IPQ806X_MDIO_BUS_MAX	ipq806x/include/msm_nss_gmac.h	328;"	d
IPQ806X_MDIO_BUS_NAME	include/msm_nss_gmac.h	326;"	d
IPQ806X_MDIO_BUS_NAME	ipq806x/include/msm_nss_gmac.h	326;"	d
IPQ806X_MDIO_BUS_NUM	include/msm_nss_gmac.h	327;"	d
IPQ806X_MDIO_BUS_NUM	ipq806x/include/msm_nss_gmac.h	327;"	d
IPQ806X_TCSR_BASE	include/msm_nss_gmac.h	332;"	d
IPQ806X_TCSR_BASE	ipq806x/include/msm_nss_gmac.h	332;"	d
IPQ806X_TCSR_SIZE	include/msm_nss_gmac.h	333;"	d
IPQ806X_TCSR_SIZE	ipq806x/include/msm_nss_gmac.h	333;"	d
IPV6_PSSTHRGH_H	ipq806x/include/ipv6_pssthrgh.h	2;"	d
LAN_LED_CTRL	ipq806x/nss_gmac_ctrl.c	1579;"	d	file:
LCKDT_RST_N_RESET	include/nss_gmac_clocks.h	50;"	d
LCKDT_RST_N_RESET	ipq806x/include/nss_gmac_clocks.h	50;"	d
LED_OPTION_BLINK	ipq806x/nss_gmac_ctrl.c	682;"	d	file:
LED_OPTION_OFF	ipq806x/nss_gmac_ctrl.c	684;"	d	file:
LED_OPTION_ON	ipq806x/nss_gmac_ctrl.c	683;"	d	file:
LINKDOWN	include/nss_gmac_dev.h	/^	LINKDOWN = 0,$/;"	e	enum:mii_link_status
LINKDOWN	ipq806x/include/nss_gmac_dev.h	/^	LINKDOWN = 0,$/;"	e	enum:mii_link_status
LINKUP	include/nss_gmac_dev.h	/^	LINKUP = 1,$/;"	e	enum:mii_link_status
LINKUP	ipq806x/include/nss_gmac_dev.h	/^	LINKUP = 1,$/;"	e	enum:mii_link_status
LOOPBACK	include/nss_gmac_dev.h	/^	LOOPBACK = 1,$/;"	e	enum:mii_loop_back
LOOPBACK	ipq806x/include/nss_gmac_dev.h	/^	LOOPBACK = 1,$/;"	e	enum:mii_loop_back
MACSEC1_CORE_CLK	include/msm_nss_gmac.h	67;"	d
MACSEC1_CORE_CLK	ipq806x/include/msm_nss_gmac.h	67;"	d
MACSEC2_CORE_CLK	include/msm_nss_gmac.h	66;"	d
MACSEC2_CORE_CLK	ipq806x/include/msm_nss_gmac.h	66;"	d
MACSEC3_CORE_CLK	include/msm_nss_gmac.h	65;"	d
MACSEC3_CORE_CLK	ipq806x/include/msm_nss_gmac.h	65;"	d
MACSEC_CLK_FS_CTL_S_W_VAL	include/msm_nss_macsec.h	63;"	d
MACSEC_CLK_FS_CTL_S_W_VAL	ipq806x/include/msm_nss_macsec.h	63;"	d
MACSEC_CLK_FS_CTL_S_W_VAL_MASK	include/msm_nss_macsec.h	64;"	d
MACSEC_CLK_FS_CTL_S_W_VAL_MASK	ipq806x/include/msm_nss_macsec.h	64;"	d
MACSEC_CMDCFG_ENA_10_BIT	include/msm_nss_macsec.h	71;"	d
MACSEC_CMDCFG_ENA_10_BIT	ipq806x/include/msm_nss_macsec.h	71;"	d
MACSEC_CMDCFG_ETH_SPEED_BIT	include/msm_nss_macsec.h	70;"	d
MACSEC_CMDCFG_ETH_SPEED_BIT	ipq806x/include/msm_nss_macsec.h	70;"	d
MACSEC_CORE1_RESET	include/msm_nss_macsec.h	36;"	d
MACSEC_CORE1_RESET	ipq806x/include/msm_nss_macsec.h	36;"	d
MACSEC_CORE2_RESET	include/msm_nss_macsec.h	37;"	d
MACSEC_CORE2_RESET	ipq806x/include/msm_nss_macsec.h	37;"	d
MACSEC_CORE3_RESET	include/msm_nss_macsec.h	38;"	d
MACSEC_CORE3_RESET	ipq806x/include/msm_nss_macsec.h	38;"	d
MACSEC_CORE_CLKEN_VAL	include/msm_nss_gmac.h	68;"	d
MACSEC_CORE_CLKEN_VAL	ipq806x/include/msm_nss_gmac.h	68;"	d
MACSEC_CORE_RESET_BIT	include/msm_nss_macsec.h	67;"	d
MACSEC_CORE_RESET_BIT	ipq806x/include/msm_nss_macsec.h	67;"	d
MACSEC_DP_RST_VAL	include/msm_nss_gmac.h	119;"	d
MACSEC_DP_RST_VAL	ipq806x/include/msm_nss_gmac.h	119;"	d
MACSEC_EXT_BYPASS_EN_MASK	include/msm_nss_gmac.h	118;"	d
MACSEC_EXT_BYPASS_EN_MASK	ipq806x/include/msm_nss_gmac.h	118;"	d
MACSEC_GMII_RX_CLKEN_VAL	include/msm_nss_gmac.h	69;"	d
MACSEC_GMII_RX_CLKEN_VAL	ipq806x/include/msm_nss_gmac.h	69;"	d
MACSEC_GMII_TX_CLKEN_VAL	include/msm_nss_gmac.h	70;"	d
MACSEC_GMII_TX_CLKEN_VAL	ipq806x/include/msm_nss_gmac.h	70;"	d
MACSEC_IFG	include/msm_nss_gmac.h	152;"	d
MACSEC_IFG	ipq806x/include/msm_nss_gmac.h	152;"	d
MACSECn_CORE_CLK	include/msm_nss_gmac.h	89;"	d
MACSECn_CORE_CLK	ipq806x/include/msm_nss_gmac.h	89;"	d
MAX_DOWN_TIME	ipq806x/nss_gmac_ctrl.c	460;"	d	file:
MDC_CLK_DIV	include/nss_gmac_dev.h	61;"	d
MDC_CLK_DIV	ipq806x/include/nss_gmac_dev.h	61;"	d
MIRROR_WAN	ipq806x/nss_gmac_ctrl.c	1692;"	d	file:
NETLINK_TM	ipq806x/nss_gmac_tx_rx_offload.c	50;"	d	file:
NET_IF_TIMEOUT	include/nss_gmac_network_interface.h	35;"	d
NET_IF_TIMEOUT	ipq806x/include/nss_gmac_network_interface.h	35;"	d
NOLOOPBACK	include/nss_gmac_dev.h	/^	NOLOOPBACK = 0,$/;"	e	enum:mii_loop_back
NOLOOPBACK	ipq806x/include/nss_gmac_dev.h	/^	NOLOOPBACK = 0,$/;"	e	enum:mii_loop_back
NSSFB1_CLK_CTL	include/msm_nss_macsec.h	60;"	d
NSSFB1_CLK_CTL	ipq806x/include/msm_nss_macsec.h	60;"	d
NSSFB1_CLK_CTL_ACR	include/msm_nss_macsec.h	41;"	d
NSSFB1_CLK_CTL_ACR	ipq806x/include/msm_nss_macsec.h	41;"	d
NSSFB1_CLK_CTL_SRC0_NS	include/msm_nss_macsec.h	58;"	d
NSSFB1_CLK_CTL_SRC0_NS	ipq806x/include/msm_nss_macsec.h	58;"	d
NSSFB1_CLK_CTL_SRC1_NS	include/msm_nss_macsec.h	59;"	d
NSSFB1_CLK_CTL_SRC1_NS	ipq806x/include/msm_nss_macsec.h	59;"	d
NSSFB1_CLK_CTL_SRC_CTL	include/msm_nss_macsec.h	57;"	d
NSSFB1_CLK_CTL_SRC_CTL	ipq806x/include/msm_nss_macsec.h	57;"	d
NSSFB1_PLL14_CONFIG	include/msm_nss_macsec.h	48;"	d
NSSFB1_PLL14_CONFIG	ipq806x/include/msm_nss_macsec.h	48;"	d
NSSFB1_PLL14_L_VAL	include/msm_nss_macsec.h	44;"	d
NSSFB1_PLL14_L_VAL	ipq806x/include/msm_nss_macsec.h	44;"	d
NSSFB1_PLL14_MODE	include/msm_nss_macsec.h	43;"	d
NSSFB1_PLL14_MODE	ipq806x/include/msm_nss_macsec.h	43;"	d
NSSFB1_PLL14_M_VAL	include/msm_nss_macsec.h	45;"	d
NSSFB1_PLL14_M_VAL	ipq806x/include/msm_nss_macsec.h	45;"	d
NSSFB1_PLL14_N_VAL	include/msm_nss_macsec.h	46;"	d
NSSFB1_PLL14_N_VAL	ipq806x/include/msm_nss_macsec.h	46;"	d
NSSFB1_PLL14_STATUS	include/msm_nss_macsec.h	49;"	d
NSSFB1_PLL14_STATUS	ipq806x/include/msm_nss_macsec.h	49;"	d
NSSFB1_PLL14_TEST_CTL	include/msm_nss_macsec.h	47;"	d
NSSFB1_PLL14_TEST_CTL	ipq806x/include/msm_nss_macsec.h	47;"	d
NSSFB1_PLL18_CONFIG	include/msm_nss_macsec.h	55;"	d
NSSFB1_PLL18_CONFIG	ipq806x/include/msm_nss_macsec.h	55;"	d
NSSFB1_PLL18_L_VAL	include/msm_nss_macsec.h	51;"	d
NSSFB1_PLL18_L_VAL	ipq806x/include/msm_nss_macsec.h	51;"	d
NSSFB1_PLL18_MODE	include/msm_nss_macsec.h	50;"	d
NSSFB1_PLL18_MODE	ipq806x/include/msm_nss_macsec.h	50;"	d
NSSFB1_PLL18_M_VAL	include/msm_nss_macsec.h	52;"	d
NSSFB1_PLL18_M_VAL	ipq806x/include/msm_nss_macsec.h	52;"	d
NSSFB1_PLL18_N_VAL	include/msm_nss_macsec.h	53;"	d
NSSFB1_PLL18_N_VAL	ipq806x/include/msm_nss_macsec.h	53;"	d
NSSFB1_PLL18_STATUS	include/msm_nss_macsec.h	56;"	d
NSSFB1_PLL18_STATUS	ipq806x/include/msm_nss_macsec.h	56;"	d
NSSFB1_PLL18_TEST_CTL	include/msm_nss_macsec.h	54;"	d
NSSFB1_PLL18_TEST_CTL	ipq806x/include/msm_nss_macsec.h	54;"	d
NSSFB1_PLL_ENA_APCS	include/msm_nss_macsec.h	42;"	d
NSSFB1_PLL_ENA_APCS	ipq806x/include/msm_nss_macsec.h	42;"	d
NSS_ACC_REG	include/nss_gmac_clocks.h	27;"	d
NSS_ACC_REG	ipq806x/include/nss_gmac_clocks.h	27;"	d
NSS_CSR_CFG	include/msm_nss_gmac.h	41;"	d
NSS_CSR_CFG	ipq806x/include/msm_nss_gmac.h	41;"	d
NSS_CSR_REV	include/msm_nss_gmac.h	40;"	d
NSS_CSR_REV	ipq806x/include/msm_nss_gmac.h	40;"	d
NSS_ETH_CLK_CTLn	include/msm_nss_gmac.h	61;"	d
NSS_ETH_CLK_CTLn	ipq806x/include/msm_nss_gmac.h	61;"	d
NSS_ETH_CLK_DIV0	include/msm_nss_gmac.h	43;"	d
NSS_ETH_CLK_DIV0	ipq806x/include/msm_nss_gmac.h	43;"	d
NSS_ETH_CLK_DIV1	include/msm_nss_gmac.h	44;"	d
NSS_ETH_CLK_DIV1	ipq806x/include/msm_nss_gmac.h	44;"	d
NSS_ETH_CLK_GATE_CTL	include/msm_nss_gmac.h	42;"	d
NSS_ETH_CLK_GATE_CTL	ipq806x/include/msm_nss_gmac.h	42;"	d
NSS_ETH_CLK_INV_CTL	include/msm_nss_gmac.h	46;"	d
NSS_ETH_CLK_INV_CTL	ipq806x/include/msm_nss_gmac.h	46;"	d
NSS_ETH_CLK_ROOT_STAT	include/msm_nss_gmac.h	53;"	d
NSS_ETH_CLK_ROOT_STAT	ipq806x/include/msm_nss_gmac.h	53;"	d
NSS_ETH_CLK_SRC_CTL	include/msm_nss_gmac.h	45;"	d
NSS_ETH_CLK_SRC_CTL	ipq806x/include/msm_nss_gmac.h	45;"	d
NSS_ETH_MACSEC_TEST_BUS_1	include/msm_nss_macsec.h	33;"	d
NSS_ETH_MACSEC_TEST_BUS_1	ipq806x/include/msm_nss_macsec.h	33;"	d
NSS_ETH_MACSEC_TEST_BUS_EN	include/msm_nss_macsec.h	32;"	d
NSS_ETH_MACSEC_TEST_BUS_EN	ipq806x/include/msm_nss_macsec.h	32;"	d
NSS_ETH_SPARE_CTL	include/msm_nss_gmac.h	55;"	d
NSS_ETH_SPARE_CTL	ipq806x/include/msm_nss_gmac.h	55;"	d
NSS_ETH_SPARE_STAT	include/msm_nss_gmac.h	56;"	d
NSS_ETH_SPARE_STAT	ipq806x/include/msm_nss_gmac.h	56;"	d
NSS_GMAC0_BASE	include/msm_nss_gmac.h	27;"	d
NSS_GMAC0_BASE	ipq806x/include/msm_nss_gmac.h	27;"	d
NSS_GMAC0_CTL	include/msm_nss_gmac.h	49;"	d
NSS_GMAC0_CTL	ipq806x/include/msm_nss_gmac.h	49;"	d
NSS_GMAC1_BASE	include/msm_nss_gmac.h	28;"	d
NSS_GMAC1_BASE	ipq806x/include/msm_nss_gmac.h	28;"	d
NSS_GMAC1_CTL	include/msm_nss_gmac.h	50;"	d
NSS_GMAC1_CTL	ipq806x/include/msm_nss_gmac.h	50;"	d
NSS_GMAC2_BASE	include/msm_nss_gmac.h	29;"	d
NSS_GMAC2_BASE	ipq806x/include/msm_nss_gmac.h	29;"	d
NSS_GMAC2_CTL	include/msm_nss_gmac.h	51;"	d
NSS_GMAC2_CTL	ipq806x/include/msm_nss_gmac.h	51;"	d
NSS_GMAC3_BASE	include/msm_nss_gmac.h	30;"	d
NSS_GMAC3_BASE	ipq806x/include/msm_nss_gmac.h	30;"	d
NSS_GMAC3_CTL	include/msm_nss_gmac.h	52;"	d
NSS_GMAC3_CTL	ipq806x/include/msm_nss_gmac.h	52;"	d
NSS_GMAC_ADVERTISED_FEATURES	include/nss_gmac_dev.h	82;"	d
NSS_GMAC_ADVERTISED_FEATURES	ipq806x/include/nss_gmac_dev.h	82;"	d
NSS_GMAC_COMMON_DEVICE_NODE	ipq806x/nss_gmac_ctrl.c	60;"	d	file:
NSS_GMAC_DMABASE	include/nss_gmac_dev.h	51;"	d
NSS_GMAC_DMABASE	ipq806x/include/nss_gmac_dev.h	51;"	d
NSS_GMAC_EVENT_OTHER	exports/nss_gmac_api_if.h	34;"	d
NSS_GMAC_EVENT_OTHER	ipq806x/exports/nss_gmac_api_if.h	34;"	d
NSS_GMAC_EVENT_STATS	exports/nss_gmac_api_if.h	33;"	d
NSS_GMAC_EVENT_STATS	ipq806x/exports/nss_gmac_api_if.h	33;"	d
NSS_GMAC_EXTRA	include/nss_gmac_dev.h	63;"	d
NSS_GMAC_EXTRA	ipq806x/include/nss_gmac_dev.h	63;"	d
NSS_GMAC_FAILURE	exports/nss_gmac_api_if.h	40;"	d
NSS_GMAC_FAILURE	ipq806x/exports/nss_gmac_api_if.h	40;"	d
NSS_GMAC_FULL_JUMBO_FRAME_MTU	exports/nss_gmac_api_if.h	28;"	d
NSS_GMAC_FULL_JUMBO_FRAME_MTU	ipq806x/exports/nss_gmac_api_if.h	28;"	d
NSS_GMAC_IPC_OFFLOAD	include/nss_gmac_dev.h	47;"	d
NSS_GMAC_IPC_OFFLOAD	ipq806x/include/nss_gmac_dev.h	47;"	d
NSS_GMAC_JUMBO_MTU	include/nss_gmac_dev.h	64;"	d
NSS_GMAC_JUMBO_MTU	ipq806x/include/nss_gmac_dev.h	64;"	d
NSS_GMAC_LINK_CHECK_TIME	include/nss_gmac_network_interface.h	36;"	d
NSS_GMAC_LINK_CHECK_TIME	ipq806x/include/nss_gmac_network_interface.h	36;"	d
NSS_GMAC_MACBASE	include/nss_gmac_dev.h	49;"	d
NSS_GMAC_MACBASE	ipq806x/include/nss_gmac_dev.h	49;"	d
NSS_GMAC_MAX_DESC_BUFF	include/nss_gmac_dev.h	67;"	d
NSS_GMAC_MAX_DESC_BUFF	ipq806x/include/nss_gmac_dev.h	67;"	d
NSS_GMAC_MINI_JUMBO_FRAME_MTU	exports/nss_gmac_api_if.h	27;"	d
NSS_GMAC_MINI_JUMBO_FRAME_MTU	ipq806x/exports/nss_gmac_api_if.h	27;"	d
NSS_GMAC_MODE0	exports/nss_gmac_api_if.h	45;"	d
NSS_GMAC_MODE0	ipq806x/exports/nss_gmac_api_if.h	45;"	d
NSS_GMAC_MODE1	exports/nss_gmac_api_if.h	46;"	d
NSS_GMAC_MODE1	ipq806x/exports/nss_gmac_api_if.h	46;"	d
NSS_GMAC_NAPI_BUDGET	ipq806x/nss_gmac_tx_rx_offload.c	41;"	d	file:
NSS_GMAC_NORMAL_FRAME_MTU	exports/nss_gmac_api_if.h	26;"	d
NSS_GMAC_NORMAL_FRAME_MTU	ipq806x/exports/nss_gmac_api_if.h	26;"	d
NSS_GMAC_NO_MDIO_PHY	include/msm_nss_gmac.h	302;"	d
NSS_GMAC_NO_MDIO_PHY	ipq806x/include/msm_nss_gmac.h	302;"	d
NSS_GMAC_PHY_FIXUP_MASK	ipq806x/nss_gmac_ctrl.c	59;"	d	file:
NSS_GMAC_PHY_FIXUP_UID	ipq806x/nss_gmac_ctrl.c	58;"	d	file:
NSS_GMAC_PHY_PROFILE_1R_3S	include/msm_nss_gmac.h	306;"	d
NSS_GMAC_PHY_PROFILE_1R_3S	ipq806x/include/msm_nss_gmac.h	306;"	d
NSS_GMAC_PHY_PROFILE_2R_2S	include/msm_nss_gmac.h	305;"	d
NSS_GMAC_PHY_PROFILE_2R_2S	ipq806x/include/msm_nss_gmac.h	305;"	d
NSS_GMAC_PHY_PROFILE_QS	include/msm_nss_gmac.h	307;"	d
NSS_GMAC_PHY_PROFILE_QS	ipq806x/include/msm_nss_gmac.h	307;"	d
NSS_GMAC_PRIV_FLAG	include/nss_gmac_dev.h	298;"	d
NSS_GMAC_PRIV_FLAG	ipq806x/include/nss_gmac_dev.h	298;"	d
NSS_GMAC_PRIV_FLAGS_LEN	ipq806x/nss_gmac_ethtool.c	109;"	d	file:
NSS_GMAC_REG_BLOCK_LEN	include/nss_gmac_dev.h	53;"	d
NSS_GMAC_REG_BLOCK_LEN	ipq806x/include/nss_gmac_dev.h	53;"	d
NSS_GMAC_REG_LEN	include/msm_nss_gmac.h	31;"	d
NSS_GMAC_REG_LEN	ipq806x/include/msm_nss_gmac.h	31;"	d
NSS_GMAC_RTL_VER	include/nss_gmac_dev.h	68;"	d
NSS_GMAC_RTL_VER	ipq806x/include/nss_gmac_dev.h	68;"	d
NSS_GMAC_RX_DESC_SIZE	include/nss_gmac_dev.h	57;"	d
NSS_GMAC_RX_DESC_SIZE	ipq806x/include/nss_gmac_dev.h	57;"	d
NSS_GMAC_SPEED_SET	include/nss_gmac_dev.h	249;"	d
NSS_GMAC_SPEED_SET	ipq806x/include/nss_gmac_dev.h	249;"	d
NSS_GMAC_STAT	ipq806x/nss_gmac_ethtool.c	46;"	d	file:
NSS_GMAC_STATS_LEN	ipq806x/nss_gmac_ethtool.c	108;"	d	file:
NSS_GMAC_SUCCESS	exports/nss_gmac_api_if.h	39;"	d
NSS_GMAC_SUCCESS	ipq806x/exports/nss_gmac_api_if.h	39;"	d
NSS_GMAC_SUPPORTED_FEATURES	include/nss_gmac_dev.h	71;"	d
NSS_GMAC_SUPPORTED_FEATURES	ipq806x/include/nss_gmac_dev.h	71;"	d
NSS_GMAC_TX_DESC_SIZE	include/nss_gmac_dev.h	55;"	d
NSS_GMAC_TX_DESC_SIZE	ipq806x/include/nss_gmac_dev.h	55;"	d
NSS_GMAC_WORKQUEUE_NAME	include/nss_gmac_dev.h	141;"	d
NSS_GMAC_WORKQUEUE_NAME	ipq806x/include/nss_gmac_dev.h	141;"	d
NSS_GMACn_CTL	include/msm_nss_gmac.h	60;"	d
NSS_GMACn_CTL	ipq806x/include/msm_nss_gmac.h	60;"	d
NSS_MACSEC1_BASE	include/msm_nss_macsec.h	23;"	d
NSS_MACSEC1_BASE	ipq806x/include/msm_nss_macsec.h	23;"	d
NSS_MACSEC1_CORE_CLK_FS_CTL	include/msm_nss_macsec.h	29;"	d
NSS_MACSEC1_CORE_CLK_FS_CTL	ipq806x/include/msm_nss_macsec.h	29;"	d
NSS_MACSEC2_BASE	include/msm_nss_macsec.h	24;"	d
NSS_MACSEC2_BASE	ipq806x/include/msm_nss_macsec.h	24;"	d
NSS_MACSEC2_CORE_CLK_FS_CTL	include/msm_nss_macsec.h	30;"	d
NSS_MACSEC2_CORE_CLK_FS_CTL	ipq806x/include/msm_nss_macsec.h	30;"	d
NSS_MACSEC3_BASE	include/msm_nss_macsec.h	25;"	d
NSS_MACSEC3_BASE	ipq806x/include/msm_nss_macsec.h	25;"	d
NSS_MACSEC3_CORE_CLK_FS_CTL	include/msm_nss_macsec.h	31;"	d
NSS_MACSEC3_CORE_CLK_FS_CTL	ipq806x/include/msm_nss_macsec.h	31;"	d
NSS_MACSEC_CTL	include/msm_nss_gmac.h	47;"	d
NSS_MACSEC_CTL	ipq806x/include/msm_nss_gmac.h	47;"	d
NSS_MACSEC_REG_LEN	include/msm_nss_macsec.h	26;"	d
NSS_MACSEC_REG_LEN	ipq806x/include/msm_nss_macsec.h	26;"	d
NSS_MAX_GMACS	include/msm_nss_gmac.h	325;"	d
NSS_MAX_GMACS	ipq806x/include/msm_nss_gmac.h	325;"	d
NSS_QSGMII_CLK_CTL	include/msm_nss_gmac.h	48;"	d
NSS_QSGMII_CLK_CTL	ipq806x/include/msm_nss_gmac.h	48;"	d
NSS_QSGMII_STAT	include/msm_nss_gmac.h	54;"	d
NSS_QSGMII_STAT	ipq806x/include/msm_nss_gmac.h	54;"	d
NSS_REG_BASE	include/msm_nss_gmac.h	34;"	d
NSS_REG_BASE	ipq806x/include/msm_nss_gmac.h	34;"	d
NSS_REG_LEN	include/msm_nss_gmac.h	35;"	d
NSS_REG_LEN	ipq806x/include/msm_nss_gmac.h	35;"	d
NSS_RESET_SPARE	include/nss_gmac_clocks.h	28;"	d
NSS_RESET_SPARE	ipq806x/include/nss_gmac_clocks.h	28;"	d
PCS_ALL_CH_CTL	include/msm_nss_gmac.h	172;"	d
PCS_ALL_CH_CTL	ipq806x/include/msm_nss_gmac.h	172;"	d
PCS_ALL_CH_STAT	include/msm_nss_gmac.h	173;"	d
PCS_ALL_CH_STAT	ipq806x/include/msm_nss_gmac.h	173;"	d
PCS_CAL_LCKDT_CTL	include/msm_nss_gmac.h	174;"	d
PCS_CAL_LCKDT_CTL	ipq806x/include/msm_nss_gmac.h	174;"	d
PCS_CAL_LCKDT_CTL_STATUS	include/msm_nss_gmac.h	175;"	d
PCS_CAL_LCKDT_CTL_STATUS	ipq806x/include/msm_nss_gmac.h	175;"	d
PCS_CH0_AUTONEG_COMPLETE	include/msm_nss_gmac.h	247;"	d
PCS_CH0_AUTONEG_COMPLETE	ipq806x/include/msm_nss_gmac.h	247;"	d
PCS_CH0_FORCE_SPEED	include/msm_nss_gmac.h	237;"	d
PCS_CH0_FORCE_SPEED	ipq806x/include/msm_nss_gmac.h	237;"	d
PCS_CH0_SERDES_SN_DETECT	include/msm_nss_gmac.h	183;"	d
PCS_CH0_SERDES_SN_DETECT	ipq806x/include/msm_nss_gmac.h	183;"	d
PCS_CH0_SERDES_SN_DETECT_2	include/msm_nss_gmac.h	185;"	d
PCS_CH0_SERDES_SN_DETECT_2	ipq806x/include/msm_nss_gmac.h	185;"	d
PCS_CH0_SPEED_MASK	include/msm_nss_gmac.h	239;"	d
PCS_CH0_SPEED_MASK	ipq806x/include/msm_nss_gmac.h	239;"	d
PCS_CH_SPEED_10	include/msm_nss_gmac.h	241;"	d
PCS_CH_SPEED_10	ipq806x/include/msm_nss_gmac.h	241;"	d
PCS_CH_SPEED_100	include/msm_nss_gmac.h	242;"	d
PCS_CH_SPEED_100	ipq806x/include/msm_nss_gmac.h	242;"	d
PCS_CH_SPEED_1000	include/msm_nss_gmac.h	243;"	d
PCS_CH_SPEED_1000	ipq806x/include/msm_nss_gmac.h	243;"	d
PCS_CHn_AUTONEG_COMPLETE	include/msm_nss_gmac.h	248;"	d
PCS_CHn_AUTONEG_COMPLETE	ipq806x/include/msm_nss_gmac.h	248;"	d
PCS_CHn_FORCE_SPEED	include/msm_nss_gmac.h	238;"	d
PCS_CHn_FORCE_SPEED	ipq806x/include/msm_nss_gmac.h	238;"	d
PCS_CHn_SERDES_SN_DETECT	include/msm_nss_gmac.h	184;"	d
PCS_CHn_SERDES_SN_DETECT	ipq806x/include/msm_nss_gmac.h	184;"	d
PCS_CHn_SERDES_SN_DETECT_2	include/msm_nss_gmac.h	186;"	d
PCS_CHn_SERDES_SN_DETECT_2	ipq806x/include/msm_nss_gmac.h	186;"	d
PCS_CHn_SPEED	include/msm_nss_gmac.h	244;"	d
PCS_CHn_SPEED	ipq806x/include/msm_nss_gmac.h	244;"	d
PCS_CHn_SPEED_MASK	include/msm_nss_gmac.h	240;"	d
PCS_CHn_SPEED_MASK	ipq806x/include/msm_nss_gmac.h	240;"	d
PCS_LCKDT_RST	include/msm_nss_gmac.h	252;"	d
PCS_LCKDT_RST	ipq806x/include/msm_nss_gmac.h	252;"	d
PCS_MAC_STAT_CH0_ASYM_PAUSE	include/msm_nss_gmac.h	224;"	d
PCS_MAC_STAT_CH0_ASYM_PAUSE	ipq806x/include/msm_nss_gmac.h	224;"	d
PCS_MAC_STAT_CH0_DUPLEX	include/msm_nss_gmac.h	221;"	d
PCS_MAC_STAT_CH0_DUPLEX	ipq806x/include/msm_nss_gmac.h	221;"	d
PCS_MAC_STAT_CH0_LINK	include/msm_nss_gmac.h	220;"	d
PCS_MAC_STAT_CH0_LINK	ipq806x/include/msm_nss_gmac.h	220;"	d
PCS_MAC_STAT_CH0_PAUSE	include/msm_nss_gmac.h	223;"	d
PCS_MAC_STAT_CH0_PAUSE	ipq806x/include/msm_nss_gmac.h	223;"	d
PCS_MAC_STAT_CH0_RX_PAUSE	include/msm_nss_gmac.h	226;"	d
PCS_MAC_STAT_CH0_RX_PAUSE	ipq806x/include/msm_nss_gmac.h	226;"	d
PCS_MAC_STAT_CH0_SPEED_MASK	include/msm_nss_gmac.h	222;"	d
PCS_MAC_STAT_CH0_SPEED_MASK	ipq806x/include/msm_nss_gmac.h	222;"	d
PCS_MAC_STAT_CH0_TX_PAUSE	include/msm_nss_gmac.h	225;"	d
PCS_MAC_STAT_CH0_TX_PAUSE	ipq806x/include/msm_nss_gmac.h	225;"	d
PCS_MAC_STAT_CHn_ASYM_PAUSE	include/msm_nss_gmac.h	232;"	d
PCS_MAC_STAT_CHn_ASYM_PAUSE	ipq806x/include/msm_nss_gmac.h	232;"	d
PCS_MAC_STAT_CHn_DUPLEX	include/msm_nss_gmac.h	228;"	d
PCS_MAC_STAT_CHn_DUPLEX	ipq806x/include/msm_nss_gmac.h	228;"	d
PCS_MAC_STAT_CHn_LINK	include/msm_nss_gmac.h	227;"	d
PCS_MAC_STAT_CHn_LINK	ipq806x/include/msm_nss_gmac.h	227;"	d
PCS_MAC_STAT_CHn_PAUSE	include/msm_nss_gmac.h	231;"	d
PCS_MAC_STAT_CHn_PAUSE	ipq806x/include/msm_nss_gmac.h	231;"	d
PCS_MAC_STAT_CHn_RX_PAUSE	include/msm_nss_gmac.h	234;"	d
PCS_MAC_STAT_CHn_RX_PAUSE	ipq806x/include/msm_nss_gmac.h	234;"	d
PCS_MAC_STAT_CHn_SPEED	include/msm_nss_gmac.h	230;"	d
PCS_MAC_STAT_CHn_SPEED	ipq806x/include/msm_nss_gmac.h	230;"	d
PCS_MAC_STAT_CHn_SPEED_MASK	include/msm_nss_gmac.h	229;"	d
PCS_MAC_STAT_CHn_SPEED_MASK	ipq806x/include/msm_nss_gmac.h	229;"	d
PCS_MAC_STAT_CHn_TX_PAUSE	include/msm_nss_gmac.h	233;"	d
PCS_MAC_STAT_CHn_TX_PAUSE	ipq806x/include/msm_nss_gmac.h	233;"	d
PCS_MODE_CTL	include/msm_nss_gmac.h	170;"	d
PCS_MODE_CTL	ipq806x/include/msm_nss_gmac.h	170;"	d
PCS_MODE_CTL_BASE_X	include/msm_nss_gmac.h	207;"	d
PCS_MODE_CTL_BASE_X	ipq806x/include/msm_nss_gmac.h	207;"	d
PCS_MODE_CTL_CH0_AUTONEG_EN	include/msm_nss_gmac.h	213;"	d
PCS_MODE_CTL_CH0_AUTONEG_EN	ipq806x/include/msm_nss_gmac.h	213;"	d
PCS_MODE_CTL_CH0_AUTONEG_RESTART	include/msm_nss_gmac.h	212;"	d
PCS_MODE_CTL_CH0_AUTONEG_RESTART	ipq806x/include/msm_nss_gmac.h	212;"	d
PCS_MODE_CTL_CH0_PHY_LOOPBACK	include/msm_nss_gmac.h	211;"	d
PCS_MODE_CTL_CH0_PHY_LOOPBACK	ipq806x/include/msm_nss_gmac.h	211;"	d
PCS_MODE_CTL_CH0_PHY_RESET	include/msm_nss_gmac.h	210;"	d
PCS_MODE_CTL_CH0_PHY_RESET	ipq806x/include/msm_nss_gmac.h	210;"	d
PCS_MODE_CTL_CHn_AUTONEG_EN	include/msm_nss_gmac.h	216;"	d
PCS_MODE_CTL_CHn_AUTONEG_EN	ipq806x/include/msm_nss_gmac.h	216;"	d
PCS_MODE_CTL_CHn_AUTONEG_RESTART	include/msm_nss_gmac.h	217;"	d
PCS_MODE_CTL_CHn_AUTONEG_RESTART	ipq806x/include/msm_nss_gmac.h	217;"	d
PCS_MODE_CTL_CHn_PHY_LOOPBACK	include/msm_nss_gmac.h	215;"	d
PCS_MODE_CTL_CHn_PHY_LOOPBACK	ipq806x/include/msm_nss_gmac.h	215;"	d
PCS_MODE_CTL_CHn_PHY_RESET	include/msm_nss_gmac.h	214;"	d
PCS_MODE_CTL_CHn_PHY_RESET	ipq806x/include/msm_nss_gmac.h	214;"	d
PCS_MODE_CTL_SGMII_MAC	include/msm_nss_gmac.h	209;"	d
PCS_MODE_CTL_SGMII_MAC	ipq806x/include/msm_nss_gmac.h	209;"	d
PCS_MODE_CTL_SGMII_PHY	include/msm_nss_gmac.h	208;"	d
PCS_MODE_CTL_SGMII_PHY	ipq806x/include/msm_nss_gmac.h	208;"	d
PCS_QSGMII_ATHR_CSCO_AUTONEG	include/msm_nss_gmac.h	195;"	d
PCS_QSGMII_ATHR_CSCO_AUTONEG	ipq806x/include/msm_nss_gmac.h	195;"	d
PCS_QSGMII_CTL	include/msm_nss_gmac.h	168;"	d
PCS_QSGMII_CTL	ipq806x/include/msm_nss_gmac.h	168;"	d
PCS_QSGMII_CUTTHROUGH_RX	include/msm_nss_gmac.h	192;"	d
PCS_QSGMII_CUTTHROUGH_RX	ipq806x/include/msm_nss_gmac.h	192;"	d
PCS_QSGMII_CUTTHROUGH_TX	include/msm_nss_gmac.h	193;"	d
PCS_QSGMII_CUTTHROUGH_TX	ipq806x/include/msm_nss_gmac.h	193;"	d
PCS_QSGMII_DEPTH_THRESH	include/msm_nss_gmac.h	188;"	d
PCS_QSGMII_DEPTH_THRESH	ipq806x/include/msm_nss_gmac.h	188;"	d
PCS_QSGMII_DEPTH_THRESH_MASK	include/msm_nss_gmac.h	187;"	d
PCS_QSGMII_DEPTH_THRESH_MASK	ipq806x/include/msm_nss_gmac.h	187;"	d
PCS_QSGMII_MAC_STAT	include/msm_nss_gmac.h	171;"	d
PCS_QSGMII_MAC_STAT	ipq806x/include/msm_nss_gmac.h	171;"	d
PCS_QSGMII_MODE_QSGMII	include/msm_nss_gmac.h	200;"	d
PCS_QSGMII_MODE_QSGMII	ipq806x/include/msm_nss_gmac.h	200;"	d
PCS_QSGMII_MODE_SGMII	include/msm_nss_gmac.h	199;"	d
PCS_QSGMII_MODE_SGMII	ipq806x/include/msm_nss_gmac.h	199;"	d
PCS_QSGMII_SGMII_MODE	include/msm_nss_gmac.h	169;"	d
PCS_QSGMII_SGMII_MODE	ipq806x/include/msm_nss_gmac.h	169;"	d
PCS_QSGMII_SHORT_LATENCY	include/msm_nss_gmac.h	190;"	d
PCS_QSGMII_SHORT_LATENCY	ipq806x/include/msm_nss_gmac.h	190;"	d
PCS_QSGMII_SHORT_THRESH	include/msm_nss_gmac.h	191;"	d
PCS_QSGMII_SHORT_THRESH	ipq806x/include/msm_nss_gmac.h	191;"	d
PCS_QSGMII_SW_VER_1_7	include/msm_nss_gmac.h	194;"	d
PCS_QSGMII_SW_VER_1_7	ipq806x/include/msm_nss_gmac.h	194;"	d
PWD	Makefile	/^PWD=$(shell pwd)$/;"	m
QSGMII_CLK_DIV_10	include/msm_nss_gmac.h	106;"	d
QSGMII_CLK_DIV_10	ipq806x/include/msm_nss_gmac.h	106;"	d
QSGMII_CLK_DIV_100	include/msm_nss_gmac.h	105;"	d
QSGMII_CLK_DIV_100	ipq806x/include/msm_nss_gmac.h	105;"	d
QSGMII_CLK_DIV_1000	include/msm_nss_gmac.h	104;"	d
QSGMII_CLK_DIV_1000	ipq806x/include/msm_nss_gmac.h	104;"	d
QSGMII_PHY_CDR_EN	include/msm_nss_gmac.h	255;"	d
QSGMII_PHY_CDR_EN	ipq806x/include/msm_nss_gmac.h	255;"	d
QSGMII_PHY_CDR_PI_SLEW	include/msm_nss_gmac.h	273;"	d
QSGMII_PHY_CDR_PI_SLEW	ipq806x/include/msm_nss_gmac.h	273;"	d
QSGMII_PHY_CDR_PI_SLEW_MASK	include/msm_nss_gmac.h	272;"	d
QSGMII_PHY_CDR_PI_SLEW_MASK	ipq806x/include/msm_nss_gmac.h	272;"	d
QSGMII_PHY_DEEMPHASIS_LVL	include/msm_nss_gmac.h	265;"	d
QSGMII_PHY_DEEMPHASIS_LVL	ipq806x/include/msm_nss_gmac.h	265;"	d
QSGMII_PHY_DEEMPHASIS_LVL_MASK	include/msm_nss_gmac.h	264;"	d
QSGMII_PHY_DEEMPHASIS_LVL_MASK	ipq806x/include/msm_nss_gmac.h	264;"	d
QSGMII_PHY_FAR_END_LOOPBACK	include/msm_nss_gmac.h	260;"	d
QSGMII_PHY_FAR_END_LOOPBACK	ipq806x/include/msm_nss_gmac.h	260;"	d
QSGMII_PHY_MODE_CTL	include/msm_nss_gmac.h	176;"	d
QSGMII_PHY_MODE_CTL	ipq806x/include/msm_nss_gmac.h	176;"	d
QSGMII_PHY_MODE_QSGMII	include/msm_nss_gmac.h	204;"	d
QSGMII_PHY_MODE_QSGMII	ipq806x/include/msm_nss_gmac.h	204;"	d
QSGMII_PHY_MODE_SGMII	include/msm_nss_gmac.h	203;"	d
QSGMII_PHY_MODE_SGMII	ipq806x/include/msm_nss_gmac.h	203;"	d
QSGMII_PHY_NEAR_END_LOOPBACK	include/msm_nss_gmac.h	259;"	d
QSGMII_PHY_NEAR_END_LOOPBACK	ipq806x/include/msm_nss_gmac.h	259;"	d
QSGMII_PHY_PHASE_LOOP_GAIN	include/msm_nss_gmac.h	267;"	d
QSGMII_PHY_PHASE_LOOP_GAIN	ipq806x/include/msm_nss_gmac.h	267;"	d
QSGMII_PHY_PHASE_LOOP_GAIN_MASK	include/msm_nss_gmac.h	266;"	d
QSGMII_PHY_PHASE_LOOP_GAIN_MASK	ipq806x/include/msm_nss_gmac.h	266;"	d
QSGMII_PHY_QSGMII_CTL	include/msm_nss_gmac.h	177;"	d
QSGMII_PHY_QSGMII_CTL	ipq806x/include/msm_nss_gmac.h	177;"	d
QSGMII_PHY_QSGMII_EN	include/msm_nss_gmac.h	261;"	d
QSGMII_PHY_QSGMII_EN	ipq806x/include/msm_nss_gmac.h	261;"	d
QSGMII_PHY_RX_DC_BIAS	include/msm_nss_gmac.h	269;"	d
QSGMII_PHY_RX_DC_BIAS	ipq806x/include/msm_nss_gmac.h	269;"	d
QSGMII_PHY_RX_DC_BIAS_MASK	include/msm_nss_gmac.h	268;"	d
QSGMII_PHY_RX_DC_BIAS_MASK	ipq806x/include/msm_nss_gmac.h	268;"	d
QSGMII_PHY_RX_FRONT_EN	include/msm_nss_gmac.h	256;"	d
QSGMII_PHY_RX_FRONT_EN	ipq806x/include/msm_nss_gmac.h	256;"	d
QSGMII_PHY_RX_INPUT_EQU	include/msm_nss_gmac.h	271;"	d
QSGMII_PHY_RX_INPUT_EQU	ipq806x/include/msm_nss_gmac.h	271;"	d
QSGMII_PHY_RX_INPUT_EQU_MASK	include/msm_nss_gmac.h	270;"	d
QSGMII_PHY_RX_INPUT_EQU_MASK	ipq806x/include/msm_nss_gmac.h	270;"	d
QSGMII_PHY_RX_SIGNAL_DETECT_EN	include/msm_nss_gmac.h	257;"	d
QSGMII_PHY_RX_SIGNAL_DETECT_EN	ipq806x/include/msm_nss_gmac.h	257;"	d
QSGMII_PHY_SERDES_CTL	include/msm_nss_gmac.h	180;"	d
QSGMII_PHY_SERDES_CTL	ipq806x/include/msm_nss_gmac.h	180;"	d
QSGMII_PHY_SGMII_1_CTL	include/msm_nss_gmac.h	178;"	d
QSGMII_PHY_SGMII_1_CTL	ipq806x/include/msm_nss_gmac.h	178;"	d
QSGMII_PHY_SGMII_2_CTL	include/msm_nss_gmac.h	179;"	d
QSGMII_PHY_SGMII_2_CTL	ipq806x/include/msm_nss_gmac.h	179;"	d
QSGMII_PHY_SIG_DETECT_THRESH	include/msm_nss_gmac.h	275;"	d
QSGMII_PHY_SIG_DETECT_THRESH	ipq806x/include/msm_nss_gmac.h	275;"	d
QSGMII_PHY_SIG_DETECT_THRESH_MASK	include/msm_nss_gmac.h	274;"	d
QSGMII_PHY_SIG_DETECT_THRESH_MASK	ipq806x/include/msm_nss_gmac.h	274;"	d
QSGMII_PHY_SLEW_RATE_CTL	include/msm_nss_gmac.h	263;"	d
QSGMII_PHY_SLEW_RATE_CTL	ipq806x/include/msm_nss_gmac.h	263;"	d
QSGMII_PHY_SLEW_RATE_CTL_MASK	include/msm_nss_gmac.h	262;"	d
QSGMII_PHY_SLEW_RATE_CTL_MASK	ipq806x/include/msm_nss_gmac.h	262;"	d
QSGMII_PHY_TX_DRIVER_EN	include/msm_nss_gmac.h	258;"	d
QSGMII_PHY_TX_DRIVER_EN	ipq806x/include/msm_nss_gmac.h	258;"	d
QSGMII_PHY_TX_DRV_AMP	include/msm_nss_gmac.h	279;"	d
QSGMII_PHY_TX_DRV_AMP	ipq806x/include/msm_nss_gmac.h	279;"	d
QSGMII_PHY_TX_DRV_AMP_MASK	include/msm_nss_gmac.h	278;"	d
QSGMII_PHY_TX_DRV_AMP_MASK	ipq806x/include/msm_nss_gmac.h	278;"	d
QSGMII_PHY_TX_SLEW	include/msm_nss_gmac.h	277;"	d
QSGMII_PHY_TX_SLEW	ipq806x/include/msm_nss_gmac.h	277;"	d
QSGMII_PHY_TX_SLEW_MASK	include/msm_nss_gmac.h	276;"	d
QSGMII_PHY_TX_SLEW_MASK	ipq806x/include/msm_nss_gmac.h	276;"	d
QSGMII_REG_BASE	include/msm_nss_gmac.h	164;"	d
QSGMII_REG_BASE	ipq806x/include/msm_nss_gmac.h	164;"	d
QSGMII_REG_LEN	include/msm_nss_gmac.h	165;"	d
QSGMII_REG_LEN	ipq806x/include/msm_nss_gmac.h	165;"	d
RGMII_CLK_DIV_10	include/msm_nss_gmac.h	100;"	d
RGMII_CLK_DIV_10	ipq806x/include/msm_nss_gmac.h	100;"	d
RGMII_CLK_DIV_100	include/msm_nss_gmac.h	99;"	d
RGMII_CLK_DIV_100	ipq806x/include/msm_nss_gmac.h	99;"	d
RGMII_CLK_DIV_1000	include/msm_nss_gmac.h	98;"	d
RGMII_CLK_DIV_1000	ipq806x/include/msm_nss_gmac.h	98;"	d
RINGMODE	include/nss_gmac_dev.h	/^	RINGMODE = 0x00000001,$/;"	e	enum:desc_mode
RINGMODE	ipq806x/include/nss_gmac_dev.h	/^	RINGMODE = 0x00000001,$/;"	e	enum:desc_mode
SERDES_100MHZ_OSC_CLK	include/msm_nss_gmac.h	283;"	d
SERDES_100MHZ_OSC_CLK	ipq806x/include/msm_nss_gmac.h	283;"	d
SERDES_LOCK_DETECT_EN	include/msm_nss_gmac.h	284;"	d
SERDES_LOCK_DETECT_EN	ipq806x/include/msm_nss_gmac.h	284;"	d
SERDES_PLL_AMP	include/msm_nss_gmac.h	292;"	d
SERDES_PLL_AMP	ipq806x/include/msm_nss_gmac.h	292;"	d
SERDES_PLL_AMP_MASK	include/msm_nss_gmac.h	291;"	d
SERDES_PLL_AMP_MASK	ipq806x/include/msm_nss_gmac.h	291;"	d
SERDES_PLL_EN	include/msm_nss_gmac.h	285;"	d
SERDES_PLL_EN	ipq806x/include/msm_nss_gmac.h	285;"	d
SERDES_PLL_ICP	include/msm_nss_gmac.h	294;"	d
SERDES_PLL_ICP	ipq806x/include/msm_nss_gmac.h	294;"	d
SERDES_PLL_ICP_MASK	include/msm_nss_gmac.h	293;"	d
SERDES_PLL_ICP_MASK	ipq806x/include/msm_nss_gmac.h	293;"	d
SERDES_PLL_LOOP_FILTER	include/msm_nss_gmac.h	288;"	d
SERDES_PLL_LOOP_FILTER	ipq806x/include/msm_nss_gmac.h	288;"	d
SERDES_PLL_LOOP_FILTER_MASK	include/msm_nss_gmac.h	287;"	d
SERDES_PLL_LOOP_FILTER_MASK	ipq806x/include/msm_nss_gmac.h	287;"	d
SERDES_RSV	include/msm_nss_gmac.h	290;"	d
SERDES_RSV	ipq806x/include/msm_nss_gmac.h	290;"	d
SERDES_RSV_MASK	include/msm_nss_gmac.h	289;"	d
SERDES_RSV_MASK	ipq806x/include/msm_nss_gmac.h	289;"	d
SERDES_VCO_MANUAL_CAL	include/msm_nss_gmac.h	286;"	d
SERDES_VCO_MANUAL_CAL	ipq806x/include/msm_nss_gmac.h	286;"	d
SGMII_CLK_DIV_10	include/msm_nss_gmac.h	103;"	d
SGMII_CLK_DIV_10	ipq806x/include/msm_nss_gmac.h	103;"	d
SGMII_CLK_DIV_100	include/msm_nss_gmac.h	102;"	d
SGMII_CLK_DIV_100	ipq806x/include/msm_nss_gmac.h	102;"	d
SGMII_CLK_DIV_1000	include/msm_nss_gmac.h	101;"	d
SGMII_CLK_DIV_1000	ipq806x/include/msm_nss_gmac.h	101;"	d
SOCINFO_VERSION_MAJOR	ipq806x/nss_gmac_init.c	44;"	d	file:
SPEED10	include/nss_gmac_dev.h	/^	SPEED10 = 1,$/;"	e	enum:mii_link_speed
SPEED10	ipq806x/include/nss_gmac_dev.h	/^	SPEED10 = 1,$/;"	e	enum:mii_link_speed
SPEED100	include/nss_gmac_dev.h	/^	SPEED100 = 2,$/;"	e	enum:mii_link_speed
SPEED100	ipq806x/include/nss_gmac_dev.h	/^	SPEED100 = 2,$/;"	e	enum:mii_link_speed
SPEED1000	include/nss_gmac_dev.h	/^	SPEED1000 = 3,$/;"	e	enum:mii_link_speed
SPEED1000	ipq806x/include/nss_gmac_dev.h	/^	SPEED1000 = 3,$/;"	e	enum:mii_link_speed
SRDS_N_RESET	include/nss_gmac_clocks.h	51;"	d
SRDS_N_RESET	ipq806x/include/nss_gmac_clocks.h	51;"	d
SWITCH_INTERVAL	ipq806x/nss_gmac_ctrl.c	397;"	d	file:
SWITCH_PHY	ipq806x/nss_gmac_ctrl.c	380;"	d	file:
TM_ETH_BOTH_DIRECTION	ipq806x/nss_gmac_tx_rx_offload.c	53;"	d	file:
TM_ETH_CONTROL_ABOLISH	ipq806x/nss_gmac_tx_rx_offload.c	54;"	d	file:
TM_ETH_DROP_PACKET	ipq806x/nss_gmac_tx_rx_offload.c	55;"	d	file:
TM_ETH_MAX_LIMIT	ipq806x/nss_gmac_tx_rx_offload.c	56;"	d	file:
TM_ETH_ONE_DIRECTION	ipq806x/nss_gmac_tx_rx_offload.c	52;"	d	file:
__GMAC_API_IF_H	exports/nss_gmac_api_if.h	24;"	d
__GMAC_API_IF_H	ipq806x/exports/nss_gmac_api_if.h	24;"	d
__MSM_NSS_GMAC_H	include/msm_nss_gmac.h	20;"	d
__MSM_NSS_GMAC_H	ipq806x/include/msm_nss_gmac.h	20;"	d
__MSM_NSS_MACSEC_H	include/msm_nss_macsec.h	20;"	d
__MSM_NSS_MACSEC_H	ipq806x/include/msm_nss_macsec.h	20;"	d
__NSS_GMAC_AUTONEG	include/nss_gmac_dev.h	/^	__NSS_GMAC_AUTONEG,	\/* Autonegotiation Enabled		      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_AUTONEG	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_AUTONEG,	\/* Autonegotiation Enabled		      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_CLOCKS_H	include/nss_gmac_clocks.h	18;"	d
__NSS_GMAC_CLOCKS_H	ipq806x/include/nss_gmac_clocks.h	18;"	d
__NSS_GMAC_CLOSING	include/nss_gmac_dev.h	/^	__NSS_GMAC_CLOSING,	\/* set to indicate the interface is closing   *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_CLOSING	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_CLOSING,	\/* set to indicate the interface is closing   *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_DEV_H__	include/nss_gmac_dev.h	30;"	d
__NSS_GMAC_DEV_H__	ipq806x/include/nss_gmac_dev.h	30;"	d
__NSS_GMAC_LINKPOLL	include/nss_gmac_dev.h	/^	__NSS_GMAC_LINKPOLL,	\/* Poll link status			      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_LINKPOLL	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_LINKPOLL,	\/* Poll link status			      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_NETWORK_INTERFACE_H__	include/nss_gmac_network_interface.h	29;"	d
__NSS_GMAC_NETWORK_INTERFACE_H__	ipq806x/include/nss_gmac_network_interface.h	29;"	d
__NSS_GMAC_PRIV_FLAG_LINKPOLL	include/nss_gmac_dev.h	/^	__NSS_GMAC_PRIV_FLAG_LINKPOLL,$/;"	e	enum:nss_gmac_priv_flags
__NSS_GMAC_PRIV_FLAG_LINKPOLL	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_PRIV_FLAG_LINKPOLL,$/;"	e	enum:nss_gmac_priv_flags
__NSS_GMAC_PRIV_FLAG_MAX	include/nss_gmac_dev.h	/^	__NSS_GMAC_PRIV_FLAG_MAX,$/;"	e	enum:nss_gmac_priv_flags
__NSS_GMAC_PRIV_FLAG_MAX	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_PRIV_FLAG_MAX,$/;"	e	enum:nss_gmac_priv_flags
__NSS_GMAC_RXCSUM	include/nss_gmac_dev.h	/^	__NSS_GMAC_RXCSUM,	\/* Rx checksum enabled			      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_RXCSUM	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_RXCSUM,	\/* Rx checksum enabled			      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_RXPAUSE	include/nss_gmac_dev.h	/^	__NSS_GMAC_RXPAUSE,$/;"	e	enum:nss_gmac_state
__NSS_GMAC_RXPAUSE	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_RXPAUSE,$/;"	e	enum:nss_gmac_state
__NSS_GMAC_TXPAUSE	include/nss_gmac_dev.h	/^	__NSS_GMAC_TXPAUSE,$/;"	e	enum:nss_gmac_state
__NSS_GMAC_TXPAUSE	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_TXPAUSE,$/;"	e	enum:nss_gmac_state
__NSS_GMAC_UP	include/nss_gmac_dev.h	/^	__NSS_GMAC_UP,		\/* set to indicate the interface is UP	      *\/$/;"	e	enum:nss_gmac_state
__NSS_GMAC_UP	ipq806x/include/nss_gmac_dev.h	/^	__NSS_GMAC_UP,		\/* set to indicate the interface is UP	      *\/$/;"	e	enum:nss_gmac_state
ath_mmd_acc_ctrl_addr	include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_addr = 0x0000,		\/* address *\/$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_addr	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_addr = 0x0000,		\/* address *\/$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_data_incr_rw	include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_data_incr_rw = 0x8000,	\/* data, post incr on r\/w *\/$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_data_incr_rw	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_data_incr_rw = 0x8000,	\/* data, post incr on r\/w *\/$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_data_incr_w	include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_data_incr_w = 0xc000,	\/* data, post incr on write$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_data_incr_w	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_data_incr_w = 0xc000,	\/* data, post incr on write$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_data_no_incr	include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_data_no_incr = 0x4000,	\/* data, no post incr *\/$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_acc_ctrl_data_no_incr	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_acc_ctrl_data_no_incr = 0x4000,	\/* data, no post incr *\/$/;"	e	enum:ath_mmd_access_ctrl_function_bit_descriptions
ath_mmd_access_ctrl_function_bit_descriptions	include/nss_gmac_dev.h	/^enum ath_mmd_access_ctrl_function_bit_descriptions {$/;"	g
ath_mmd_access_ctrl_function_bit_descriptions	ipq806x/include/nss_gmac_dev.h	/^enum ath_mmd_access_ctrl_function_bit_descriptions {$/;"	g
ath_mmd_eee_adv	include/nss_gmac_dev.h	/^	ath_mmd_eee_adv = 0x003c,		\/* MMD EEE Advertisment *\/$/;"	e	enum:ath_mmd_register
ath_mmd_eee_adv	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_eee_adv = 0x003c,		\/* MMD EEE Advertisment *\/$/;"	e	enum:ath_mmd_register
ath_mmd_eee_adv_1000BT	include/nss_gmac_dev.h	/^	ath_mmd_eee_adv_1000BT = 0x0004,$/;"	e	enum:ath_mmd_eee_adv_bit_descriptions
ath_mmd_eee_adv_1000BT	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_eee_adv_1000BT = 0x0004,$/;"	e	enum:ath_mmd_eee_adv_bit_descriptions
ath_mmd_eee_adv_100BT	include/nss_gmac_dev.h	/^	ath_mmd_eee_adv_100BT = 0x0002,$/;"	e	enum:ath_mmd_eee_adv_bit_descriptions
ath_mmd_eee_adv_100BT	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_eee_adv_100BT = 0x0002,$/;"	e	enum:ath_mmd_eee_adv_bit_descriptions
ath_mmd_eee_adv_bit_descriptions	include/nss_gmac_dev.h	/^enum ath_mmd_eee_adv_bit_descriptions {$/;"	g
ath_mmd_eee_adv_bit_descriptions	ipq806x/include/nss_gmac_dev.h	/^enum ath_mmd_eee_adv_bit_descriptions {$/;"	g
ath_mmd_register	include/nss_gmac_dev.h	/^enum ath_mmd_register {$/;"	g
ath_mmd_register	ipq806x/include/nss_gmac_dev.h	/^enum ath_mmd_register {$/;"	g
ath_mmd_smart_eee_ctrl3_lpi_en	include/nss_gmac_dev.h	/^	ath_mmd_smart_eee_ctrl3_lpi_en = 0x0100,$/;"	e	enum:ath_mmd_smart_eee_ctrl_bit_descriptions
ath_mmd_smart_eee_ctrl3_lpi_en	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_smart_eee_ctrl3_lpi_en = 0x0100,$/;"	e	enum:ath_mmd_smart_eee_ctrl_bit_descriptions
ath_mmd_smart_eee_ctrl_3	include/nss_gmac_dev.h	/^	ath_mmd_smart_eee_ctrl_3 = 0x805d,	\/* MMD smart EEE control 3 *\/$/;"	e	enum:ath_mmd_register
ath_mmd_smart_eee_ctrl_3	ipq806x/include/nss_gmac_dev.h	/^	ath_mmd_smart_eee_ctrl_3 = 0x805d,	\/* MMD smart EEE control 3 *\/$/;"	e	enum:ath_mmd_register
ath_mmd_smart_eee_ctrl_bit_descriptions	include/nss_gmac_dev.h	/^enum ath_mmd_smart_eee_ctrl_bit_descriptions {$/;"	g
ath_mmd_smart_eee_ctrl_bit_descriptions	ipq806x/include/nss_gmac_dev.h	/^enum ath_mmd_smart_eee_ctrl_bit_descriptions {$/;"	g
athr_gmac_net_ops	ipq806x/dni_enet.c	/^static struct net_device_ops athr_gmac_net_ops;$/;"	v	typeref:struct:net_device_ops	file:
backpid	ipq806x/nss_gmac_tx_rx_offload.c	/^        int backpid;$/;"	m	struct:msg_data	file:
blink_wan_led_cleanup	ipq806x/nss_gmac_ctrl.c	/^static void blink_wan_led_cleanup(void)$/;"	f	file:
blink_wan_led_init	ipq806x/nss_gmac_ctrl.c	/^static void blink_wan_led_init(void)$/;"	f	file:
blink_wan_led_read	ipq806x/nss_gmac_ctrl.c	/^static int blink_wan_led_read( char *page, char **start, off_t offset, int count, int *eof, void *data)$/;"	f	file:
blink_wan_led_write	ipq806x/nss_gmac_ctrl.c	/^static int blink_wan_led_write( struct file *file, const char *buffer, unsigned long count, void *unused_data)$/;"	f	file:
buffer1	include/nss_gmac_dev.h	/^	uint32_t buffer1;	\/* Network Buffer 1 pointer (Dma-able)*\/$/;"	m	struct:dma_desc
buffer1	ipq806x/include/nss_gmac_dev.h	/^	uint32_t buffer1;	\/* Network Buffer 1 pointer (Dma-able)*\/$/;"	m	struct:dma_desc
busy_rx_desc	include/nss_gmac_dev.h	/^	uint32_t busy_rx_desc;	\/* Number of Rx Descriptors owned by$/;"	m	struct:nss_gmac_dev
busy_rx_desc	ipq806x/include/nss_gmac_dev.h	/^	uint32_t busy_rx_desc;	\/* Number of Rx Descriptors owned by$/;"	m	struct:nss_gmac_dev
busy_tx_desc	include/nss_gmac_dev.h	/^	uint32_t busy_tx_desc;	\/* Number of Tx Descriptors owned by$/;"	m	struct:nss_gmac_dev
busy_tx_desc	ipq806x/include/nss_gmac_dev.h	/^	uint32_t busy_tx_desc;	\/* Number of Tx Descriptors owned by$/;"	m	struct:nss_gmac_dev
change_mtu	exports/nss_gmac_api_if.h	/^	int (*change_mtu)(void *ctx, uint32_t mtu);$/;"	m	struct:nss_gmac_data_plane_ops
change_mtu	ipq806x/exports/nss_gmac_api_if.h	/^	int (*change_mtu)(void *ctx, uint32_t mtu);$/;"	m	struct:nss_gmac_data_plane_ops
clk_ctl_base	include/nss_gmac_dev.h	/^	uint32_t *clk_ctl_base;	\/* Base address of platform$/;"	m	struct:nss_gmac_global_ctx
clk_ctl_base	ipq806x/include/nss_gmac_dev.h	/^	uint32_t *clk_ctl_base;	\/* Base address of platform$/;"	m	struct:nss_gmac_global_ctx
clk_div_qsgmii	ipq806x/nss_gmac_init.c	/^static uint32_t clk_div_qsgmii(struct nss_gmac_dev *gmacdev)$/;"	f	file:
clk_div_rgmii	ipq806x/nss_gmac_init.c	/^static uint32_t clk_div_rgmii(struct nss_gmac_dev *gmacdev)$/;"	f	file:
clk_div_sgmii	ipq806x/nss_gmac_init.c	/^static uint32_t clk_div_sgmii(struct nss_gmac_dev *gmacdev)$/;"	f	file:
close	exports/nss_gmac_api_if.h	/^	int (*close)(void *ctx);$/;"	m	struct:nss_gmac_data_plane_ops
close	ipq806x/exports/nss_gmac_api_if.h	/^	int (*close)(void *ctx);$/;"	m	struct:nss_gmac_data_plane_ops
common_init_done	include/nss_gmac_dev.h	/^	bool common_init_done;	\/* Flag to hold common init done state *\/$/;"	m	struct:nss_gmac_global_ctx
common_init_done	ipq806x/include/nss_gmac_dev.h	/^	bool common_init_done;	\/* Flag to hold common init done state *\/$/;"	m	struct:nss_gmac_global_ctx
counter_rx	ipq806x/nss_gmac_tx_rx_offload.c	/^unsigned long long counter_rx = 0;$/;"	v
counter_tx	ipq806x/nss_gmac_tx_rx_offload.c	/^unsigned long long counter_tx = 0;$/;"	v
ctx	include/nss_gmac_dev.h	/^	struct nss_gmac_global_ctx *ctx;\/* Global NSS GMAC context            *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::nss_gmac_global_ctx
ctx	ipq806x/include/nss_gmac_dev.h	/^	struct nss_gmac_global_ctx *ctx;\/* Global NSS GMAC context            *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::nss_gmac_global_ctx
ctx	ipq806x/nss_gmac_ctrl.c	/^struct nss_gmac_global_ctx ctx;$/;"	v	typeref:struct:nss_gmac_global_ctx
data0	ipq806x/nss_gmac_ctrl.c	/^	uint32_t data0;		\/* LAN0 link status *\/$/;"	m	struct:mii_ioctl_priv_data	file:
data1	include/nss_gmac_dev.h	/^	uint32_t data1;		\/* This holds virtual address of$/;"	m	struct:dma_desc
data1	ipq806x/include/nss_gmac_dev.h	/^	uint32_t data1;		\/* This holds virtual address of$/;"	m	struct:dma_desc
data1	ipq806x/nss_gmac_ctrl.c	/^	uint32_t data1;		\/* LNA1 link status *\/$/;"	m	struct:mii_ioctl_priv_data	file:
data2	ipq806x/nss_gmac_ctrl.c	/^	uint32_t data2;		\/* LAN2 link status *\/$/;"	m	struct:mii_ioctl_priv_data	file:
data3	ipq806x/nss_gmac_ctrl.c	/^	uint32_t data3;		\/* LAN3 link status *\/$/;"	m	struct:mii_ioctl_priv_data	file:
data4	ipq806x/nss_gmac_ctrl.c	/^	uint32_t data4;		\/* WAN link status  *\/$/;"	m	struct:mii_ioctl_priv_data	file:
data_plane_ctx	include/nss_gmac_dev.h	/^	void *data_plane_ctx;		\/* context when NSS owns GMACs        *\/$/;"	m	struct:nss_gmac_dev
data_plane_ctx	ipq806x/include/nss_gmac_dev.h	/^	void *data_plane_ctx;		\/* context when NSS owns GMACs        *\/$/;"	m	struct:nss_gmac_dev
data_plane_ops	include/nss_gmac_dev.h	/^	struct nss_gmac_data_plane_ops *data_plane_ops;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::nss_gmac_data_plane_ops
data_plane_ops	ipq806x/include/nss_gmac_dev.h	/^	struct nss_gmac_data_plane_ops *data_plane_ops;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::nss_gmac_data_plane_ops
desc_da_filter_fail	include/nss_gmac_dev.h	/^	desc_da_filter_fail = 0x40000000,	\/* (AFM)Rx - DA Filter$/;"	e	enum:dma_descriptor_status
desc_da_filter_fail	ipq806x/include/nss_gmac_dev.h	/^	desc_da_filter_fail = 0x40000000,	\/* (AFM)Rx - DA Filter$/;"	e	enum:dma_descriptor_status
desc_error	include/nss_gmac_dev.h	/^	desc_error = 0x00008000,		\/* (ES)Error summary bit$/;"	e	enum:dma_descriptor_status
desc_error	ipq806x/include/nss_gmac_dev.h	/^	desc_error = 0x00008000,		\/* (ES)Error summary bit$/;"	e	enum:dma_descriptor_status
desc_frame_length_mask	include/nss_gmac_dev.h	/^	desc_frame_length_mask = 0x3FFF0000,	\/* (FL)Receive descriptor$/;"	e	enum:dma_descriptor_status
desc_frame_length_mask	ipq806x/include/nss_gmac_dev.h	/^	desc_frame_length_mask = 0x3FFF0000,	\/* (FL)Receive descriptor$/;"	e	enum:dma_descriptor_status
desc_frame_length_shift	include/nss_gmac_dev.h	/^	desc_frame_length_shift = 16,$/;"	e	enum:dma_descriptor_status
desc_frame_length_shift	ipq806x/include/nss_gmac_dev.h	/^	desc_frame_length_shift = 16,$/;"	e	enum:dma_descriptor_status
desc_mode	include/nss_gmac_dev.h	/^enum desc_mode {$/;"	g
desc_mode	ipq806x/include/nss_gmac_dev.h	/^enum desc_mode {$/;"	g
desc_own_by_dma	include/nss_gmac_dev.h	/^	desc_own_by_dma = 0x80000000,		\/* (OWN)Descriptor is$/;"	e	enum:dma_descriptor_status
desc_own_by_dma	ipq806x/include/nss_gmac_dev.h	/^	desc_own_by_dma = 0x80000000,		\/* (OWN)Descriptor is$/;"	e	enum:dma_descriptor_status
desc_rx_chk_bit0	include/nss_gmac_dev.h	/^	desc_rx_chk_bit0 = 0x00000001,		\/* Rx Payload Checksum Error  *\/$/;"	e	enum:dma_descriptor_status
desc_rx_chk_bit0	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_chk_bit0 = 0x00000001,		\/* Rx Payload Checksum Error  *\/$/;"	e	enum:dma_descriptor_status
desc_rx_chk_bit5	include/nss_gmac_dev.h	/^	desc_rx_chk_bit5 = 0x00000020,		\/* (FT)Rx - Frame type - Ether,$/;"	e	enum:dma_descriptor_status
desc_rx_chk_bit5	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_chk_bit5 = 0x00000020,		\/* (FT)Rx - Frame type - Ether,$/;"	e	enum:dma_descriptor_status
desc_rx_chk_bit7	include/nss_gmac_dev.h	/^	desc_rx_chk_bit7 = 0x00000080,		\/* (IPC CS ERROR)Rx - Ipv4$/;"	e	enum:dma_descriptor_status
desc_rx_chk_bit7	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_chk_bit7 = 0x00000080,		\/* (IPC CS ERROR)Rx - Ipv4$/;"	e	enum:dma_descriptor_status
desc_rx_chk_sum_bypass	include/nss_gmac_dev.h	/^	desc_rx_chk_sum_bypass = 0x00000020,	\/* When set indicates checksum$/;"	e	enum:dma_descriptor_status
desc_rx_chk_sum_bypass	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_chk_sum_bypass = 0x00000020,	\/* When set indicates checksum$/;"	e	enum:dma_descriptor_status
desc_rx_collision	include/nss_gmac_dev.h	/^	desc_rx_collision = 0x00000040,		\/* (LC)Rx - late collision$/;"	e	enum:dma_descriptor_status
desc_rx_collision	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_collision = 0x00000040,		\/* (LC)Rx - late collision$/;"	e	enum:dma_descriptor_status
desc_rx_crc	include/nss_gmac_dev.h	/^	desc_rx_crc = 0x00000002,		\/* (CE)Rx - CRC error         *\/$/;"	e	enum:dma_descriptor_status
desc_rx_crc	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_crc = 0x00000002,		\/* (CE)Rx - CRC error         *\/$/;"	e	enum:dma_descriptor_status
desc_rx_damaged	include/nss_gmac_dev.h	/^	desc_rx_damaged = 0x00000800,		\/* (OE)Rx - frm was damaged due$/;"	e	enum:dma_descriptor_status
desc_rx_damaged	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_damaged = 0x00000800,		\/* (OE)Rx - frm was damaged due$/;"	e	enum:dma_descriptor_status
desc_rx_dribbling	include/nss_gmac_dev.h	/^	desc_rx_dribbling = 0x00000004,		\/* (DE)Rx - frame contains non$/;"	e	enum:dma_descriptor_status
desc_rx_dribbling	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_dribbling = 0x00000004,		\/* (DE)Rx - frame contains non$/;"	e	enum:dma_descriptor_status
desc_rx_ext_sts	include/nss_gmac_dev.h	/^	desc_rx_ext_sts = 0x00000001,		\/* Extended Status Available$/;"	e	enum:dma_descriptor_status
desc_rx_ext_sts	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ext_sts = 0x00000001,		\/* Extended Status Available$/;"	e	enum:dma_descriptor_status
desc_rx_first	include/nss_gmac_dev.h	/^	desc_rx_first = 0x00000200,		\/* (FS)Rx - first$/;"	e	enum:dma_descriptor_status
desc_rx_first	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_first = 0x00000200,		\/* (FS)Rx - first$/;"	e	enum:dma_descriptor_status
desc_rx_frame_ether	include/nss_gmac_dev.h	/^	desc_rx_frame_ether = 0x00000020,	\/* (FT)Rx - Frame type - Ether,$/;"	e	enum:dma_descriptor_status
desc_rx_frame_ether	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_frame_ether = 0x00000020,	\/* (FT)Rx - Frame type - Ether,$/;"	e	enum:dma_descriptor_status
desc_rx_frame_type	include/nss_gmac_dev.h	/^	desc_rx_frame_type = 0x00000020,	\/* (FT)Rx - Frame type - Ether,$/;"	e	enum:dma_descriptor_status
desc_rx_frame_type	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_frame_type = 0x00000020,	\/* (FT)Rx - Frame type - Ether,$/;"	e	enum:dma_descriptor_status
desc_rx_ip_header_error	include/nss_gmac_dev.h	/^	desc_rx_ip_header_error = 0x00000008,	\/* When set indicates 16bit IPV4$/;"	e	enum:dma_descriptor_status
desc_rx_ip_header_error	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_header_error = 0x00000008,	\/* When set indicates 16bit IPV4$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_error	include/nss_gmac_dev.h	/^	desc_rx_ip_payload_error = 0x00000010,	\/* When set indicates 16bit IP$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_error	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_payload_error = 0x00000010,	\/* When set indicates 16bit IP$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_icmp	include/nss_gmac_dev.h	/^	desc_rx_ip_payload_icmp = 0x00000003,	\/* ICMP                       *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_icmp	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_payload_icmp = 0x00000003,	\/* ICMP                       *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_tcp	include/nss_gmac_dev.h	/^	desc_rx_ip_payload_tcp = 0x00000002,	\/* TCP                        *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_tcp	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_payload_tcp = 0x00000002,	\/* TCP                        *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_type	include/nss_gmac_dev.h	/^	desc_rx_ip_payload_type = 0x00000007,	\/* Indicate the type of payload$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_type	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_payload_type = 0x00000007,	\/* Indicate the type of payload$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_udp	include/nss_gmac_dev.h	/^	desc_rx_ip_payload_udp = 0x00000001,	\/* UDP                        *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_udp	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_payload_udp = 0x00000001,	\/* UDP                        *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_unknown	include/nss_gmac_dev.h	/^	desc_rx_ip_payload_unknown = 0x00000000,\/* Unknown or didnot process$/;"	e	enum:dma_descriptor_status
desc_rx_ip_payload_unknown	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ip_payload_unknown = 0x00000000,\/* Unknown or didnot process$/;"	e	enum:dma_descriptor_status
desc_rx_last	include/nss_gmac_dev.h	/^	desc_rx_last = 0x00000100,		\/* (LS)Rx - last$/;"	e	enum:dma_descriptor_status
desc_rx_last	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_last = 0x00000100,		\/* (LS)Rx - last$/;"	e	enum:dma_descriptor_status
desc_rx_length_error	include/nss_gmac_dev.h	/^	desc_rx_length_error = 0x00001000,	\/* (LE)Rx - frm size not$/;"	e	enum:dma_descriptor_status
desc_rx_length_error	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_length_error = 0x00001000,	\/* (LE)Rx - frm size not$/;"	e	enum:dma_descriptor_status
desc_rx_long_frame	include/nss_gmac_dev.h	/^	desc_rx_long_frame = 0x00000080,	\/* (Giant Frame)Rx - frame is$/;"	e	enum:dma_descriptor_status
desc_rx_long_frame	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_long_frame = 0x00000080,	\/* (Giant Frame)Rx - frame is$/;"	e	enum:dma_descriptor_status
desc_rx_mii_error	include/nss_gmac_dev.h	/^	desc_rx_mii_error = 0x00000008,		\/* (RE)Rx - error reported$/;"	e	enum:dma_descriptor_status
desc_rx_mii_error	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_mii_error = 0x00000008,		\/* (RE)Rx - error reported$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_avail	include/nss_gmac_dev.h	/^	desc_rx_ptp_avail = 0x00004000,		\/* PTP snapshot available     *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_avail	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_avail = 0x00004000,		\/* PTP snapshot available     *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_delay_req	include/nss_gmac_dev.h	/^	desc_rx_ptp_delay_req = 0x00000300,	\/* 0011 => Delay_Req (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_delay_req	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_delay_req = 0x00000300,	\/* 0011 => Delay_Req (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_delay_resp	include/nss_gmac_dev.h	/^	desc_rx_ptp_delay_resp = 0x00000400,	\/* 0100 => Delay_Resp (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_delay_resp	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_delay_resp = 0x00000400,	\/* 0100 => Delay_Resp (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_follow_up	include/nss_gmac_dev.h	/^	desc_rx_ptp_follow_up = 0x00000200,	\/* 0010 => Follow_Up (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_follow_up	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_follow_up = 0x00000200,	\/* 0010 => Follow_Up (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_frame_type	include/nss_gmac_dev.h	/^	desc_rx_ptp_frame_type = 0x00001000,	\/* PTP frame type Indicates PTP$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_frame_type	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_frame_type = 0x00001000,	\/* PTP frame type Indicates PTP$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_ipv4	include/nss_gmac_dev.h	/^	desc_rx_ptp_ipv4 = 0x00000040,		\/* Received Packet is in IPV4 *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_ipv4	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_ipv4 = 0x00000040,		\/* Received Packet is in IPV4 *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_ipv6	include/nss_gmac_dev.h	/^	desc_rx_ptp_ipv6 = 0x00000080,		\/* Received Packet is in IPV6 *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_ipv6	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_ipv6 = 0x00000080,		\/* Received Packet is in IPV6 *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_message_type	include/nss_gmac_dev.h	/^	desc_rx_ptp_message_type = 0x00000F00,	\/* Message Type               *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_message_type	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_message_type = 0x00000F00,	\/* Message Type               *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_no	include/nss_gmac_dev.h	/^	desc_rx_ptp_no = 0x00000000,		\/* 0000 => No PTP message rcvd*\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_no	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_no = 0x00000000,		\/* 0000 => No PTP message rcvd*\/$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_pdelay_req	include/nss_gmac_dev.h	/^	desc_rx_ptp_pdelay_req = 0x00000500,	\/* 0101 => Pdelay_Req (in P$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_pdelay_req	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_pdelay_req = 0x00000500,	\/* 0101 => Pdelay_Req (in P$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_pdelay_resp	include/nss_gmac_dev.h	/^	desc_rx_ptp_pdelay_resp = 0x00000600,	\/* 0110 => Pdealy_Resp(in P to$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_pdelay_resp	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_pdelay_resp = 0x00000600,	\/* 0110 => Pdealy_Resp(in P to$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_pdelay_resp_fP	include/nss_gmac_dev.h	/^	desc_rx_ptp_pdelay_resp_fP = 0x00000700,\/* 0111 => Pdealy_Resp_Follow_Up$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_pdelay_resp_fP	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_pdelay_resp_fP = 0x00000700,\/* 0111 => Pdealy_Resp_Follow_Up$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_sync	include/nss_gmac_dev.h	/^	desc_rx_ptp_sync = 0x00000100,		\/* 0001 => Sync (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_sync	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_sync = 0x00000100,		\/* 0001 => Sync (all clock$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_ver	include/nss_gmac_dev.h	/^	desc_rx_ptp_ver = 0x00002000,		\/* When set indicates IEEE1584$/;"	e	enum:dma_descriptor_status
desc_rx_ptp_ver	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ptp_ver = 0x00002000,		\/* When set indicates IEEE1584$/;"	e	enum:dma_descriptor_status
desc_rx_truncated	include/nss_gmac_dev.h	/^	desc_rx_truncated = 0x00004000,		\/* (DE)Rx - no more descriptors$/;"	e	enum:dma_descriptor_status
desc_rx_truncated	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_truncated = 0x00004000,		\/* (DE)Rx - no more descriptors$/;"	e	enum:dma_descriptor_status
desc_rx_ts_avail	include/nss_gmac_dev.h	/^	desc_rx_ts_avail = 0x00000080,		\/* Time stamp available       *\/$/;"	e	enum:dma_descriptor_status
desc_rx_ts_avail	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_ts_avail = 0x00000080,		\/* Time stamp available       *\/$/;"	e	enum:dma_descriptor_status
desc_rx_vlan_tag	include/nss_gmac_dev.h	/^	desc_rx_vlan_tag = 0x00000400,		\/* (VLAN)Rx - received frame$/;"	e	enum:dma_descriptor_status
desc_rx_vlan_tag	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_vlan_tag = 0x00000400,		\/* (VLAN)Rx - received frame$/;"	e	enum:dma_descriptor_status
desc_rx_watchdog	include/nss_gmac_dev.h	/^	desc_rx_watchdog = 0x00000010,		\/* (RWT)Rx - watchdog timer$/;"	e	enum:dma_descriptor_status
desc_rx_watchdog	ipq806x/include/nss_gmac_dev.h	/^	desc_rx_watchdog = 0x00000010,		\/* (RWT)Rx - watchdog timer$/;"	e	enum:dma_descriptor_status
desc_sa_filter_fail	include/nss_gmac_dev.h	/^	desc_sa_filter_fail = 0x00002000,	\/* (SAF)Rx - SA Filter Fail for$/;"	e	enum:dma_descriptor_status
desc_sa_filter_fail	ipq806x/include/nss_gmac_dev.h	/^	desc_sa_filter_fail = 0x00002000,	\/* (SAF)Rx - SA Filter Fail for$/;"	e	enum:dma_descriptor_status
desc_size1_mask	include/nss_gmac_dev.h	/^	desc_size1_mask = 0x00001FFF,	\/* (TBS1) Buffer 1 size               *\/$/;"	e	enum:dma_descriptor_status
desc_size1_mask	ipq806x/include/nss_gmac_dev.h	/^	desc_size1_mask = 0x00001FFF,	\/* (TBS1) Buffer 1 size               *\/$/;"	e	enum:dma_descriptor_status
desc_size1_shift	include/nss_gmac_dev.h	/^	desc_size1_shift = 0,$/;"	e	enum:dma_descriptor_status
desc_size1_shift	ipq806x/include/nss_gmac_dev.h	/^	desc_size1_shift = 0,$/;"	e	enum:dma_descriptor_status
desc_size2_mask	include/nss_gmac_dev.h	/^	desc_size2_mask = 0x1FFF0000,	\/* (TBS2) Buffer 2 size               *\/$/;"	e	enum:dma_descriptor_status
desc_size2_mask	ipq806x/include/nss_gmac_dev.h	/^	desc_size2_mask = 0x1FFF0000,	\/* (TBS2) Buffer 2 size               *\/$/;"	e	enum:dma_descriptor_status
desc_size2_shift	include/nss_gmac_dev.h	/^	desc_size2_shift = 16,$/;"	e	enum:dma_descriptor_status
desc_size2_shift	ipq806x/include/nss_gmac_dev.h	/^	desc_size2_shift = 16,$/;"	e	enum:dma_descriptor_status
desc_tx_cis_bypass	include/nss_gmac_dev.h	/^	desc_tx_cis_bypass = 0x00000000,	\/* Checksum bypass            *\/$/;"	e	enum:dma_descriptor_status
desc_tx_cis_bypass	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_cis_bypass = 0x00000000,	\/* Checksum bypass            *\/$/;"	e	enum:dma_descriptor_status
desc_tx_cis_ipv4_hdr_cs	include/nss_gmac_dev.h	/^	desc_tx_cis_ipv4_hdr_cs = 0x00400000,	\/* IPv4 header checksum       *\/$/;"	e	enum:dma_descriptor_status
desc_tx_cis_ipv4_hdr_cs	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_cis_ipv4_hdr_cs = 0x00400000,	\/* IPv4 header checksum       *\/$/;"	e	enum:dma_descriptor_status
desc_tx_cis_mask	include/nss_gmac_dev.h	/^	desc_tx_cis_mask = 0x00c00000,		\/* Tx checksum offloading$/;"	e	enum:dma_descriptor_status
desc_tx_cis_mask	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_cis_mask = 0x00c00000,		\/* Tx checksum offloading$/;"	e	enum:dma_descriptor_status
desc_tx_cis_tcp_only_cs	include/nss_gmac_dev.h	/^	desc_tx_cis_tcp_only_cs = 0x00800000,	\/* TCP\/UDP\/ICMP checksum.$/;"	e	enum:dma_descriptor_status
desc_tx_cis_tcp_only_cs	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_cis_tcp_only_cs = 0x00800000,	\/* TCP\/UDP\/ICMP checksum.$/;"	e	enum:dma_descriptor_status
desc_tx_cis_tcp_pseudo_cs	include/nss_gmac_dev.h	/^	desc_tx_cis_tcp_pseudo_cs = 0x00c00000,	\/* TCP\/UDP\/ICMP checksum fully$/;"	e	enum:dma_descriptor_status
desc_tx_cis_tcp_pseudo_cs	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_cis_tcp_pseudo_cs = 0x00c00000,	\/* TCP\/UDP\/ICMP checksum fully$/;"	e	enum:dma_descriptor_status
desc_tx_coll_mask	include/nss_gmac_dev.h	/^	desc_tx_coll_mask = 0x00000078,		\/* (CC)Tx - Collision count   *\/$/;"	e	enum:dma_descriptor_status
desc_tx_coll_mask	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_coll_mask = 0x00000078,		\/* (CC)Tx - Collision count   *\/$/;"	e	enum:dma_descriptor_status
desc_tx_coll_shift	include/nss_gmac_dev.h	/^	desc_tx_coll_shift = 3,$/;"	e	enum:dma_descriptor_status
desc_tx_coll_shift	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_coll_shift = 3,$/;"	e	enum:dma_descriptor_status
desc_tx_deferred	include/nss_gmac_dev.h	/^	desc_tx_deferred = 0x00000001,		\/* (DB)Tx - frame$/;"	e	enum:dma_descriptor_status
desc_tx_deferred	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_deferred = 0x00000001,		\/* (DB)Tx - frame$/;"	e	enum:dma_descriptor_status
desc_tx_disable_crc	include/nss_gmac_dev.h	/^	desc_tx_disable_crc = 0x08000000,	\/* (DC)Tx - Add CRC disabled$/;"	e	enum:dma_descriptor_status
desc_tx_disable_crc	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_disable_crc = 0x08000000,	\/* (DC)Tx - Add CRC disabled$/;"	e	enum:dma_descriptor_status
desc_tx_disable_padd	include/nss_gmac_dev.h	/^	desc_tx_disable_padd = 0x04000000,	\/* (DP)disable padding,$/;"	e	enum:dma_descriptor_status
desc_tx_disable_padd	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_disable_padd = 0x04000000,	\/* (DP)disable padding,$/;"	e	enum:dma_descriptor_status
desc_tx_exc_collisions	include/nss_gmac_dev.h	/^	desc_tx_exc_collisions = 0x00000100,	\/* (EC)Tx - transmission aborted$/;"	e	enum:dma_descriptor_status
desc_tx_exc_collisions	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_exc_collisions = 0x00000100,	\/* (EC)Tx - transmission aborted$/;"	e	enum:dma_descriptor_status
desc_tx_exc_deferral	include/nss_gmac_dev.h	/^	desc_tx_exc_deferral = 0x00000004,	\/* (ED)Tx - excessive deferral*\/$/;"	e	enum:dma_descriptor_status
desc_tx_exc_deferral	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_exc_deferral = 0x00000004,	\/* (ED)Tx - excessive deferral*\/$/;"	e	enum:dma_descriptor_status
desc_tx_first	include/nss_gmac_dev.h	/^	desc_tx_first = 0x10000000,		\/* (FS)Tx - First segment of the$/;"	e	enum:dma_descriptor_status
desc_tx_first	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_first = 0x10000000,		\/* (FS)Tx - First segment of the$/;"	e	enum:dma_descriptor_status
desc_tx_frame_flushed	include/nss_gmac_dev.h	/^	desc_tx_frame_flushed = 0x00002000,	\/* (FF)Tx - DMA\/MTL flushed$/;"	e	enum:dma_descriptor_status
desc_tx_frame_flushed	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_frame_flushed = 0x00002000,	\/* (FF)Tx - DMA\/MTL flushed$/;"	e	enum:dma_descriptor_status
desc_tx_int_enable	include/nss_gmac_dev.h	/^	desc_tx_int_enable = 0x40000000,	\/* (IC)Tx - interrupt on$/;"	e	enum:dma_descriptor_status
desc_tx_int_enable	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_int_enable = 0x40000000,	\/* (IC)Tx - interrupt on$/;"	e	enum:dma_descriptor_status
desc_tx_ipv4_chk_error	include/nss_gmac_dev.h	/^	desc_tx_ipv4_chk_error = 0x00010000,	\/* (IHE) Tx Ip header error   *\/$/;"	e	enum:dma_descriptor_status
desc_tx_ipv4_chk_error	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_ipv4_chk_error = 0x00010000,	\/* (IHE) Tx Ip header error   *\/$/;"	e	enum:dma_descriptor_status
desc_tx_last	include/nss_gmac_dev.h	/^	desc_tx_last = 0x20000000,		\/* (LS)Tx - Last segment of the$/;"	e	enum:dma_descriptor_status
desc_tx_last	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_last = 0x20000000,		\/* (LS)Tx - Last segment of the$/;"	e	enum:dma_descriptor_status
desc_tx_late_collision	include/nss_gmac_dev.h	/^	desc_tx_late_collision = 0x00000200,	\/* (LC)Tx - transmission aborted$/;"	e	enum:dma_descriptor_status
desc_tx_late_collision	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_late_collision = 0x00000200,	\/* (LC)Tx - transmission aborted$/;"	e	enum:dma_descriptor_status
desc_tx_lost_carrier	include/nss_gmac_dev.h	/^	desc_tx_lost_carrier = 0x00000800,	\/* (LC)Tx - carrier lost$/;"	e	enum:dma_descriptor_status
desc_tx_lost_carrier	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_lost_carrier = 0x00000800,	\/* (LC)Tx - carrier lost$/;"	e	enum:dma_descriptor_status
desc_tx_no_carrier	include/nss_gmac_dev.h	/^	desc_tx_no_carrier = 0x00000400,	\/* (NC)Tx - no carrier signal$/;"	e	enum:dma_descriptor_status
desc_tx_no_carrier	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_no_carrier = 0x00000400,	\/* (NC)Tx - no carrier signal$/;"	e	enum:dma_descriptor_status
desc_tx_pay_chk_error	include/nss_gmac_dev.h	/^	desc_tx_pay_chk_error = 0x00001000,	\/* (PCE) Tx Payload checksum$/;"	e	enum:dma_descriptor_status
desc_tx_pay_chk_error	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_pay_chk_error = 0x00001000,	\/* (PCE) Tx Payload checksum$/;"	e	enum:dma_descriptor_status
desc_tx_timeout	include/nss_gmac_dev.h	/^	desc_tx_timeout = 0x00004000,		\/* (JT)Tx - Transmit$/;"	e	enum:dma_descriptor_status
desc_tx_timeout	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_timeout = 0x00004000,		\/* (JT)Tx - Transmit$/;"	e	enum:dma_descriptor_status
desc_tx_underflow	include/nss_gmac_dev.h	/^	desc_tx_underflow = 0x00000002,		\/* (UF)Tx - late data arrival$/;"	e	enum:dma_descriptor_status
desc_tx_underflow	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_underflow = 0x00000002,		\/* (UF)Tx - late data arrival$/;"	e	enum:dma_descriptor_status
desc_tx_vlan_frame	include/nss_gmac_dev.h	/^	desc_tx_vlan_frame = 0x00000080,	\/* (VF)Tx - VLAN-type frame   *\/$/;"	e	enum:dma_descriptor_status
desc_tx_vlan_frame	ipq806x/include/nss_gmac_dev.h	/^	desc_tx_vlan_frame = 0x00000080,	\/* (VF)Tx - VLAN-type frame   *\/$/;"	e	enum:dma_descriptor_status
dev_stats	ipq806x/include/ipv6_pssthrgh.h	/^        struct net_device_stats dev_stats;$/;"	m	struct:dni_enet_info	typeref:struct:dni_enet_info::net_device_stats
dma_address_aligned_beats	include/nss_gmac_dev.h	/^	dma_address_aligned_beats = 0x02000000,	\/* Address Aligned beats      *\/$/;"	e	enum:dma_bus_mode_reg
dma_address_aligned_beats	ipq806x/include/nss_gmac_dev.h	/^	dma_address_aligned_beats = 0x02000000,	\/* Address Aligned beats      *\/$/;"	e	enum:dma_bus_mode_reg
dma_arbit_pr	include/nss_gmac_dev.h	/^	dma_arbit_pr = 0x00000002,		\/* Rx has priority over Tx    *\/$/;"	e	enum:dma_bus_mode_reg
dma_arbit_pr	ipq806x/include/nss_gmac_dev.h	/^	dma_arbit_pr = 0x00000002,		\/* Rx has priority over Tx    *\/$/;"	e	enum:dma_bus_mode_reg
dma_arbit_rr	include/nss_gmac_dev.h	/^	dma_arbit_rr = 0x00000000,		\/* (DA) DMA RR arbitration    *\/$/;"	e	enum:dma_bus_mode_reg
dma_arbit_rr	ipq806x/include/nss_gmac_dev.h	/^	dma_arbit_rr = 0x00000000,		\/* (DA) DMA RR arbitration    *\/$/;"	e	enum:dma_bus_mode_reg
dma_axi_aal	include/nss_gmac_dev.h	/^	dma_axi_aal = 0x00001000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_aal	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_aal = 0x00001000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen128	include/nss_gmac_dev.h	/^	dma_axi_blen128 = 0x00000040,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen128	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen128 = 0x00000040,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen16	include/nss_gmac_dev.h	/^	dma_axi_blen16 = 0x00000008,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen16	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen16 = 0x00000008,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen256	include/nss_gmac_dev.h	/^	dma_axi_blen256 = 0x00000080,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen256	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen256 = 0x00000080,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen32	include/nss_gmac_dev.h	/^	dma_axi_blen32 = 0x00000010,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen32	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen32 = 0x00000010,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen4	include/nss_gmac_dev.h	/^	dma_axi_blen4 = 0x00000002,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen4	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen4 = 0x00000002,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen64	include/nss_gmac_dev.h	/^	dma_axi_blen64 = 0x00000020,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen64	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen64 = 0x00000020,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen8	include/nss_gmac_dev.h	/^	dma_axi_blen8 = 0x00000004,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_blen8	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_blen8 = 0x00000004,$/;"	e	enum:dma_axi_bus_mode_reg
dma_axi_bus_mode	include/nss_gmac_dev.h	/^	dma_axi_bus_mode = 0x0028,	\/* AXI Bus Mode Settings	      *\/$/;"	e	enum:dma_registers
dma_axi_bus_mode	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_bus_mode = 0x0028,	\/* AXI Bus Mode Settings	      *\/$/;"	e	enum:dma_registers
dma_axi_bus_mode_reg	include/nss_gmac_dev.h	/^enum dma_axi_bus_mode_reg {$/;"	g
dma_axi_bus_mode_reg	ipq806x/include/nss_gmac_dev.h	/^enum dma_axi_bus_mode_reg {$/;"	g
dma_axi_bus_mode_val	include/nss_gmac_dev.h	/^	dma_axi_bus_mode_val = dma_axi_blen16 | dma_rd_osr_num_reqs8 |$/;"	e	enum:initial_registers
dma_axi_bus_mode_val	ipq806x/include/nss_gmac_dev.h	/^	dma_axi_bus_mode_val = dma_axi_blen16 | dma_rd_osr_num_reqs8 |$/;"	e	enum:initial_registers
dma_base	include/nss_gmac_dev.h	/^	uint32_t dma_base;	\/* base address of DMA registers              *\/$/;"	m	struct:nss_gmac_dev
dma_base	ipq806x/include/nss_gmac_dev.h	/^	uint32_t dma_base;	\/* base address of DMA registers              *\/$/;"	m	struct:nss_gmac_dev
dma_burst_length0	include/nss_gmac_dev.h	/^	dma_burst_length0 = 0x00000000,		\/* Dma burst length = 0       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length0	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length0 = 0x00000000,		\/* Dma burst length = 0       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length1	include/nss_gmac_dev.h	/^	dma_burst_length1 = 0x00000100,		\/* Dma burst length = 1       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length1	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length1 = 0x00000100,		\/* Dma burst length = 1       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length128	include/nss_gmac_dev.h	/^	dma_burst_length128 = 0x01001000,	\/*(dma_burst_lengthx8$/;"	e	enum:dma_bus_mode_reg
dma_burst_length128	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length128 = 0x01001000,	\/*(dma_burst_lengthx8$/;"	e	enum:dma_bus_mode_reg
dma_burst_length16	include/nss_gmac_dev.h	/^	dma_burst_length16 = 0x00001000,	\/* Dma burst length = 16      *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length16	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length16 = 0x00001000,	\/* Dma burst length = 16      *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length2	include/nss_gmac_dev.h	/^	dma_burst_length2 = 0x00000200,		\/* Dma burst length = 2       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length2	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length2 = 0x00000200,		\/* Dma burst length = 2       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length256	include/nss_gmac_dev.h	/^	dma_burst_length256 = 0x01002000,	\/*(dma_burst_lengthx8$/;"	e	enum:dma_bus_mode_reg
dma_burst_length256	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length256 = 0x01002000,	\/*(dma_burst_lengthx8$/;"	e	enum:dma_bus_mode_reg
dma_burst_length32	include/nss_gmac_dev.h	/^	dma_burst_length32 = 0x00002000,	\/* (PBL) programmable$/;"	e	enum:dma_bus_mode_reg
dma_burst_length32	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length32 = 0x00002000,	\/* (PBL) programmable$/;"	e	enum:dma_bus_mode_reg
dma_burst_length4	include/nss_gmac_dev.h	/^	dma_burst_length4 = 0x00000400,		\/* Dma burst length = 4       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length4	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length4 = 0x00000400,		\/* Dma burst length = 4       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length64	include/nss_gmac_dev.h	/^	dma_burst_length64 = 0x01000800,	\/*(dma_burst_lengthx8$/;"	e	enum:dma_bus_mode_reg
dma_burst_length64	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length64 = 0x01000800,	\/*(dma_burst_lengthx8$/;"	e	enum:dma_bus_mode_reg
dma_burst_length8	include/nss_gmac_dev.h	/^	dma_burst_length8 = 0x00000800,		\/* Dma burst length = 8       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_length8	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_length8 = 0x00000800,		\/* Dma burst length = 8       *\/$/;"	e	enum:dma_bus_mode_reg
dma_burst_lengthx8	include/nss_gmac_dev.h	/^	dma_burst_lengthx8 = 0x01000000,	\/* When set mutiplies the PBL by$/;"	e	enum:dma_bus_mode_reg
dma_burst_lengthx8	ipq806x/include/nss_gmac_dev.h	/^	dma_burst_lengthx8 = 0x01000000,	\/* When set mutiplies the PBL by$/;"	e	enum:dma_bus_mode_reg
dma_bus_mode	include/nss_gmac_dev.h	/^	dma_bus_mode = 0x0000,		\/* CSR0 - Bus Mode Register	      *\/$/;"	e	enum:dma_registers
dma_bus_mode	ipq806x/include/nss_gmac_dev.h	/^	dma_bus_mode = 0x0000,		\/* CSR0 - Bus Mode Register	      *\/$/;"	e	enum:dma_registers
dma_bus_mode_init	include/nss_gmac_dev.h	/^	dma_bus_mode_init = dma_fixed_burst_enable | dma_burst_length8$/;"	e	enum:initial_registers
dma_bus_mode_init	ipq806x/include/nss_gmac_dev.h	/^	dma_bus_mode_init = dma_fixed_burst_enable | dma_burst_length8$/;"	e	enum:initial_registers
dma_bus_mode_reg	include/nss_gmac_dev.h	/^enum dma_bus_mode_reg {$/;"	g
dma_bus_mode_reg	ipq806x/include/nss_gmac_dev.h	/^enum dma_bus_mode_reg {$/;"	g
dma_bus_mode_val	include/nss_gmac_dev.h	/^	dma_bus_mode_val = dma_burst_length32$/;"	e	enum:initial_registers
dma_bus_mode_val	ipq806x/include/nss_gmac_dev.h	/^	dma_bus_mode_val = dma_burst_length32$/;"	e	enum:initial_registers
dma_control	include/nss_gmac_dev.h	/^	dma_control = 0x0018,		\/* CSR6 - Dma Operation Mode Register *\/$/;"	e	enum:dma_registers
dma_control	ipq806x/include/nss_gmac_dev.h	/^	dma_control = 0x0018,		\/* CSR6 - Dma Operation Mode Register *\/$/;"	e	enum:dma_registers
dma_control_init10	include/nss_gmac_dev.h	/^	dma_control_init10 = dma_store_and_forward,$/;"	e	enum:initial_registers
dma_control_init10	ipq806x/include/nss_gmac_dev.h	/^	dma_control_init10 = dma_store_and_forward,$/;"	e	enum:initial_registers
dma_control_init100	include/nss_gmac_dev.h	/^	dma_control_init100 = dma_store_and_forward,$/;"	e	enum:initial_registers
dma_control_init100	ipq806x/include/nss_gmac_dev.h	/^	dma_control_init100 = dma_store_and_forward,$/;"	e	enum:initial_registers
dma_control_init1000	include/nss_gmac_dev.h	/^	dma_control_init1000 = dma_store_and_forward,$/;"	e	enum:initial_registers
dma_control_init1000	ipq806x/include/nss_gmac_dev.h	/^	dma_control_init1000 = dma_store_and_forward,$/;"	e	enum:initial_registers
dma_control_reg	include/nss_gmac_dev.h	/^enum dma_control_reg {$/;"	g
dma_control_reg	ipq806x/include/nss_gmac_dev.h	/^enum dma_control_reg {$/;"	g
dma_desc	include/nss_gmac_dev.h	/^struct dma_desc {$/;"	s
dma_desc	ipq806x/include/nss_gmac_dev.h	/^struct dma_desc {$/;"	s
dma_descriptor4_words	include/nss_gmac_dev.h	/^	dma_descriptor4_words = 0x00000000,	\/* Enh Descriptor works  0=>$/;"	e	enum:dma_bus_mode_reg
dma_descriptor4_words	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor4_words = 0x00000000,	\/* Enh Descriptor works  0=>$/;"	e	enum:dma_bus_mode_reg
dma_descriptor8_words	include/nss_gmac_dev.h	/^	dma_descriptor8_words = 0x00000080,	\/* Enh Descriptor works  1=>$/;"	e	enum:dma_bus_mode_reg
dma_descriptor8_words	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor8_words = 0x00000080,	\/* Enh Descriptor works  1=>$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip0	include/nss_gmac_dev.h	/^	dma_descriptor_skip0 = 0x00000000,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip0	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor_skip0 = 0x00000000,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip1	include/nss_gmac_dev.h	/^	dma_descriptor_skip1 = 0x00000004,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip1	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor_skip1 = 0x00000004,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip16	include/nss_gmac_dev.h	/^	dma_descriptor_skip16 = 0x00000040,	\/* (DSL)Descriptor skip$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip16	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor_skip16 = 0x00000040,	\/* (DSL)Descriptor skip$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip2	include/nss_gmac_dev.h	/^	dma_descriptor_skip2 = 0x00000008,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip2	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor_skip2 = 0x00000008,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip4	include/nss_gmac_dev.h	/^	dma_descriptor_skip4 = 0x00000010,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip4	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor_skip4 = 0x00000010,$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip8	include/nss_gmac_dev.h	/^	dma_descriptor_skip8 = 0x00000020,	\/* between two unchained$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_skip8	ipq806x/include/nss_gmac_dev.h	/^	dma_descriptor_skip8 = 0x00000020,	\/* between two unchained$/;"	e	enum:dma_bus_mode_reg
dma_descriptor_status	include/nss_gmac_dev.h	/^enum dma_descriptor_status {$/;"	g
dma_descriptor_status	ipq806x/include/nss_gmac_dev.h	/^enum dma_descriptor_status {$/;"	g
dma_dis_hw_flow_ctrl	include/nss_gmac_dev.h	/^	dma_dis_hw_flow_ctrl = 0x00000000,	\/* Disable HW flow control    *\/$/;"	e	enum:dma_control_reg
dma_dis_hw_flow_ctrl	ipq806x/include/nss_gmac_dev.h	/^	dma_dis_hw_flow_ctrl = 0x00000000,	\/* Disable HW flow control    *\/$/;"	e	enum:dma_control_reg
dma_disable_drop_tcp_cs	include/nss_gmac_dev.h	/^	dma_disable_drop_tcp_cs = 0x04000000,	\/* (DT) Dis. drop. of tcp\/ip$/;"	e	enum:dma_control_reg
dma_disable_drop_tcp_cs	ipq806x/include/nss_gmac_dev.h	/^	dma_disable_drop_tcp_cs = 0x04000000,	\/* (DT) Dis. drop. of tcp\/ip$/;"	e	enum:dma_control_reg
dma_en_hw_flow_ctrl	include/nss_gmac_dev.h	/^	dma_en_hw_flow_ctrl = 0x00000100,	\/* (EFC)Enable HW flow control*\/$/;"	e	enum:dma_control_reg
dma_en_hw_flow_ctrl	ipq806x/include/nss_gmac_dev.h	/^	dma_en_hw_flow_ctrl = 0x00000100,	\/* (EFC)Enable HW flow control*\/$/;"	e	enum:dma_control_reg
dma_en_lpi	include/nss_gmac_dev.h	/^	dma_en_lpi = 0x80000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_en_lpi	ipq806x/include/nss_gmac_dev.h	/^	dma_en_lpi = 0x80000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_error_bit0	include/nss_gmac_dev.h	/^	dma_error_bit0 = 0x00800000,	\/* (EB)Error bits 0-Rx DMA, 1-Tx DMA  *\/$/;"	e	enum:dma_status_reg
dma_error_bit0	ipq806x/include/nss_gmac_dev.h	/^	dma_error_bit0 = 0x00800000,	\/* (EB)Error bits 0-Rx DMA, 1-Tx DMA  *\/$/;"	e	enum:dma_status_reg
dma_error_bit1	include/nss_gmac_dev.h	/^	dma_error_bit1 = 0x01000000,	\/* (EB)Error bits 0-write trnsf,$/;"	e	enum:dma_status_reg
dma_error_bit1	ipq806x/include/nss_gmac_dev.h	/^	dma_error_bit1 = 0x01000000,	\/* (EB)Error bits 0-write trnsf,$/;"	e	enum:dma_status_reg
dma_error_bit2	include/nss_gmac_dev.h	/^	dma_error_bit2 = 0x02000000,	\/* (EB)Error bits 0-data buffer,$/;"	e	enum:dma_status_reg
dma_error_bit2	ipq806x/include/nss_gmac_dev.h	/^	dma_error_bit2 = 0x02000000,	\/* (EB)Error bits 0-data buffer,$/;"	e	enum:dma_status_reg
dma_fixed_burst_disable	include/nss_gmac_dev.h	/^	dma_fixed_burst_disable = 0x00000000,	\/* SINGLE, INCR               *\/$/;"	e	enum:dma_bus_mode_reg
dma_fixed_burst_disable	ipq806x/include/nss_gmac_dev.h	/^	dma_fixed_burst_disable = 0x00000000,	\/* SINGLE, INCR               *\/$/;"	e	enum:dma_bus_mode_reg
dma_fixed_burst_enable	include/nss_gmac_dev.h	/^	dma_fixed_burst_enable = 0x00010000,	\/* (FB)Fixed Burst SINGLE, INCR4$/;"	e	enum:dma_bus_mode_reg
dma_fixed_burst_enable	ipq806x/include/nss_gmac_dev.h	/^	dma_fixed_burst_enable = 0x00010000,	\/* (FB)Fixed Burst SINGLE, INCR4$/;"	e	enum:dma_bus_mode_reg
dma_flush_tx_fifo	include/nss_gmac_dev.h	/^	dma_flush_tx_fifo = 0x00100000,		\/* (FTF)Tx FIFO controller$/;"	e	enum:dma_control_reg
dma_flush_tx_fifo	ipq806x/include/nss_gmac_dev.h	/^	dma_flush_tx_fifo = 0x00100000,		\/* (FTF)Tx FIFO controller$/;"	e	enum:dma_control_reg
dma_fwd_error_frames	include/nss_gmac_dev.h	/^	dma_fwd_error_frames = 0x00000080,	\/* (FEF)Forward error frames  *\/$/;"	e	enum:dma_control_reg
dma_fwd_error_frames	ipq806x/include/nss_gmac_dev.h	/^	dma_fwd_error_frames = 0x00000080,	\/* (FEF)Forward error frames  *\/$/;"	e	enum:dma_control_reg
dma_fwd_under_sz_frames	include/nss_gmac_dev.h	/^	dma_fwd_under_sz_frames = 0x00000040,	\/* (FUF)Forward undersize$/;"	e	enum:dma_control_reg
dma_fwd_under_sz_frames	ipq806x/include/nss_gmac_dev.h	/^	dma_fwd_under_sz_frames = 0x00000040,	\/* (FUF)Forward undersize$/;"	e	enum:dma_control_reg
dma_ie_abnormal	include/nss_gmac_dev.h	/^	dma_ie_abnormal = dma_int_abnormal,	\/* Abnormal interrupt enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_abnormal	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_abnormal = dma_int_abnormal,	\/* Abnormal interrupt enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_bus_error	include/nss_gmac_dev.h	/^	dma_ie_bus_error = dma_int_bus_error,	\/* Fatal bus error enable     *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_bus_error	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_bus_error = dma_int_bus_error,	\/* Fatal bus error enable     *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_early_rx	include/nss_gmac_dev.h	/^	dma_ie_early_rx = dma_int_early_rx,	\/* Early RX interrupt enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_early_rx	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_early_rx = dma_int_early_rx,	\/* Early RX interrupt enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_early_tx	include/nss_gmac_dev.h	/^	dma_ie_early_tx = dma_int_early_tx,	\/* Early TX interrupt enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_early_tx	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_early_tx = dma_int_early_tx,	\/* Early TX interrupt enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_normal	include/nss_gmac_dev.h	/^	dma_ie_normal = dma_int_normal,		\/* Normal interrupt enable    *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_normal	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_normal = dma_int_normal,		\/* Normal interrupt enable    *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_completed	include/nss_gmac_dev.h	/^	dma_ie_rx_completed = dma_int_rx_completed,	\/* Completion of frame$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_completed	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_rx_completed = dma_int_rx_completed,	\/* Completion of frame$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_no_buffer	include/nss_gmac_dev.h	/^	dma_ie_rx_no_buffer = dma_int_rx_no_buffer,	\/* Receive buffer$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_no_buffer	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_rx_no_buffer = dma_int_rx_no_buffer,	\/* Receive buffer$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_overflow	include/nss_gmac_dev.h	/^	dma_ie_rx_overflow = dma_int_rcv_overflow,	\/* RX Buffer overflow$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_overflow	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_rx_overflow = dma_int_rcv_overflow,	\/* RX Buffer overflow$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_stopped	include/nss_gmac_dev.h	/^	dma_ie_rx_stopped = dma_int_rx_stopped,	\/* RX process stopped enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_stopped	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_rx_stopped = dma_int_rx_stopped,	\/* RX process stopped enable  *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_wdog_to	include/nss_gmac_dev.h	/^	dma_ie_rx_wdog_to = dma_int_rx_wdog_to,	\/* RX Watchdog Timeout enable *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_rx_wdog_to	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_rx_wdog_to = dma_int_rx_wdog_to,	\/* RX Watchdog Timeout enable *\/$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_completed	include/nss_gmac_dev.h	/^	dma_ie_tx_completed = dma_int_tx_completed,	\/* TX completed enable*\/$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_completed	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_tx_completed = dma_int_tx_completed,	\/* TX completed enable*\/$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_jabber_to	include/nss_gmac_dev.h	/^	dma_ie_tx_jabber_to = dma_int_tx_jabber_to,	\/* TX Jabber Timeout$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_jabber_to	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_tx_jabber_to = dma_int_tx_jabber_to,	\/* TX Jabber Timeout$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_no_buffer	include/nss_gmac_dev.h	/^	dma_ie_tx_no_buffer = dma_int_tx_no_buffer,	\/* TX buffer unavailable$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_no_buffer	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_tx_no_buffer = dma_int_tx_no_buffer,	\/* TX buffer unavailable$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_stopped	include/nss_gmac_dev.h	/^	dma_ie_tx_stopped = dma_int_tx_stopped,		\/* TX process stopped$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_stopped	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_tx_stopped = dma_int_tx_stopped,		\/* TX process stopped$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_underflow	include/nss_gmac_dev.h	/^	dma_ie_tx_underflow = dma_int_tx_underflow,	\/* TX underflow enable*\/$/;"	e	enum:dma_interrupt_reg
dma_ie_tx_underflow	ipq806x/include/nss_gmac_dev.h	/^	dma_ie_tx_underflow = dma_int_tx_underflow,	\/* TX underflow enable*\/$/;"	e	enum:dma_interrupt_reg
dma_int_abnormal	include/nss_gmac_dev.h	/^	dma_int_abnormal = 0x00008000,	\/* (AIS)Abnormal interrupt summary    *\/$/;"	e	enum:dma_status_reg
dma_int_abnormal	ipq806x/include/nss_gmac_dev.h	/^	dma_int_abnormal = 0x00008000,	\/* (AIS)Abnormal interrupt summary    *\/$/;"	e	enum:dma_status_reg
dma_int_bus_error	include/nss_gmac_dev.h	/^	dma_int_bus_error = 0x00002000,	\/* Fatal bus error (Abnormal)         *\/$/;"	e	enum:dma_status_reg
dma_int_bus_error	ipq806x/include/nss_gmac_dev.h	/^	dma_int_bus_error = 0x00002000,	\/* Fatal bus error (Abnormal)         *\/$/;"	e	enum:dma_status_reg
dma_int_disable	include/nss_gmac_dev.h	/^	dma_int_disable = 0,$/;"	e	enum:initial_registers
dma_int_disable	ipq806x/include/nss_gmac_dev.h	/^	dma_int_disable = 0,$/;"	e	enum:initial_registers
dma_int_early_rx	include/nss_gmac_dev.h	/^	dma_int_early_rx = 0x00004000,	\/* Early receive interrupt (Normal)   *\/$/;"	e	enum:dma_status_reg
dma_int_early_rx	ipq806x/include/nss_gmac_dev.h	/^	dma_int_early_rx = 0x00004000,	\/* Early receive interrupt (Normal)   *\/$/;"	e	enum:dma_status_reg
dma_int_early_tx	include/nss_gmac_dev.h	/^	dma_int_early_tx = 0x00000400,	\/* Early transmit interrupt (Abnormal)*\/$/;"	e	enum:dma_status_reg
dma_int_early_tx	ipq806x/include/nss_gmac_dev.h	/^	dma_int_early_tx = 0x00000400,	\/* Early transmit interrupt (Abnormal)*\/$/;"	e	enum:dma_status_reg
dma_int_enable	include/nss_gmac_dev.h	/^	dma_int_enable = dma_ie_normal | dma_ie_abnormal | dma_int_error_mask$/;"	e	enum:initial_registers
dma_int_enable	ipq806x/include/nss_gmac_dev.h	/^	dma_int_enable = dma_ie_normal | dma_ie_abnormal | dma_int_error_mask$/;"	e	enum:initial_registers
dma_int_enable	ipq806x/nss_gmac_tx_rx_offload.c	42;"	d	file:
dma_int_error_mask	include/nss_gmac_dev.h	/^	dma_int_error_mask = dma_int_bus_error,		\/* Error              *\/$/;"	e	enum:initial_registers
dma_int_error_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_error_mask = dma_int_bus_error,		\/* Error              *\/$/;"	e	enum:initial_registers
dma_int_normal	include/nss_gmac_dev.h	/^	dma_int_normal = 0x00010000,	\/* (NIS)Normal interrupt summary      *\/$/;"	e	enum:dma_status_reg
dma_int_normal	ipq806x/include/nss_gmac_dev.h	/^	dma_int_normal = 0x00010000,	\/* (NIS)Normal interrupt summary      *\/$/;"	e	enum:dma_status_reg
dma_int_rcv_overflow	include/nss_gmac_dev.h	/^	dma_int_rcv_overflow = 0x00000010,\/* RX Buffer overflow interrupt     *\/$/;"	e	enum:dma_status_reg
dma_int_rcv_overflow	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rcv_overflow = 0x00000010,\/* RX Buffer overflow interrupt     *\/$/;"	e	enum:dma_status_reg
dma_int_rx_abn_mask	include/nss_gmac_dev.h	/^	dma_int_rx_abn_mask = dma_int_rx_no_buffer,	\/* RX abnormal intr   *\/$/;"	e	enum:initial_registers
dma_int_rx_abn_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_abn_mask = dma_int_rx_no_buffer,	\/* RX abnormal intr   *\/$/;"	e	enum:initial_registers
dma_int_rx_completed	include/nss_gmac_dev.h	/^	dma_int_rx_completed = 0x00000040,\/* Completion of frame RX (Normal)  *\/$/;"	e	enum:dma_status_reg
dma_int_rx_completed	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_completed = 0x00000040,\/* Completion of frame RX (Normal)  *\/$/;"	e	enum:dma_status_reg
dma_int_rx_no_buffer	include/nss_gmac_dev.h	/^	dma_int_rx_no_buffer = 0x00000080,\/* RX buffer unavailable (Abnormal) *\/$/;"	e	enum:dma_status_reg
dma_int_rx_no_buffer	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_no_buffer = 0x00000080,\/* RX buffer unavailable (Abnormal) *\/$/;"	e	enum:dma_status_reg
dma_int_rx_norm_mask	include/nss_gmac_dev.h	/^	dma_int_rx_norm_mask = dma_int_rx_completed,	\/* RXnormal intr      *\/$/;"	e	enum:initial_registers
dma_int_rx_norm_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_norm_mask = dma_int_rx_completed,	\/* RXnormal intr      *\/$/;"	e	enum:initial_registers
dma_int_rx_stopped	include/nss_gmac_dev.h	/^	dma_int_rx_stopped = 0x00000100,\/* Receive process stopped (Abnormal) *\/$/;"	e	enum:dma_status_reg
dma_int_rx_stopped	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_stopped = 0x00000100,\/* Receive process stopped (Abnormal) *\/$/;"	e	enum:dma_status_reg
dma_int_rx_stopped_mask	include/nss_gmac_dev.h	/^	dma_int_rx_stopped_mask = dma_int_rx_stopped,	\/* RXstopped          *\/$/;"	e	enum:initial_registers
dma_int_rx_stopped_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_stopped_mask = dma_int_rx_stopped,	\/* RXstopped          *\/$/;"	e	enum:initial_registers
dma_int_rx_wdog_to	include/nss_gmac_dev.h	/^	dma_int_rx_wdog_to = 0x00000200,\/* Receive Watchdog Timeout (Abnormal)*\/$/;"	e	enum:dma_status_reg
dma_int_rx_wdog_to	ipq806x/include/nss_gmac_dev.h	/^	dma_int_rx_wdog_to = 0x00000200,\/* Receive Watchdog Timeout (Abnormal)*\/$/;"	e	enum:dma_status_reg
dma_int_tx_abn_mask	include/nss_gmac_dev.h	/^	dma_int_tx_abn_mask = dma_int_tx_underflow,	\/* TX abnormal intr   *\/$/;"	e	enum:initial_registers
dma_int_tx_abn_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_abn_mask = dma_int_tx_underflow,	\/* TX abnormal intr   *\/$/;"	e	enum:initial_registers
dma_int_tx_completed	include/nss_gmac_dev.h	/^	dma_int_tx_completed = 0x00000001,\/* Transmit completed (Normal)      *\/$/;"	e	enum:dma_status_reg
dma_int_tx_completed	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_completed = 0x00000001,\/* Transmit completed (Normal)      *\/$/;"	e	enum:dma_status_reg
dma_int_tx_jabber_to	include/nss_gmac_dev.h	/^	dma_int_tx_jabber_to = 0x00000008,\/* TX Jabber Timeout (Abnormal)     *\/$/;"	e	enum:dma_status_reg
dma_int_tx_jabber_to	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_jabber_to = 0x00000008,\/* TX Jabber Timeout (Abnormal)     *\/$/;"	e	enum:dma_status_reg
dma_int_tx_no_buffer	include/nss_gmac_dev.h	/^	dma_int_tx_no_buffer = 0x00000004,\/* TX buffer unavailable (Normal)   *\/$/;"	e	enum:dma_status_reg
dma_int_tx_no_buffer	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_no_buffer = 0x00000004,\/* TX buffer unavailable (Normal)   *\/$/;"	e	enum:dma_status_reg
dma_int_tx_norm_mask	include/nss_gmac_dev.h	/^	dma_int_tx_norm_mask = dma_int_tx_completed,	\/* TX normal intr     *\/$/;"	e	enum:initial_registers
dma_int_tx_norm_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_norm_mask = dma_int_tx_completed,	\/* TX normal intr     *\/$/;"	e	enum:initial_registers
dma_int_tx_stopped	include/nss_gmac_dev.h	/^	dma_int_tx_stopped = 0x00000002,\/* TX process stopped (Abnormal)      *\/$/;"	e	enum:dma_status_reg
dma_int_tx_stopped	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_stopped = 0x00000002,\/* TX process stopped (Abnormal)      *\/$/;"	e	enum:dma_status_reg
dma_int_tx_stopped_mask	include/nss_gmac_dev.h	/^	dma_int_tx_stopped_mask = dma_int_tx_stopped,	\/* TX stopped         *\/$/;"	e	enum:initial_registers
dma_int_tx_stopped_mask	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_stopped_mask = dma_int_tx_stopped,	\/* TX stopped         *\/$/;"	e	enum:initial_registers
dma_int_tx_underflow	include/nss_gmac_dev.h	/^	dma_int_tx_underflow = 0x00000020,\/* Transmit underflow (Abnormal)    *\/$/;"	e	enum:dma_status_reg
dma_int_tx_underflow	ipq806x/include/nss_gmac_dev.h	/^	dma_int_tx_underflow = 0x00000020,\/* Transmit underflow (Abnormal)    *\/$/;"	e	enum:dma_status_reg
dma_interrupt	include/nss_gmac_dev.h	/^	dma_interrupt = 0x001C,		\/* CSR7 - Interrupt enable            *\/$/;"	e	enum:dma_registers
dma_interrupt	ipq806x/include/nss_gmac_dev.h	/^	dma_interrupt = 0x001C,		\/* CSR7 - Interrupt enable            *\/$/;"	e	enum:dma_registers
dma_interrupt_reg	include/nss_gmac_dev.h	/^enum dma_interrupt_reg {$/;"	g
dma_interrupt_reg	ipq806x/include/nss_gmac_dev.h	/^enum dma_interrupt_reg {$/;"	g
dma_lpi_xit_frm	include/nss_gmac_dev.h	/^	dma_lpi_xit_frm = 0x40000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_lpi_xit_frm	ipq806x/include/nss_gmac_dev.h	/^	dma_lpi_xit_frm = 0x40000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_missed_fr	include/nss_gmac_dev.h	/^	dma_missed_fr = 0x0020,		\/* CSR8 - Missed Frame & Buffer$/;"	e	enum:dma_registers
dma_missed_fr	ipq806x/include/nss_gmac_dev.h	/^	dma_missed_fr = 0x0020,		\/* CSR8 - Missed Frame & Buffer$/;"	e	enum:dma_registers
dma_omr	include/nss_gmac_dev.h	/^	dma_omr = dma_store_and_forward | dma_rx_store_and_forward$/;"	e	enum:initial_registers
dma_omr	ipq806x/include/nss_gmac_dev.h	/^	dma_omr = dma_store_and_forward | dma_rx_store_and_forward$/;"	e	enum:initial_registers
dma_onekbbe	include/nss_gmac_dev.h	/^	dma_onekbbe = 0x00002000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_onekbbe	ipq806x/include/nss_gmac_dev.h	/^	dma_onekbbe = 0x00002000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs1	include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs1 = 0x00000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs1	ipq806x/include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs1 = 0x00000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs16	include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs16 = 0x000F0000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs16	ipq806x/include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs16 = 0x000F0000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs2	include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs2 = 0x00010000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs2	ipq806x/include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs2 = 0x00010000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs4	include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs4 = 0x00030000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs4	ipq806x/include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs4 = 0x00030000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs8	include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs8 = 0x00070000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_rd_osr_num_reqs8	ipq806x/include/nss_gmac_dev.h	/^	dma_rd_osr_num_reqs8 = 0x00070000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_registers	include/nss_gmac_dev.h	/^enum dma_registers {$/;"	g
dma_registers	ipq806x/include/nss_gmac_dev.h	/^enum dma_registers {$/;"	g
dma_reset_off	include/nss_gmac_dev.h	/^	dma_reset_off = 0x00000000,$/;"	e	enum:dma_bus_mode_reg
dma_reset_off	ipq806x/include/nss_gmac_dev.h	/^	dma_reset_off = 0x00000000,$/;"	e	enum:dma_bus_mode_reg
dma_reset_on	include/nss_gmac_dev.h	/^	dma_reset_on = 0x00000001,		\/* (SWR)Software Reset DMA$/;"	e	enum:dma_bus_mode_reg
dma_reset_on	ipq806x/include/nss_gmac_dev.h	/^	dma_reset_on = 0x00000001,		\/* (SWR)Software Reset DMA$/;"	e	enum:dma_bus_mode_reg
dma_rx_base_addr	include/nss_gmac_dev.h	/^	dma_rx_base_addr = 0x000C,	\/* CSR3 - RX Descriptor list base addr*\/$/;"	e	enum:dma_registers
dma_rx_base_addr	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_base_addr = 0x000C,	\/* CSR3 - RX Descriptor list base addr*\/$/;"	e	enum:dma_registers
dma_rx_closing	include/nss_gmac_dev.h	/^	dma_rx_closing = 0x000A0000,	\/* Running - closing descriptor       *\/$/;"	e	enum:dma_status_reg
dma_rx_closing	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_closing = 0x000A0000,	\/* Running - closing descriptor       *\/$/;"	e	enum:dma_status_reg
dma_rx_curr_addr	include/nss_gmac_dev.h	/^	dma_rx_curr_addr = 0x0054,	\/* CSR21 - Current host RX buffer addr*\/$/;"	e	enum:dma_registers
dma_rx_curr_addr	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_curr_addr = 0x0054,	\/* CSR21 - Current host RX buffer addr*\/$/;"	e	enum:dma_registers
dma_rx_curr_desc	include/nss_gmac_dev.h	/^	dma_rx_curr_desc = 0x004C,	\/* Current host Rx Desc Register      *\/$/;"	e	enum:dma_registers
dma_rx_curr_desc	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_curr_desc = 0x004C,	\/* Current host Rx Desc Register      *\/$/;"	e	enum:dma_registers
dma_rx_fetching	include/nss_gmac_dev.h	/^	dma_rx_fetching = 0x00020000,	\/* Running - fetching the Rx$/;"	e	enum:dma_status_reg
dma_rx_fetching	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_fetching = 0x00020000,	\/* Running - fetching the Rx$/;"	e	enum:dma_status_reg
dma_rx_flow_ctrl_act	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act = 0x00800600,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act = 0x00800600,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act1K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act1K = 0x00000000,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act1K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act1K = 0x00000000,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act2K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act2K = 0x00000200,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act2K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act2K = 0x00000200,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act3K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act3K = 0x00000400,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act3K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act3K = 0x00000400,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act4K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act4K = 0x00000600,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act4K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act4K = 0x00000600,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act5K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act5K = 0x00800000,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act5K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act5K = 0x00800000,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act6K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act6K = 0x00800200,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act6K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act6K = 0x00800200,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act7K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act7K = 0x00800400,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_act7K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_act7K = 0x00800400,	\/* (RFA)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact = 0x00401800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact = 0x00401800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact1K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact1K = 0x00000000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact1K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact1K = 0x00000000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact2K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact2K = 0x00000800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact2K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact2K = 0x00000800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact3K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact3K = 0x00001000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact3K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact3K = 0x00001000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact4K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact4K = 0x00001800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact4K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact4K = 0x00001800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact5K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact5K = 0x00400000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact5K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact5K = 0x00400000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact6K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact6K = 0x00400800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact6K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact6K = 0x00400800,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact7K	include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact7K = 0x00401000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_flow_ctrl_deact7K	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_flow_ctrl_deact7K = 0x00401000,	\/* (RFD)Rx flow control$/;"	e	enum:dma_control_reg
dma_rx_frame_flush	include/nss_gmac_dev.h	/^	dma_rx_frame_flush = 0x01000000,	\/* Disable Receive Frame Flush*\/$/;"	e	enum:dma_control_reg
dma_rx_frame_flush	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_frame_flush = 0x01000000,	\/* Disable Receive Frame Flush*\/$/;"	e	enum:dma_control_reg
dma_rx_poll_demand	include/nss_gmac_dev.h	/^	dma_rx_poll_demand = 0x0008,	\/* CSR2 - RX Poll Demand Register *\/$/;"	e	enum:dma_registers
dma_rx_poll_demand	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_poll_demand = 0x0008,	\/* CSR2 - RX Poll Demand Register *\/$/;"	e	enum:dma_registers
dma_rx_queuing	include/nss_gmac_dev.h	/^	dma_rx_queuing = 0x000E0000,	\/* Running - queuing the receive$/;"	e	enum:dma_status_reg
dma_rx_queuing	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_queuing = 0x000E0000,	\/* Running - queuing the receive$/;"	e	enum:dma_status_reg
dma_rx_start	include/nss_gmac_dev.h	/^	dma_rx_start = 0x00000002,		\/* (SR)Start\/Stop reception   *\/$/;"	e	enum:dma_control_reg
dma_rx_start	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_start = 0x00000002,		\/* (SR)Start\/Stop reception   *\/$/;"	e	enum:dma_control_reg
dma_rx_state	include/nss_gmac_dev.h	/^	dma_rx_state = 0x000E0000,	\/* (RS)Receive process state          *\/$/;"	e	enum:dma_status_reg
dma_rx_state	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_state = 0x000E0000,	\/* (RS)Receive process state          *\/$/;"	e	enum:dma_status_reg
dma_rx_stopped	include/nss_gmac_dev.h	/^	dma_rx_stopped = 0x00000000,	\/* Stopped - Reset or Stop$/;"	e	enum:dma_status_reg
dma_rx_stopped	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_stopped = 0x00000000,	\/* Stopped - Reset or Stop$/;"	e	enum:dma_status_reg
dma_rx_store_and_forward	include/nss_gmac_dev.h	/^	dma_rx_store_and_forward = 0x02000000,	\/* Rx (SF)Store and forward   *\/$/;"	e	enum:dma_control_reg
dma_rx_store_and_forward	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_store_and_forward = 0x02000000,	\/* Rx (SF)Store and forward   *\/$/;"	e	enum:dma_control_reg
dma_rx_suspended	include/nss_gmac_dev.h	/^	dma_rx_suspended = 0x00080000,	\/* Suspended - Rx Descriptor$/;"	e	enum:dma_status_reg
dma_rx_suspended	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_suspended = 0x00080000,	\/* Suspended - Rx Descriptor$/;"	e	enum:dma_status_reg
dma_rx_thresh_ctrl	include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl = 0x00000018,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl = 0x00000018,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl128	include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl128 = 0x00000018,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl128	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl128 = 0x00000018,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl32	include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl32 = 0x00000008,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl32	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl32 = 0x00000008,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl64	include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl64 = 0x00000000,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl64	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl64 = 0x00000000,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl96	include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl96 = 0x00000010,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_thresh_ctrl96	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_thresh_ctrl96 = 0x00000010,	\/* (RTC)Controls thre$/;"	e	enum:dma_control_reg
dma_rx_waiting	include/nss_gmac_dev.h	/^	dma_rx_waiting = 0x00060000,	\/* Running - waiting for packet       *\/$/;"	e	enum:dma_status_reg
dma_rx_waiting	ipq806x/include/nss_gmac_dev.h	/^	dma_rx_waiting = 0x00060000,	\/* Running - waiting for packet       *\/$/;"	e	enum:dma_status_reg
dma_status	include/nss_gmac_dev.h	/^	dma_status = 0x0014,		\/* CSR5 - Dma status Register         *\/$/;"	e	enum:dma_registers
dma_status	ipq806x/include/nss_gmac_dev.h	/^	dma_status = 0x0014,		\/* CSR5 - Dma status Register         *\/$/;"	e	enum:dma_registers
dma_status_reg	include/nss_gmac_dev.h	/^enum dma_status_reg {$/;"	g
dma_status_reg	ipq806x/include/nss_gmac_dev.h	/^enum dma_status_reg {$/;"	g
dma_store_and_forward	include/nss_gmac_dev.h	/^	dma_store_and_forward = 0x00200000,	\/* (SF)Store and forward      *\/$/;"	e	enum:dma_control_reg
dma_store_and_forward	ipq806x/include/nss_gmac_dev.h	/^	dma_store_and_forward = 0x00200000,	\/* (SF)Store and forward      *\/$/;"	e	enum:dma_control_reg
dma_tx_base_addr	include/nss_gmac_dev.h	/^	dma_tx_base_addr = 0x0010,	\/* CSR4 - TX Descriptor list base addr*\/$/;"	e	enum:dma_registers
dma_tx_base_addr	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_base_addr = 0x0010,	\/* CSR4 - TX Descriptor list base addr*\/$/;"	e	enum:dma_registers
dma_tx_closing	include/nss_gmac_dev.h	/^	dma_tx_closing = 0x00700000,	\/* Running - closing Rx descriptor    *\/$/;"	e	enum:dma_status_reg
dma_tx_closing	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_closing = 0x00700000,	\/* Running - closing Rx descriptor    *\/$/;"	e	enum:dma_status_reg
dma_tx_curr_addr	include/nss_gmac_dev.h	/^	dma_tx_curr_addr = 0x0050,	\/* CSR20 - Current host TX buffer addr*\/$/;"	e	enum:dma_registers
dma_tx_curr_addr	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_curr_addr = 0x0050,	\/* CSR20 - Current host TX buffer addr*\/$/;"	e	enum:dma_registers
dma_tx_curr_desc	include/nss_gmac_dev.h	/^	dma_tx_curr_desc = 0x0048,	\/* Current host Tx Desc Register      *\/$/;"	e	enum:dma_registers
dma_tx_curr_desc	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_curr_desc = 0x0048,	\/* Current host Tx Desc Register      *\/$/;"	e	enum:dma_registers
dma_tx_fetching	include/nss_gmac_dev.h	/^	dma_tx_fetching = 0x00100000,	\/* Running - fetching the Tx$/;"	e	enum:dma_status_reg
dma_tx_fetching	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_fetching = 0x00100000,	\/* Running - fetching the Tx$/;"	e	enum:dma_status_reg
dma_tx_poll_demand	include/nss_gmac_dev.h	/^	dma_tx_poll_demand = 0x0004,	\/* CSR1 - TX Poll Demand Register*\/$/;"	e	enum:dma_registers
dma_tx_poll_demand	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_poll_demand = 0x0004,	\/* CSR1 - TX Poll Demand Register*\/$/;"	e	enum:dma_registers
dma_tx_priority_ratio11	include/nss_gmac_dev.h	/^	dma_tx_priority_ratio11 = 0x00000000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio11	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_priority_ratio11 = 0x00000000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio21	include/nss_gmac_dev.h	/^	dma_tx_priority_ratio21 = 0x00004000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio21	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_priority_ratio21 = 0x00004000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio31	include/nss_gmac_dev.h	/^	dma_tx_priority_ratio31 = 0x00008000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio31	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_priority_ratio31 = 0x00008000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio41	include/nss_gmac_dev.h	/^	dma_tx_priority_ratio41 = 0x0000C000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_priority_ratio41	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_priority_ratio41 = 0x0000C000,	\/* (PR)TX:RX DMA priority ratio$/;"	e	enum:dma_bus_mode_reg
dma_tx_reading	include/nss_gmac_dev.h	/^	dma_tx_reading = 0x00300000,	\/* Running - reading the data$/;"	e	enum:dma_status_reg
dma_tx_reading	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_reading = 0x00300000,	\/* Running - reading the data$/;"	e	enum:dma_status_reg
dma_tx_second_frame	include/nss_gmac_dev.h	/^	dma_tx_second_frame = 0x00000004,	\/* (OSF)Operate on 2nd frame  *\/$/;"	e	enum:dma_control_reg
dma_tx_second_frame	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_second_frame = 0x00000004,	\/* (OSF)Operate on 2nd frame  *\/$/;"	e	enum:dma_control_reg
dma_tx_start	include/nss_gmac_dev.h	/^	dma_tx_start = 0x00002000,		\/* (ST)Start\/Stop transmission*\/$/;"	e	enum:dma_control_reg
dma_tx_start	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_start = 0x00002000,		\/* (ST)Start\/Stop transmission*\/$/;"	e	enum:dma_control_reg
dma_tx_state	include/nss_gmac_dev.h	/^	dma_tx_state = 0x00700000,	\/* (TS)Transmit process state         *\/$/;"	e	enum:dma_status_reg
dma_tx_state	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_state = 0x00700000,	\/* (TS)Transmit process state         *\/$/;"	e	enum:dma_status_reg
dma_tx_stopped	include/nss_gmac_dev.h	/^	dma_tx_stopped = 0x00000000,	\/* Stopped - Reset or Stop Tx$/;"	e	enum:dma_status_reg
dma_tx_stopped	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_stopped = 0x00000000,	\/* Stopped - Reset or Stop Tx$/;"	e	enum:dma_status_reg
dma_tx_suspended	include/nss_gmac_dev.h	/^	dma_tx_suspended = 0x00600000,	\/* Suspended - Tx Descriptor$/;"	e	enum:dma_status_reg
dma_tx_suspended	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_suspended = 0x00600000,	\/* Suspended - Tx Descriptor$/;"	e	enum:dma_status_reg
dma_tx_thresh_ctrl	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl = 0x0001C000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl = 0x0001C000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl128	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl128 = 0x00004000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl128	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl128 = 0x00004000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl16	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl16 = 0x0001C000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl16	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl16 = 0x0001C000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl192	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl192 = 0x00008000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl192	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl192 = 0x00008000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl24	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl24 = 0x00018000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl24	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl24 = 0x00018000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl256	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl256 = 0x0000c000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl256	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl256 = 0x0000c000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl32	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl32 = 0x00014000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl32	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl32 = 0x00014000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl40	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl40 = 0x00010000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl40	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl40 = 0x00010000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl64	include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl64 = 0x00000000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_thresh_ctrl64	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_thresh_ctrl64 = 0x00000000,	\/* (TTC)Controls thre Threh of$/;"	e	enum:dma_control_reg
dma_tx_waiting	include/nss_gmac_dev.h	/^	dma_tx_waiting = 0x00200000,	\/* Running - waiting for status       *\/$/;"	e	enum:dma_status_reg
dma_tx_waiting	ipq806x/include/nss_gmac_dev.h	/^	dma_tx_waiting = 0x00200000,	\/* Running - waiting for status       *\/$/;"	e	enum:dma_status_reg
dma_undefined	include/nss_gmac_dev.h	/^	dma_undefined = 0x00000001,$/;"	e	enum:dma_axi_bus_mode_reg
dma_undefined	ipq806x/include/nss_gmac_dev.h	/^	dma_undefined = 0x00000001,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs1	include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs1 = 0x00000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs1	ipq806x/include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs1 = 0x00000000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs16	include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs16 = 0x00F00000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs16	ipq806x/include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs16 = 0x00F00000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs2	include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs2 = 0x00100000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs2	ipq806x/include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs2 = 0x00100000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs4	include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs4 = 0x00300000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs4	ipq806x/include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs4 = 0x00300000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs8	include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs8 = 0x00700000,$/;"	e	enum:dma_axi_bus_mode_reg
dma_wr_osr_num_reqs8	ipq806x/include/nss_gmac_dev.h	/^	dma_wr_osr_num_reqs8 = 0x00700000,$/;"	e	enum:dma_axi_bus_mode_reg
dni_enet_destruct	ipq806x/dni_enet.c	/^void dni_enet_destruct(struct net_device *dev)$/;"	f
dni_enet_get_stats	ipq806x/dni_enet.c	/^static inline struct net_device_stats *dni_enet_get_stats(struct net_device *dev) {$/;"	f	file:
dni_enet_hard_start_xmit	ipq806x/dni_enet.c	/^int dni_enet_hard_start_xmit(struct sk_buff *skb, struct net_device *dev)$/;"	f
dni_enet_info	ipq806x/include/ipv6_pssthrgh.h	/^struct dni_enet_info {$/;"	s
dni_enet_init	ipq806x/dni_enet.c	/^int dni_enet_init(struct net_device *dev)$/;"	f
dni_enet_load	ipq806x/dni_enet.c	/^dni_enet_load(void)$/;"	f	file:
dni_enet_load	ipq806x/dni_enet.c	/^module_init(dni_enet_load);$/;"	v
dni_enet_open	ipq806x/dni_enet.c	/^int dni_enet_open(struct net_device *dev)$/;"	f
dni_enet_set_mac_address	ipq806x/dni_enet.c	/^int dni_enet_set_mac_address(struct net_device *dev, void *addr_struct_p)$/;"	f
dni_enet_stop	ipq806x/dni_enet.c	/^int dni_enet_stop(struct net_device *dev)$/;"	f
dni_enet_unload	ipq806x/dni_enet.c	/^dni_enet_unload(void)$/;"	f	file:
dni_enet_unload	ipq806x/dni_enet.c	/^module_exit(dni_enet_unload);$/;"	v
dni_switch_phy	ipq806x/nss_gmac_ctrl.c	/^static void dni_switch_phy(int phyUnit)$/;"	f	file:
dni_switch_phy_cleanup	ipq806x/nss_gmac_ctrl.c	/^static void dni_switch_phy_cleanup(void)$/;"	f	file:
dni_switch_phy_init	ipq806x/nss_gmac_ctrl.c	/^static void dni_switch_phy_init(void)$/;"	f	file:
do_switch_phy_timer	ipq806x/nss_gmac_ctrl.c	/^static void do_switch_phy_timer(unsigned long arg)$/;"	f	file:
drv_flags	include/nss_gmac_dev.h	/^	uint32_t drv_flags;	\/* Driver specific feature flags		*\/$/;"	m	struct:nss_gmac_dev
drv_flags	ipq806x/include/nss_gmac_dev.h	/^	uint32_t drv_flags;	\/* Driver specific feature flags		*\/$/;"	m	struct:nss_gmac_dev
duplex_mode	include/nss_gmac_dev.h	/^	uint32_t duplex_mode;	\/* Duplex mode of the Phy                     *\/$/;"	m	struct:nss_gmac_dev
duplex_mode	ipq806x/include/nss_gmac_dev.h	/^	uint32_t duplex_mode;	\/* Duplex mode of the Phy                     *\/$/;"	m	struct:nss_gmac_dev
emulation	include/msm_nss_gmac.h	/^	uint32_t emulation;		\/* Running on emulation platform *\/$/;"	m	struct:msm_nss_gmac_platform_data
emulation	include/nss_gmac_dev.h	/^	uint32_t emulation;	\/* Running on emulation platform	      *\/$/;"	m	struct:nss_gmac_dev
emulation	ipq806x/include/msm_nss_gmac.h	/^	uint32_t emulation;		\/* Running on emulation platform *\/$/;"	m	struct:msm_nss_gmac_platform_data
emulation	ipq806x/include/nss_gmac_dev.h	/^	uint32_t emulation;	\/* Running on emulation platform	      *\/$/;"	m	struct:nss_gmac_dev
eth_tm_dir	ipq806x/nss_gmac_tx_rx_offload.c	/^int eth_tm_dir;$/;"	v
extstatus	include/nss_gmac_dev.h	/^	uint32_t extstatus;	\/* Extended status of a Rx Descriptor *\/$/;"	m	struct:dma_desc
extstatus	ipq806x/include/nss_gmac_dev.h	/^	uint32_t extstatus;	\/* Extended status of a Rx Descriptor *\/$/;"	m	struct:dma_desc
fifo_overflows	exports/nss_gmac_api_if.h	/^	uint32_t fifo_overflows;	\/**< Number of RX FIFO overflows signalled by the DMA *\/$/;"	m	struct:nss_gmac_stats
fifo_overflows	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t fifo_overflows;	\/**< Number of RX FIFO overflows signalled by the DMA *\/$/;"	m	struct:nss_gmac_stats
first_linkup_done	include/nss_gmac_dev.h	/^	uint32_t first_linkup_done;	\/* when set, it indicates that first$/;"	m	struct:nss_gmac_dev
first_linkup_done	ipq806x/include/nss_gmac_dev.h	/^	uint32_t first_linkup_done;	\/* when set, it indicates that first$/;"	m	struct:nss_gmac_dev
flags	include/nss_gmac_dev.h	/^	unsigned long int flags;\/* status flags				      *\/$/;"	m	struct:nss_gmac_dev
flags	ipq806x/include/nss_gmac_dev.h	/^	unsigned long int flags;\/* status flags				      *\/$/;"	m	struct:nss_gmac_dev
forced_duplex	include/msm_nss_gmac.h	/^	int32_t forced_duplex;		\/* Forced duplex. Values used from$/;"	m	struct:msm_nss_gmac_platform_data
forced_duplex	include/nss_gmac_dev.h	/^	int32_t forced_duplex;		\/* Forced Duplex *\/$/;"	m	struct:nss_gmac_dev
forced_duplex	ipq806x/include/msm_nss_gmac.h	/^	int32_t forced_duplex;		\/* Forced duplex. Values used from$/;"	m	struct:msm_nss_gmac_platform_data
forced_duplex	ipq806x/include/nss_gmac_dev.h	/^	int32_t forced_duplex;		\/* Forced Duplex *\/$/;"	m	struct:nss_gmac_dev
forced_speed	include/msm_nss_gmac.h	/^	int32_t forced_speed;		\/* Forced speed. Values used from$/;"	m	struct:msm_nss_gmac_platform_data
forced_speed	include/nss_gmac_dev.h	/^	int32_t forced_speed;		\/* Forced Speed *\/$/;"	m	struct:nss_gmac_dev
forced_speed	ipq806x/include/msm_nss_gmac.h	/^	int32_t forced_speed;		\/* Forced speed. Values used from$/;"	m	struct:msm_nss_gmac_platform_data
forced_speed	ipq806x/include/nss_gmac_dev.h	/^	int32_t forced_speed;		\/* Forced Speed *\/$/;"	m	struct:nss_gmac_dev
g_mii_req	ipq806x/nss_gmac_ctrl.c	/^mii_ioctl_priv_data g_mii_req = {0x00, 0x00, 0x00, 0x00, 0x00,$/;"	v
g_miibus	ipq806x/nss_gmac_ctrl.c	/^static struct mii_bus *g_miibus = NULL;$/;"	v	typeref:struct:mii_bus	file:
get_pcs_speed	ipq806x/nss_gmac_init.c	/^static uint32_t get_pcs_speed(struct nss_gmac_dev *gmacdev)$/;"	f	file:
get_phy_status	ipq806x/nss_gmac_ctrl.c	/^static void get_phy_status(struct nss_gmac_dev *gmacdev)$/;"	f	file:
gmac_addr0_high	include/nss_gmac_dev.h	/^	gmac_addr0_high = 0x0040,	\/* Mac address0 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr0_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr0_high = 0x0040,	\/* Mac address0 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr0_low	include/nss_gmac_dev.h	/^	gmac_addr0_low = 0x0044,	\/* Mac address0 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr0_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr0_low = 0x0044,	\/* Mac address0 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr10_high	include/nss_gmac_dev.h	/^	gmac_addr10_high = 0x0090,	\/* Mac address10 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr10_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr10_high = 0x0090,	\/* Mac address10 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr10_low	include/nss_gmac_dev.h	/^	gmac_addr10_low = 0x0094,	\/* Mac address10 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr10_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr10_low = 0x0094,	\/* Mac address10 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr11_high	include/nss_gmac_dev.h	/^	gmac_addr11_high = 0x0098,	\/* Mac address11 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr11_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr11_high = 0x0098,	\/* Mac address11 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr11_low	include/nss_gmac_dev.h	/^	gmac_addr11_low = 0x009C,	\/* Mac address11 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr11_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr11_low = 0x009C,	\/* Mac address11 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr12_high	include/nss_gmac_dev.h	/^	gmac_addr12_high = 0x00A0,	\/* Mac address12 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr12_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr12_high = 0x00A0,	\/* Mac address12 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr12_low	include/nss_gmac_dev.h	/^	gmac_addr12_low = 0x00A4,	\/* Mac address12 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr12_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr12_low = 0x00A4,	\/* Mac address12 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr13_high	include/nss_gmac_dev.h	/^	gmac_addr13_high = 0x00A8,	\/* Mac address13 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr13_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr13_high = 0x00A8,	\/* Mac address13 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr13_low	include/nss_gmac_dev.h	/^	gmac_addr13_low = 0x00AC,	\/* Mac address13 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr13_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr13_low = 0x00AC,	\/* Mac address13 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr14_high	include/nss_gmac_dev.h	/^	gmac_addr14_high = 0x00B0,	\/* Mac address14 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr14_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr14_high = 0x00B0,	\/* Mac address14 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr14_low	include/nss_gmac_dev.h	/^	gmac_addr14_low = 0x00B4,	\/* Mac address14 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr14_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr14_low = 0x00B4,	\/* Mac address14 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr15_high	include/nss_gmac_dev.h	/^	gmac_addr15_high = 0x00B8,	\/* Mac address15 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr15_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr15_high = 0x00B8,	\/* Mac address15 high Register        *\/$/;"	e	enum:gmac_registers
gmac_addr15_low	include/nss_gmac_dev.h	/^	gmac_addr15_low = 0x00BC,	\/* Mac address15 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr15_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr15_low = 0x00BC,	\/* Mac address15 low Register         *\/$/;"	e	enum:gmac_registers
gmac_addr1_high	include/nss_gmac_dev.h	/^	gmac_addr1_high = 0x0048,	\/* Mac address1 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr1_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr1_high = 0x0048,	\/* Mac address1 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr1_low	include/nss_gmac_dev.h	/^	gmac_addr1_low = 0x004C,	\/* Mac address1 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr1_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr1_low = 0x004C,	\/* Mac address1 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr2_high	include/nss_gmac_dev.h	/^	gmac_addr2_high = 0x0050,	\/* Mac address2 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr2_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr2_high = 0x0050,	\/* Mac address2 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr2_low	include/nss_gmac_dev.h	/^	gmac_addr2_low = 0x0054,	\/* Mac address2 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr2_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr2_low = 0x0054,	\/* Mac address2 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr3_high	include/nss_gmac_dev.h	/^	gmac_addr3_high = 0x0058,	\/* Mac address3 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr3_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr3_high = 0x0058,	\/* Mac address3 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr3_low	include/nss_gmac_dev.h	/^	gmac_addr3_low = 0x005C,	\/* Mac address3 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr3_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr3_low = 0x005C,	\/* Mac address3 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr4_high	include/nss_gmac_dev.h	/^	gmac_addr4_high = 0x0060,	\/* Mac address4 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr4_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr4_high = 0x0060,	\/* Mac address4 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr4_low	include/nss_gmac_dev.h	/^	gmac_addr4_low = 0x0064,	\/* Mac address4 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr4_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr4_low = 0x0064,	\/* Mac address4 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr5_high	include/nss_gmac_dev.h	/^	gmac_addr5_high = 0x0068,	\/* Mac address5 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr5_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr5_high = 0x0068,	\/* Mac address5 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr5_low	include/nss_gmac_dev.h	/^	gmac_addr5_low = 0x006C,	\/* Mac address5 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr5_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr5_low = 0x006C,	\/* Mac address5 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr6_high	include/nss_gmac_dev.h	/^	gmac_addr6_high = 0x0070,	\/* Mac address6 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr6_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr6_high = 0x0070,	\/* Mac address6 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr6_low	include/nss_gmac_dev.h	/^	gmac_addr6_low = 0x0074,	\/* Mac address6 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr6_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr6_low = 0x0074,	\/* Mac address6 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr7_high	include/nss_gmac_dev.h	/^	gmac_addr7_high = 0x0078,	\/* Mac address7 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr7_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr7_high = 0x0078,	\/* Mac address7 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr7_low	include/nss_gmac_dev.h	/^	gmac_addr7_low = 0x007C,	\/* Mac address7 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr7_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr7_low = 0x007C,	\/* Mac address7 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr8_high	include/nss_gmac_dev.h	/^	gmac_addr8_high = 0x0080,	\/* Mac address8 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr8_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr8_high = 0x0080,	\/* Mac address8 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr8_low	include/nss_gmac_dev.h	/^	gmac_addr8_low = 0x0084,	\/* Mac address8 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr8_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr8_low = 0x0084,	\/* Mac address8 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr9_high	include/nss_gmac_dev.h	/^	gmac_addr9_high = 0x0088,	\/* Mac address9 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr9_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr9_high = 0x0088,	\/* Mac address9 high Register         *\/$/;"	e	enum:gmac_registers
gmac_addr9_low	include/nss_gmac_dev.h	/^	gmac_addr9_low = 0x008C,	\/* Mac address9 low Register          *\/$/;"	e	enum:gmac_registers
gmac_addr9_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_addr9_low = 0x008C,	\/* Mac address9 low Register          *\/$/;"	e	enum:gmac_registers
gmac_backoff_limit	include/nss_gmac_dev.h	/^	gmac_backoff_limit = 0x00000060,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit	ipq806x/include/nss_gmac_dev.h	/^	gmac_backoff_limit = 0x00000060,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit0	include/nss_gmac_dev.h	/^	gmac_backoff_limit0 = 0x00000000,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit0	ipq806x/include/nss_gmac_dev.h	/^	gmac_backoff_limit0 = 0x00000000,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit1	include/nss_gmac_dev.h	/^	gmac_backoff_limit1 = 0x00000020,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit1	ipq806x/include/nss_gmac_dev.h	/^	gmac_backoff_limit1 = 0x00000020,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit2	include/nss_gmac_dev.h	/^	gmac_backoff_limit2 = 0x00000040,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit2	ipq806x/include/nss_gmac_dev.h	/^	gmac_backoff_limit2 = 0x00000040,$/;"	e	enum:gmac_config_reg
gmac_backoff_limit3	include/nss_gmac_dev.h	/^	gmac_backoff_limit3 = 0x00000060,	\/* (BL)Back-off limit in HD$/;"	e	enum:gmac_config_reg
gmac_backoff_limit3	ipq806x/include/nss_gmac_dev.h	/^	gmac_backoff_limit3 = 0x00000060,	\/* (BL)Back-off limit in HD$/;"	e	enum:gmac_config_reg
gmac_broadcast	include/nss_gmac_dev.h	/^	gmac_broadcast = 0x00000020,$/;"	e	enum:gmac_frame_filter_reg
gmac_broadcast	ipq806x/include/nss_gmac_dev.h	/^	gmac_broadcast = 0x00000020,$/;"	e	enum:gmac_frame_filter_reg
gmac_broadcast_disable	include/nss_gmac_dev.h	/^	gmac_broadcast_disable = 0x00000020,	\/* (DBF)Disable Rx of broadcast$/;"	e	enum:gmac_frame_filter_reg
gmac_broadcast_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_broadcast_disable = 0x00000020,	\/* (DBF)Disable Rx of broadcast$/;"	e	enum:gmac_frame_filter_reg
gmac_broadcast_enable	include/nss_gmac_dev.h	/^	gmac_broadcast_enable = 0x00000000,	\/* Enable broadcast frames    *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_broadcast_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_broadcast_enable = 0x00000000,	\/* Enable broadcast frames    *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_config	include/nss_gmac_dev.h	/^	gmac_config = 0x0000,		\/* Mac config Register                *\/$/;"	e	enum:gmac_registers
gmac_config	ipq806x/include/nss_gmac_dev.h	/^	gmac_config = 0x0000,		\/* Mac config Register                *\/$/;"	e	enum:gmac_registers
gmac_config_init_fdx1000	include/nss_gmac_dev.h	/^	gmac_config_init_fdx1000 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_fdx1000	ipq806x/include/nss_gmac_dev.h	/^	gmac_config_init_fdx1000 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_fdx110	include/nss_gmac_dev.h	/^	gmac_config_init_fdx110 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_fdx110	ipq806x/include/nss_gmac_dev.h	/^	gmac_config_init_fdx110 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_hdx1000	include/nss_gmac_dev.h	/^	gmac_config_init_hdx1000 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_hdx1000	ipq806x/include/nss_gmac_dev.h	/^	gmac_config_init_hdx1000 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_hdx110	include/nss_gmac_dev.h	/^	gmac_config_init_hdx110 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_init_hdx110	ipq806x/include/nss_gmac_dev.h	/^	gmac_config_init_hdx110 = gmac_watchdog_enable | gmac_jabber_enable$/;"	e	enum:initial_registers
gmac_config_reg	include/nss_gmac_dev.h	/^enum gmac_config_reg {$/;"	g
gmac_config_reg	ipq806x/include/nss_gmac_dev.h	/^enum gmac_config_reg {$/;"	g
gmac_deferral_check	include/nss_gmac_dev.h	/^	gmac_deferral_check = 0x00000010,$/;"	e	enum:gmac_config_reg
gmac_deferral_check	ipq806x/include/nss_gmac_dev.h	/^	gmac_deferral_check = 0x00000010,$/;"	e	enum:gmac_config_reg
gmac_deferral_check_disable	include/nss_gmac_dev.h	/^	gmac_deferral_check_disable = 0x00000000,\/* Deferral check disable    *\/$/;"	e	enum:gmac_config_reg
gmac_deferral_check_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_deferral_check_disable = 0x00000000,\/* Deferral check disable    *\/$/;"	e	enum:gmac_config_reg
gmac_deferral_check_enable	include/nss_gmac_dev.h	/^	gmac_deferral_check_enable = 0x00000010,\/* (DC)Deferral check enable in$/;"	e	enum:gmac_config_reg
gmac_deferral_check_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_deferral_check_enable = 0x00000010,\/* (DC)Deferral check enable in$/;"	e	enum:gmac_config_reg
gmac_dest_addr_filter	include/nss_gmac_dev.h	/^	gmac_dest_addr_filter = 0x00000008,$/;"	e	enum:gmac_frame_filter_reg
gmac_dest_addr_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_dest_addr_filter = 0x00000008,$/;"	e	enum:gmac_frame_filter_reg
gmac_dest_addr_filter_inv	include/nss_gmac_dev.h	/^	gmac_dest_addr_filter_inv = 0x00000008,	\/* (DAIF)Inverse filtering for$/;"	e	enum:gmac_frame_filter_reg
gmac_dest_addr_filter_inv	ipq806x/include/nss_gmac_dev.h	/^	gmac_dest_addr_filter_inv = 0x00000008,	\/* (DAIF)Inverse filtering for$/;"	e	enum:gmac_frame_filter_reg
gmac_dest_addr_filter_nor	include/nss_gmac_dev.h	/^	gmac_dest_addr_filter_nor = 0x00000000,	\/* Normal filtering for DA    *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_dest_addr_filter_nor	ipq806x/include/nss_gmac_dev.h	/^	gmac_dest_addr_filter_nor = 0x00000000,	\/* Normal filtering for DA    *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_disable_crs	include/nss_gmac_dev.h	/^	gmac_disable_crs = 0x00010000,$/;"	e	enum:gmac_config_reg
gmac_disable_crs	ipq806x/include/nss_gmac_dev.h	/^	gmac_disable_crs = 0x00010000,$/;"	e	enum:gmac_config_reg
gmac_disable_rx_own	include/nss_gmac_dev.h	/^	gmac_disable_rx_own = 0x00002000,	\/* (DO)Disable receive own$/;"	e	enum:gmac_config_reg
gmac_disable_rx_own	ipq806x/include/nss_gmac_dev.h	/^	gmac_disable_rx_own = 0x00002000,	\/* (DO)Disable receive own$/;"	e	enum:gmac_config_reg
gmac_duplex	include/nss_gmac_dev.h	/^	gmac_duplex = 0x00000800,$/;"	e	enum:gmac_config_reg
gmac_duplex	ipq806x/include/nss_gmac_dev.h	/^	gmac_duplex = 0x00000800,$/;"	e	enum:gmac_config_reg
gmac_enable_rx_own	include/nss_gmac_dev.h	/^	gmac_enable_rx_own = 0x00000000,	\/* Enable receive own packets *\/$/;"	e	enum:gmac_config_reg
gmac_enable_rx_own	ipq806x/include/nss_gmac_dev.h	/^	gmac_enable_rx_own = 0x00000000,	\/* Enable receive own packets *\/$/;"	e	enum:gmac_config_reg
gmac_fe_speed10	include/nss_gmac_dev.h	/^	gmac_fe_speed10 = 0x00000000,		\/* 10Mbps                     *\/$/;"	e	enum:gmac_config_reg
gmac_fe_speed10	ipq806x/include/nss_gmac_dev.h	/^	gmac_fe_speed10 = 0x00000000,		\/* 10Mbps                     *\/$/;"	e	enum:gmac_config_reg
gmac_fe_speed100	include/nss_gmac_dev.h	/^	gmac_fe_speed100 = 0x00004000,		\/*(FES)Fast Ethernet speed$/;"	e	enum:gmac_config_reg
gmac_fe_speed100	ipq806x/include/nss_gmac_dev.h	/^	gmac_fe_speed100 = 0x00004000,		\/*(FES)Fast Ethernet speed$/;"	e	enum:gmac_config_reg
gmac_filter	include/nss_gmac_dev.h	/^	gmac_filter = 0x80000000,$/;"	e	enum:gmac_frame_filter_reg
gmac_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_filter = 0x80000000,$/;"	e	enum:gmac_frame_filter_reg
gmac_filter_off	include/nss_gmac_dev.h	/^	gmac_filter_off = 0x80000000,		\/* (RA)Receive all incoming$/;"	e	enum:gmac_frame_filter_reg
gmac_filter_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_filter_off = 0x80000000,		\/* (RA)Receive all incoming$/;"	e	enum:gmac_frame_filter_reg
gmac_filter_on	include/nss_gmac_dev.h	/^	gmac_filter_on = 0x00000000,		\/* Receive filtered pkts only *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_filter_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_filter_on = 0x00000000,		\/* Receive filtered pkts only *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_flow_control	include/nss_gmac_dev.h	/^	gmac_flow_control = 0x0018,	\/* Flow control Register              *\/$/;"	e	enum:gmac_registers
gmac_flow_control	ipq806x/include/nss_gmac_dev.h	/^	gmac_flow_control = 0x0018,	\/* Flow control Register              *\/$/;"	e	enum:gmac_registers
gmac_flow_control_back_pressure	include/nss_gmac_dev.h	/^	gmac_flow_control_back_pressure = 0x00000001,$/;"	e	enum:gmac_flow_control_reg
gmac_flow_control_back_pressure	ipq806x/include/nss_gmac_dev.h	/^	gmac_flow_control_back_pressure = 0x00000001,$/;"	e	enum:gmac_flow_control_reg
gmac_flow_control_init_fdx	include/nss_gmac_dev.h	/^	gmac_flow_control_init_fdx =$/;"	e	enum:initial_registers
gmac_flow_control_init_fdx	ipq806x/include/nss_gmac_dev.h	/^	gmac_flow_control_init_fdx =$/;"	e	enum:initial_registers
gmac_flow_control_init_hdx	include/nss_gmac_dev.h	/^	gmac_flow_control_init_hdx = gmac_unicast_pause_frame_off$/;"	e	enum:initial_registers
gmac_flow_control_init_hdx	ipq806x/include/nss_gmac_dev.h	/^	gmac_flow_control_init_hdx = gmac_unicast_pause_frame_off$/;"	e	enum:initial_registers
gmac_flow_control_reg	include/nss_gmac_dev.h	/^enum gmac_flow_control_reg {$/;"	g
gmac_flow_control_reg	ipq806x/include/nss_gmac_dev.h	/^enum gmac_flow_control_reg {$/;"	g
gmac_frame_burst	include/nss_gmac_dev.h	/^	gmac_frame_burst = 0x00200000,$/;"	e	enum:gmac_config_reg
gmac_frame_burst	ipq806x/include/nss_gmac_dev.h	/^	gmac_frame_burst = 0x00200000,$/;"	e	enum:gmac_config_reg
gmac_frame_burst_disable	include/nss_gmac_dev.h	/^	gmac_frame_burst_disable = 0x00000000,	\/* Disable frame bursting     *\/$/;"	e	enum:gmac_config_reg
gmac_frame_burst_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_frame_burst_disable = 0x00000000,	\/* Disable frame bursting     *\/$/;"	e	enum:gmac_config_reg
gmac_frame_burst_enable	include/nss_gmac_dev.h	/^	gmac_frame_burst_enable = 0x00200000,	\/* (BE)Enable frame bursting$/;"	e	enum:gmac_config_reg
gmac_frame_burst_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_frame_burst_enable = 0x00200000,	\/* (BE)Enable frame bursting$/;"	e	enum:gmac_config_reg
gmac_frame_filter	include/nss_gmac_dev.h	/^	gmac_frame_filter = 0x0004,	\/* Mac frame filtering controls       *\/$/;"	e	enum:gmac_registers
gmac_frame_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_frame_filter = 0x0004,	\/* Mac frame filtering controls       *\/$/;"	e	enum:gmac_registers
gmac_frame_filter_init_fdx	include/nss_gmac_dev.h	/^	gmac_frame_filter_init_fdx =$/;"	e	enum:initial_registers
gmac_frame_filter_init_fdx	ipq806x/include/nss_gmac_dev.h	/^	gmac_frame_filter_init_fdx =$/;"	e	enum:initial_registers
gmac_frame_filter_init_hdx	include/nss_gmac_dev.h	/^	gmac_frame_filter_init_hdx = gmac_filter_on | gmac_pass_control0$/;"	e	enum:initial_registers
gmac_frame_filter_init_hdx	ipq806x/include/nss_gmac_dev.h	/^	gmac_frame_filter_init_hdx = gmac_filter_on | gmac_pass_control0$/;"	e	enum:initial_registers
gmac_frame_filter_reg	include/nss_gmac_dev.h	/^enum gmac_frame_filter_reg {$/;"	g
gmac_frame_filter_reg	ipq806x/include/nss_gmac_dev.h	/^enum gmac_frame_filter_reg {$/;"	g
gmac_full_duplex	include/nss_gmac_dev.h	/^	gmac_full_duplex = 0x00000800,		\/* (DM)Full duplex mode       *\/$/;"	e	enum:gmac_config_reg
gmac_full_duplex	ipq806x/include/nss_gmac_dev.h	/^	gmac_full_duplex = 0x00000800,		\/* (DM)Full duplex mode       *\/$/;"	e	enum:gmac_config_reg
gmac_gmii_addr	include/nss_gmac_dev.h	/^	gmac_gmii_addr = 0x0010,	\/* GMII address Register(ext. Phy)    *\/$/;"	e	enum:gmac_registers
gmac_gmii_addr	ipq806x/include/nss_gmac_dev.h	/^	gmac_gmii_addr = 0x0010,	\/* GMII address Register(ext. Phy)    *\/$/;"	e	enum:gmac_registers
gmac_gmii_addr_init_fdx	include/nss_gmac_dev.h	/^	gmac_gmii_addr_init_fdx = gmii_csr_clk2,$/;"	e	enum:initial_registers
gmac_gmii_addr_init_fdx	ipq806x/include/nss_gmac_dev.h	/^	gmac_gmii_addr_init_fdx = gmii_csr_clk2,$/;"	e	enum:initial_registers
gmac_gmii_addr_init_hdx	include/nss_gmac_dev.h	/^	gmac_gmii_addr_init_hdx = gmii_csr_clk2,$/;"	e	enum:initial_registers
gmac_gmii_addr_init_hdx	ipq806x/include/nss_gmac_dev.h	/^	gmac_gmii_addr_init_hdx = gmii_csr_clk2,$/;"	e	enum:initial_registers
gmac_gmii_addr_reg	include/nss_gmac_dev.h	/^enum gmac_gmii_addr_reg {$/;"	g
gmac_gmii_addr_reg	ipq806x/include/nss_gmac_dev.h	/^enum gmac_gmii_addr_reg {$/;"	g
gmac_gmii_data	include/nss_gmac_dev.h	/^	gmac_gmii_data = 0x0014,	\/* GMII data Register(ext. Phy)       *\/$/;"	e	enum:gmac_registers
gmac_gmii_data	ipq806x/include/nss_gmac_dev.h	/^	gmac_gmii_data = 0x0014,	\/* GMII data Register(ext. Phy)       *\/$/;"	e	enum:gmac_registers
gmac_gmii_data_reg	include/nss_gmac_dev.h	/^enum gmac_gmii_data_reg {$/;"	g
gmac_gmii_data_reg	ipq806x/include/nss_gmac_dev.h	/^enum gmac_gmii_data_reg {$/;"	g
gmac_gstrings_stats	ipq806x/nss_gmac_ethtool.c	/^static const struct nss_gmac_ethtool_stats gmac_gstrings_stats[] = {$/;"	v	typeref:struct:nss_gmac_ethtool_stats	file:
gmac_half_duplex	include/nss_gmac_dev.h	/^	gmac_half_duplex = 0x00000000,		\/* Half duplex mode           *\/$/;"	e	enum:gmac_config_reg
gmac_half_duplex	ipq806x/include/nss_gmac_dev.h	/^	gmac_half_duplex = 0x00000000,		\/* Half duplex mode           *\/$/;"	e	enum:gmac_config_reg
gmac_hash_high	include/nss_gmac_dev.h	/^	gmac_hash_high = 0x0008,	\/* Multi-cast hash table high         *\/$/;"	e	enum:gmac_registers
gmac_hash_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_hash_high = 0x0008,	\/* Multi-cast hash table high         *\/$/;"	e	enum:gmac_registers
gmac_hash_low	include/nss_gmac_dev.h	/^	gmac_hash_low = 0x000c,		\/* Multi-cast hash table low          *\/$/;"	e	enum:gmac_registers
gmac_hash_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_hash_low = 0x000c,		\/* Multi-cast hash table low          *\/$/;"	e	enum:gmac_registers
gmac_hash_perfect_filter	include/nss_gmac_dev.h	/^	gmac_hash_perfect_filter = 0x00000400,	\/* Hash or Perfect Filter$/;"	e	enum:gmac_frame_filter_reg
gmac_hash_perfect_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_hash_perfect_filter = 0x00000400,	\/* Hash or Perfect Filter$/;"	e	enum:gmac_frame_filter_reg
gmac_inter_frame_gap0	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap0 = 0x00000000,	\/* (IFG) Config0 - 96bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap0	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap0 = 0x00000000,	\/* (IFG) Config0 - 96bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap1	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap1 = 0x00010000,	\/* (IFG) Config1 - 88bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap1	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap1 = 0x00010000,	\/* (IFG) Config1 - 88bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap2	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap2 = 0x00020000,	\/* (IFG) Config2 - 80bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap2	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap2 = 0x00020000,	\/* (IFG) Config2 - 80bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap3	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap3 = 0x00040000,	\/* (IFG) Config3 - 72bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap3	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap3 = 0x00040000,	\/* (IFG) Config3 - 72bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap4	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap4 = 0x00080000,	\/* (IFG) Config4 - 64bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap4	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap4 = 0x00080000,	\/* (IFG) Config4 - 64bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap5	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap5 = 0x000A0000,	\/* (IFG) Config5 - 56bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap5	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap5 = 0x000A0000,	\/* (IFG) Config5 - 56bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap6	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap6 = 0x000C0000,	\/* (IFG) Config6 - 48bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap6	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap6 = 0x000C0000,	\/* (IFG) Config6 - 48bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap7	include/nss_gmac_dev.h	/^	gmac_inter_frame_gap7 = 0x000E0000,	\/* (IFG) Config7 - 40bit times*\/$/;"	e	enum:gmac_config_reg
gmac_inter_frame_gap7	ipq806x/include/nss_gmac_dev.h	/^	gmac_inter_frame_gap7 = 0x000E0000,	\/* (IFG) Config7 - 40bit times*\/$/;"	e	enum:gmac_config_reg
gmac_interrupt_mask	include/nss_gmac_dev.h	/^	gmac_interrupt_mask = 0x003C,	\/* Mac Interrupt Mask register        *\/$/;"	e	enum:gmac_registers
gmac_interrupt_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_interrupt_mask = 0x003C,	\/* Mac Interrupt Mask register        *\/$/;"	e	enum:gmac_registers
gmac_interrupt_mask_bit_definition	include/nss_gmac_dev.h	/^enum gmac_interrupt_mask_bit_definition {$/;"	g
gmac_interrupt_mask_bit_definition	ipq806x/include/nss_gmac_dev.h	/^enum gmac_interrupt_mask_bit_definition {$/;"	g
gmac_interrupt_status	include/nss_gmac_dev.h	/^	gmac_interrupt_status = 0x0038,	\/* Mac Interrupt ststus register      *\/$/;"	e	enum:gmac_registers
gmac_interrupt_status	ipq806x/include/nss_gmac_dev.h	/^	gmac_interrupt_status = 0x0038,	\/* Mac Interrupt ststus register      *\/$/;"	e	enum:gmac_registers
gmac_interrupt_status_bit_definition	include/nss_gmac_dev.h	/^enum gmac_interrupt_status_bit_definition {$/;"	g
gmac_interrupt_status_bit_definition	ipq806x/include/nss_gmac_dev.h	/^enum gmac_interrupt_status_bit_definition {$/;"	g
gmac_iterations	exports/nss_gmac_api_if.h	/^	uint32_t gmac_iterations;	\/**< Number of iterations around the GMAC *\/$/;"	m	struct:nss_gmac_stats
gmac_iterations	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t gmac_iterations;	\/**< Number of iterations around the GMAC *\/$/;"	m	struct:nss_gmac_stats
gmac_jabber	include/nss_gmac_dev.h	/^	gmac_jabber = 0x00400000,$/;"	e	enum:gmac_config_reg
gmac_jabber	ipq806x/include/nss_gmac_dev.h	/^	gmac_jabber = 0x00400000,$/;"	e	enum:gmac_config_reg
gmac_jabber_disable	include/nss_gmac_dev.h	/^	gmac_jabber_disable = 0x00400000,	\/* (JD)Disable jabber timer$/;"	e	enum:gmac_config_reg
gmac_jabber_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_jabber_disable = 0x00400000,	\/* (JD)Disable jabber timer$/;"	e	enum:gmac_config_reg
gmac_jabber_enable	include/nss_gmac_dev.h	/^	gmac_jabber_enable = 0x00000000,	\/* Enable jabber timer        *\/$/;"	e	enum:gmac_config_reg
gmac_jabber_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_jabber_enable = 0x00000000,	\/* Enable jabber timer        *\/$/;"	e	enum:gmac_config_reg
gmac_jumbo_frame	include/nss_gmac_dev.h	/^	gmac_jumbo_frame = 0x00100000,$/;"	e	enum:gmac_config_reg
gmac_jumbo_frame	ipq806x/include/nss_gmac_dev.h	/^	gmac_jumbo_frame = 0x00100000,$/;"	e	enum:gmac_config_reg
gmac_jumbo_frame_disable	include/nss_gmac_dev.h	/^	gmac_jumbo_frame_disable = 0x00000000,	\/* Disable jumbo frame        *\/$/;"	e	enum:gmac_config_reg
gmac_jumbo_frame_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_jumbo_frame_disable = 0x00000000,	\/* Disable jumbo frame        *\/$/;"	e	enum:gmac_config_reg
gmac_jumbo_frame_enable	include/nss_gmac_dev.h	/^	gmac_jumbo_frame_enable = 0x00100000,	\/* (JE)Enable jumbo frame for$/;"	e	enum:gmac_config_reg
gmac_jumbo_frame_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_jumbo_frame_enable = 0x00100000,	\/* (JE)Enable jumbo frame for$/;"	e	enum:gmac_config_reg
gmac_line_intf_intr	include/nss_gmac_dev.h	/^	gmac_line_intf_intr = 0x04000000,	\/* Line interface interrupt   *\/$/;"	e	enum:dma_status_reg
gmac_line_intf_intr	ipq806x/include/nss_gmac_dev.h	/^	gmac_line_intf_intr = 0x04000000,	\/* Line interface interrupt   *\/$/;"	e	enum:dma_status_reg
gmac_link_down	include/nss_gmac_dev.h	/^	gmac_link_down = 0x00000100,		\/* Link Down                  *\/$/;"	e	enum:gmac_config_reg
gmac_link_down	ipq806x/include/nss_gmac_dev.h	/^	gmac_link_down = 0x00000100,		\/* Link Down                  *\/$/;"	e	enum:gmac_config_reg
gmac_link_up	include/nss_gmac_dev.h	/^	gmac_link_up = 0x00000100,		\/* (LUD)Link UP               *\/$/;"	e	enum:gmac_config_reg
gmac_link_up	ipq806x/include/nss_gmac_dev.h	/^	gmac_link_up = 0x00000100,		\/* (LUD)Link UP               *\/$/;"	e	enum:gmac_config_reg
gmac_loopback	include/nss_gmac_dev.h	/^	gmac_loopback = 0x00001000,$/;"	e	enum:gmac_config_reg
gmac_loopback	ipq806x/include/nss_gmac_dev.h	/^	gmac_loopback = 0x00001000,$/;"	e	enum:gmac_config_reg
gmac_loopback_off	include/nss_gmac_dev.h	/^	gmac_loopback_off = 0x00000000,		\/* Normal mode                *\/$/;"	e	enum:gmac_config_reg
gmac_loopback_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_loopback_off = 0x00000000,		\/* Normal mode                *\/$/;"	e	enum:gmac_config_reg
gmac_loopback_on	include/nss_gmac_dev.h	/^	gmac_loopback_on = 0x00001000,		\/* (LM)Loopback mode for$/;"	e	enum:gmac_config_reg
gmac_loopback_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_loopback_on = 0x00001000,		\/* (LM)Loopback mode for$/;"	e	enum:gmac_config_reg
gmac_mcast_hash_filter	include/nss_gmac_dev.h	/^	gmac_mcast_hash_filter = 0x00000004,$/;"	e	enum:gmac_frame_filter_reg
gmac_mcast_hash_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_mcast_hash_filter = 0x00000004,$/;"	e	enum:gmac_frame_filter_reg
gmac_mcast_hash_filter_off	include/nss_gmac_dev.h	/^	gmac_mcast_hash_filter_off = 0x00000000,\/* perfect filtering only     *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_mcast_hash_filter_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_mcast_hash_filter_off = 0x00000000,\/* perfect filtering only     *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_mcast_hash_filter_on	include/nss_gmac_dev.h	/^	gmac_mcast_hash_filter_on = 0x00000004,	\/* (HMC)perfom multicast hash$/;"	e	enum:gmac_frame_filter_reg
gmac_mcast_hash_filter_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_mcast_hash_filter_on = 0x00000004,	\/* (HMC)perfom multicast hash$/;"	e	enum:gmac_frame_filter_reg
gmac_mii_gmii	include/nss_gmac_dev.h	/^	gmac_mii_gmii = 0x00008000,$/;"	e	enum:gmac_config_reg
gmac_mii_gmii	ipq806x/include/nss_gmac_dev.h	/^	gmac_mii_gmii = 0x00008000,$/;"	e	enum:gmac_config_reg
gmac_mii_status	include/nss_gmac_dev.h	/^	gmac_mii_status = 0x00D8,	\/* SGMII\/RGMII\/SMII Status Register   *\/$/;"	e	enum:gmac_registers
gmac_mii_status	ipq806x/include/nss_gmac_dev.h	/^	gmac_mii_status = 0x00D8,	\/* SGMII\/RGMII\/SMII Status Register   *\/$/;"	e	enum:gmac_registers
gmac_mmc_cntrl	include/nss_gmac_dev.h	/^	gmac_mmc_cntrl = 0x0100,		\/* mmc control for operating$/;"	e	enum:mmc_enable
gmac_mmc_cntrl	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_cntrl = 0x0100,		\/* mmc control for operating$/;"	e	enum:mmc_enable
gmac_mmc_int_sts	include/nss_gmac_dev.h	/^	gmac_mmc_int_sts = 0x00000010,	\/* set if any of the above bit [7:5] is$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_int_sts	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_int_sts = 0x00000010,	\/* set if any of the above bit [7:5] is$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_intr	include/nss_gmac_dev.h	/^	gmac_mmc_intr = 0x08000000,	\/* (GMI)Gmac MMC subsystem interrupt  *\/$/;"	e	enum:dma_status_reg
gmac_mmc_intr	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_intr = 0x08000000,	\/* (GMI)Gmac MMC subsystem interrupt  *\/$/;"	e	enum:dma_status_reg
gmac_mmc_intr_mask_rx	include/nss_gmac_dev.h	/^	gmac_mmc_intr_mask_rx = 0x010C,	\/* mask for interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_mask_rx	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_intr_mask_rx = 0x010C,	\/* mask for interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_mask_tx	include/nss_gmac_dev.h	/^	gmac_mmc_intr_mask_tx = 0x0110,	\/* mask for interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_mask_tx	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_intr_mask_tx = 0x0110,	\/* mask for interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_rx	include/nss_gmac_dev.h	/^	gmac_mmc_intr_rx = 0x0104,		\/* maintains interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_rx	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_intr_rx = 0x0104,		\/* maintains interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_tx	include/nss_gmac_dev.h	/^	gmac_mmc_intr_tx = 0x0108,		\/* maintains interrupts$/;"	e	enum:mmc_enable
gmac_mmc_intr_tx	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_intr_tx = 0x0108,		\/* maintains interrupts$/;"	e	enum:mmc_enable
gmac_mmc_rx_chksum_offload	include/nss_gmac_dev.h	/^	gmac_mmc_rx_chksum_offload = 0x00000080,\/* set if int generated in MMC$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_rx_chksum_offload	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_rx_chksum_offload = 0x00000080,\/* set if int generated in MMC$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_rx_int_sts	include/nss_gmac_dev.h	/^	gmac_mmc_rx_int_sts = 0x00000020,	\/* set if int generated in MMC$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_rx_int_sts	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_rx_int_sts = 0x00000020,	\/* set if int generated in MMC$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_rx_ipc_intr_mask	include/nss_gmac_dev.h	/^	gmac_mmc_rx_ipc_intr_mask = 0x0200,$/;"	e	enum:mmc_ip_related
gmac_mmc_rx_ipc_intr_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_rx_ipc_intr_mask = 0x0200,$/;"	e	enum:mmc_ip_related
gmac_mmc_tx_int_sts	include/nss_gmac_dev.h	/^	gmac_mmc_tx_int_sts = 0x00000040,	\/* set if int generated in MMC$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_mmc_tx_int_sts	ipq806x/include/nss_gmac_dev.h	/^	gmac_mmc_tx_int_sts = 0x00000040,	\/* set if int generated in MMC$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_multicast_filter	include/nss_gmac_dev.h	/^	gmac_multicast_filter = 0x00000010,$/;"	e	enum:gmac_frame_filter_reg
gmac_multicast_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_multicast_filter = 0x00000010,$/;"	e	enum:gmac_frame_filter_reg
gmac_multicast_filter_off	include/nss_gmac_dev.h	/^	gmac_multicast_filter_off = 0x00000010,	\/* (PM) Pass all multicast$/;"	e	enum:gmac_frame_filter_reg
gmac_multicast_filter_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_multicast_filter_off = 0x00000010,	\/* (PM) Pass all multicast$/;"	e	enum:gmac_frame_filter_reg
gmac_multicast_filter_on	include/nss_gmac_dev.h	/^	gmac_multicast_filter_on = 0x00000000,	\/* Pass filtered multicast$/;"	e	enum:gmac_frame_filter_reg
gmac_multicast_filter_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_multicast_filter_on = 0x00000000,	\/* Pass filtered multicast$/;"	e	enum:gmac_frame_filter_reg
gmac_pad_crc_strip	include/nss_gmac_dev.h	/^	gmac_pad_crc_strip = 0x00000080,$/;"	e	enum:gmac_config_reg
gmac_pad_crc_strip	ipq806x/include/nss_gmac_dev.h	/^	gmac_pad_crc_strip = 0x00000080,$/;"	e	enum:gmac_config_reg
gmac_pad_crc_strip_disable	include/nss_gmac_dev.h	/^	gmac_pad_crc_strip_disable = 0x00000000,\/* Automatic Pad\/Crc stripping$/;"	e	enum:gmac_config_reg
gmac_pad_crc_strip_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_pad_crc_strip_disable = 0x00000000,\/* Automatic Pad\/Crc stripping$/;"	e	enum:gmac_config_reg
gmac_pad_crc_strip_enable	include/nss_gmac_dev.h	/^	gmac_pad_crc_strip_enable = 0x00000080,	\/* (ACS) Automatic Pad\/Crc$/;"	e	enum:gmac_config_reg
gmac_pad_crc_strip_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_pad_crc_strip_enable = 0x00000080,	\/* (ACS) Automatic Pad\/Crc$/;"	e	enum:gmac_config_reg
gmac_pass_control	include/nss_gmac_dev.h	/^	gmac_pass_control = 0x000000C0,$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control	ipq806x/include/nss_gmac_dev.h	/^	gmac_pass_control = 0x000000C0,$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control0	include/nss_gmac_dev.h	/^	gmac_pass_control0 = 0x00000000,	\/* Don't pass control frames  *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control0	ipq806x/include/nss_gmac_dev.h	/^	gmac_pass_control0 = 0x00000000,	\/* Don't pass control frames  *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control1	include/nss_gmac_dev.h	/^	gmac_pass_control1 = 0x00000040,	\/* Don't pass control frames  *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control1	ipq806x/include/nss_gmac_dev.h	/^	gmac_pass_control1 = 0x00000040,	\/* Don't pass control frames  *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control2	include/nss_gmac_dev.h	/^	gmac_pass_control2 = 0x00000080,	\/* Forwards all control frames*\/$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control2	ipq806x/include/nss_gmac_dev.h	/^	gmac_pass_control2 = 0x00000080,	\/* Forwards all control frames*\/$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control3	include/nss_gmac_dev.h	/^	gmac_pass_control3 = 0x000000C0,	\/* (PCS)Forwards ctrl frms that$/;"	e	enum:gmac_frame_filter_reg
gmac_pass_control3	ipq806x/include/nss_gmac_dev.h	/^	gmac_pass_control3 = 0x000000C0,	\/* (PCS)Forwards ctrl frms that$/;"	e	enum:gmac_frame_filter_reg
gmac_pause_low_thresh	include/nss_gmac_dev.h	/^	gmac_pause_low_thresh = 0x00000030,$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_low_thresh = 0x00000030,$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh0	include/nss_gmac_dev.h	/^	gmac_pause_low_thresh0 = 0x00000000,	\/*      4 slot time           *\/$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh0	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_low_thresh0 = 0x00000000,	\/*      4 slot time           *\/$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh1	include/nss_gmac_dev.h	/^	gmac_pause_low_thresh1 = 0x00000010,	\/*      28 slot time          *\/$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh1	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_low_thresh1 = 0x00000010,	\/*      28 slot time          *\/$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh2	include/nss_gmac_dev.h	/^	gmac_pause_low_thresh2 = 0x00000020,	\/*      144 slot time         *\/$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh2	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_low_thresh2 = 0x00000020,	\/*      144 slot time         *\/$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh3	include/nss_gmac_dev.h	/^	gmac_pause_low_thresh3 = 0x00000030,	\/* (PLT)thresh for pause$/;"	e	enum:gmac_flow_control_reg
gmac_pause_low_thresh3	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_low_thresh3 = 0x00000030,	\/* (PLT)thresh for pause$/;"	e	enum:gmac_flow_control_reg
gmac_pause_time_mask	include/nss_gmac_dev.h	/^	gmac_pause_time_mask = 0xFFFF0000,	\/* (PT) PAUSE TIME field$/;"	e	enum:gmac_flow_control_reg
gmac_pause_time_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_time_mask = 0xFFFF0000,	\/* (PT) PAUSE TIME field$/;"	e	enum:gmac_flow_control_reg
gmac_pause_time_shift	include/nss_gmac_dev.h	/^	gmac_pause_time_shift = 16,$/;"	e	enum:gmac_flow_control_reg
gmac_pause_time_shift	ipq806x/include/nss_gmac_dev.h	/^	gmac_pause_time_shift = 16,$/;"	e	enum:gmac_flow_control_reg
gmac_pcs_an_complete	include/nss_gmac_dev.h	/^	gmac_pcs_an_complete = 0x00000004,	\/* set when AN is complete in$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_pcs_an_complete	ipq806x/include/nss_gmac_dev.h	/^	gmac_pcs_an_complete = 0x00000004,	\/* set when AN is complete in$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_pcs_an_int_mask	include/nss_gmac_dev.h	/^	gmac_pcs_an_int_mask = 0x00000004,	\/* When set disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_pcs_an_int_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_pcs_an_int_mask = 0x00000004,	\/* When set disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_pcs_lnk_sts_change	include/nss_gmac_dev.h	/^	gmac_pcs_lnk_sts_change = 0x00000002,	\/* set if any lnk status change$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_pcs_lnk_sts_change	ipq806x/include/nss_gmac_dev.h	/^	gmac_pcs_lnk_sts_change = 0x00000002,	\/* set if any lnk status change$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_pcs_lnk_sts_int_mask	include/nss_gmac_dev.h	/^	gmac_pcs_lnk_sts_int_mask = 0x00000002,	\/* when set disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_pcs_lnk_sts_int_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_pcs_lnk_sts_int_mask = 0x00000002,	\/* when set disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_pmt_ctrl_status	include/nss_gmac_dev.h	/^	gmac_pmt_ctrl_status = 0x002c,	\/* PMT control and status register    *\/$/;"	e	enum:gmac_registers
gmac_pmt_ctrl_status	ipq806x/include/nss_gmac_dev.h	/^	gmac_pmt_ctrl_status = 0x002c,	\/* PMT control and status register    *\/$/;"	e	enum:gmac_registers
gmac_pmt_int_mask	include/nss_gmac_dev.h	/^	gmac_pmt_int_mask = 0x00000008,		\/* when set Disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_pmt_int_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_pmt_int_mask = 0x00000008,		\/* when set Disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_pmt_int_sts	include/nss_gmac_dev.h	/^	gmac_pmt_int_sts = 0x00000008,	\/* set whenever magic pkt\/wake-on-lan$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_pmt_int_sts	ipq806x/include/nss_gmac_dev.h	/^	gmac_pmt_int_sts = 0x00000008,	\/* set whenever magic pkt\/wake-on-lan$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_pmt_intr	include/nss_gmac_dev.h	/^	gmac_pmt_intr = 0x10000000,	\/* (GPI)Gmac subsystem interrupt      *\/$/;"	e	enum:dma_status_reg
gmac_pmt_intr	ipq806x/include/nss_gmac_dev.h	/^	gmac_pmt_intr = 0x10000000,	\/* (GPI)Gmac subsystem interrupt      *\/$/;"	e	enum:dma_status_reg
gmac_power_down	include/nss_gmac_dev.h	/^	uint32_t gmac_power_down;	\/* indicate to ISR whether the$/;"	m	struct:nss_gmac_dev
gmac_power_down	ipq806x/include/nss_gmac_dev.h	/^	uint32_t gmac_power_down;	\/* indicate to ISR whether the$/;"	m	struct:nss_gmac_dev
gmac_promiscuous_mode	include/nss_gmac_dev.h	/^	gmac_promiscuous_mode = 0x00000001,$/;"	e	enum:gmac_frame_filter_reg
gmac_promiscuous_mode	ipq806x/include/nss_gmac_dev.h	/^	gmac_promiscuous_mode = 0x00000001,$/;"	e	enum:gmac_frame_filter_reg
gmac_promiscuous_mode_off	include/nss_gmac_dev.h	/^	gmac_promiscuous_mode_off = 0x00000000,	\/* Receive filtered packets$/;"	e	enum:gmac_frame_filter_reg
gmac_promiscuous_mode_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_promiscuous_mode_off = 0x00000000,	\/* Receive filtered packets$/;"	e	enum:gmac_frame_filter_reg
gmac_promiscuous_mode_on	include/nss_gmac_dev.h	/^	gmac_promiscuous_mode_on = 0x00000001,	\/* Receive all frames         *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_promiscuous_mode_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_promiscuous_mode_on = 0x00000001,	\/* Receive all frames         *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_registers	include/nss_gmac_dev.h	/^enum gmac_registers {$/;"	g
gmac_registers	ipq806x/include/nss_gmac_dev.h	/^enum gmac_registers {$/;"	g
gmac_retry	include/nss_gmac_dev.h	/^	gmac_retry = 0x00000200,$/;"	e	enum:gmac_config_reg
gmac_retry	ipq806x/include/nss_gmac_dev.h	/^	gmac_retry = 0x00000200,$/;"	e	enum:gmac_config_reg
gmac_retry_disable	include/nss_gmac_dev.h	/^	gmac_retry_disable = 0x00000200,	\/* (DR)Disable Retry          *\/$/;"	e	enum:gmac_config_reg
gmac_retry_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_retry_disable = 0x00000200,	\/* (DR)Disable Retry          *\/$/;"	e	enum:gmac_config_reg
gmac_retry_enable	include/nss_gmac_dev.h	/^	gmac_retry_enable = 0x00000000,		\/* Enable retransmission as per$/;"	e	enum:gmac_config_reg
gmac_retry_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_retry_enable = 0x00000000,		\/* Enable retransmission as per$/;"	e	enum:gmac_config_reg
gmac_rgmii_int_mask	include/nss_gmac_dev.h	/^	gmac_rgmii_int_mask = 0x00000001,	\/* when set disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_rgmii_int_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_rgmii_int_mask = 0x00000001,	\/* when set disables the$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_rgmii_int_sts	include/nss_gmac_dev.h	/^	gmac_rgmii_int_sts = 0x00000001,	\/* set if any change in lnk$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_rgmii_int_sts	ipq806x/include/nss_gmac_dev.h	/^	gmac_rgmii_int_sts = 0x00000001,	\/* set if any change in lnk$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_rx	include/nss_gmac_dev.h	/^	gmac_rx = 0x00000004,$/;"	e	enum:gmac_config_reg
gmac_rx	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx = 0x00000004,$/;"	e	enum:gmac_config_reg
gmac_rx_disable	include/nss_gmac_dev.h	/^	gmac_rx_disable = 0x00000000,		\/* Receiver disable           *\/$/;"	e	enum:gmac_config_reg
gmac_rx_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_disable = 0x00000000,		\/* Receiver disable           *\/$/;"	e	enum:gmac_config_reg
gmac_rx_enable	include/nss_gmac_dev.h	/^	gmac_rx_enable = 0x00000004,		\/* (RE)Receiver enable        *\/$/;"	e	enum:gmac_config_reg
gmac_rx_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_enable = 0x00000004,		\/* (RE)Receiver enable        *\/$/;"	e	enum:gmac_config_reg
gmac_rx_flow_control	include/nss_gmac_dev.h	/^	gmac_rx_flow_control = 0x00000004,$/;"	e	enum:gmac_flow_control_reg
gmac_rx_flow_control	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_flow_control = 0x00000004,$/;"	e	enum:gmac_flow_control_reg
gmac_rx_flow_control_disable	include/nss_gmac_dev.h	/^	gmac_rx_flow_control_disable = 0x00000000,	\/* Disable Rx flow$/;"	e	enum:gmac_flow_control_reg
gmac_rx_flow_control_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_flow_control_disable = 0x00000000,	\/* Disable Rx flow$/;"	e	enum:gmac_flow_control_reg
gmac_rx_flow_control_enable	include/nss_gmac_dev.h	/^	gmac_rx_flow_control_enable = 0x00000004,	\/* (RFE)Enable Rx flow$/;"	e	enum:gmac_flow_control_reg
gmac_rx_flow_control_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_flow_control_enable = 0x00000004,	\/* (RFE)Enable Rx flow$/;"	e	enum:gmac_flow_control_reg
gmac_rx_ipc_offload	include/nss_gmac_dev.h	/^	gmac_rx_ipc_offload = 0x00000400,	\/* IPC checksum offload       *\/$/;"	e	enum:gmac_config_reg
gmac_rx_ipc_offload	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_ipc_offload = 0x00000400,	\/* IPC checksum offload       *\/$/;"	e	enum:gmac_config_reg
gmac_rx_own	include/nss_gmac_dev.h	/^	gmac_rx_own = 0x00002000,$/;"	e	enum:gmac_config_reg
gmac_rx_own	ipq806x/include/nss_gmac_dev.h	/^	gmac_rx_own = 0x00002000,$/;"	e	enum:gmac_config_reg
gmac_select_gmii	include/nss_gmac_dev.h	/^	gmac_select_gmii = 0x00000000,		\/* GMII mode                  *\/$/;"	e	enum:gmac_config_reg
gmac_select_gmii	ipq806x/include/nss_gmac_dev.h	/^	gmac_select_gmii = 0x00000000,		\/* GMII mode                  *\/$/;"	e	enum:gmac_config_reg
gmac_select_mii	include/nss_gmac_dev.h	/^	gmac_select_mii = 0x00008000,		\/* (PS)Port Select-MII mode   *\/$/;"	e	enum:gmac_config_reg
gmac_select_mii	ipq806x/include/nss_gmac_dev.h	/^	gmac_select_mii = 0x00008000,		\/* (PS)Port Select-MII mode   *\/$/;"	e	enum:gmac_config_reg
gmac_send_pause_frame	include/nss_gmac_dev.h	/^	gmac_send_pause_frame = 0x00000001,	\/* (FCB\/PBA)send pause$/;"	e	enum:gmac_flow_control_reg
gmac_send_pause_frame	ipq806x/include/nss_gmac_dev.h	/^	gmac_send_pause_frame = 0x00000001,	\/* (FCB\/PBA)send pause$/;"	e	enum:gmac_flow_control_reg
gmac_src_addr_filter	include/nss_gmac_dev.h	/^	gmac_src_addr_filter = 0x00000200,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_addr_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_src_addr_filter = 0x00000200,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_addr_filter_disable	include/nss_gmac_dev.h	/^	gmac_src_addr_filter_disable = 0x00000000,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_addr_filter_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_src_addr_filter_disable = 0x00000000,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_addr_filter_enable	include/nss_gmac_dev.h	/^	gmac_src_addr_filter_enable = 0x00000200,	\/* (SAF)Source Address$/;"	e	enum:gmac_frame_filter_reg
gmac_src_addr_filter_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_src_addr_filter_enable = 0x00000200,	\/* (SAF)Source Address$/;"	e	enum:gmac_frame_filter_reg
gmac_src_inv_addr_filter_dis	include/nss_gmac_dev.h	/^	gmac_src_inv_addr_filter_dis = 0x00000000,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_inv_addr_filter_dis	ipq806x/include/nss_gmac_dev.h	/^	gmac_src_inv_addr_filter_dis = 0x00000000,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_inv_addr_filter_en	include/nss_gmac_dev.h	/^	gmac_src_inv_addr_filter_en = 0x00000100,	\/* (SAIF)Inv Src Addr$/;"	e	enum:gmac_frame_filter_reg
gmac_src_inv_addr_filter_en	ipq806x/include/nss_gmac_dev.h	/^	gmac_src_inv_addr_filter_en = 0x00000100,	\/* (SAIF)Inv Src Addr$/;"	e	enum:gmac_frame_filter_reg
gmac_src_inva_addr_filter	include/nss_gmac_dev.h	/^	gmac_src_inva_addr_filter = 0x00000100,$/;"	e	enum:gmac_frame_filter_reg
gmac_src_inva_addr_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_src_inva_addr_filter = 0x00000100,$/;"	e	enum:gmac_frame_filter_reg
gmac_strings_priv_flags	ipq806x/nss_gmac_ethtool.c	/^static const char *gmac_strings_priv_flags[] = {$/;"	v	file:
gmac_tSInt_mask	include/nss_gmac_dev.h	/^	gmac_tSInt_mask = 0x00000200,		\/* when set disables the time$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_tSInt_mask	ipq806x/include/nss_gmac_dev.h	/^	gmac_tSInt_mask = 0x00000200,		\/* when set disables the time$/;"	e	enum:gmac_interrupt_mask_bit_definition
gmac_tc_enable	include/nss_gmac_dev.h	/^	gmac_tc_enable = 0x01000000,$/;"	e	enum:gmac_config_reg
gmac_tc_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_tc_enable = 0x01000000,$/;"	e	enum:gmac_config_reg
gmac_total_ticks	exports/nss_gmac_api_if.h	/^	uint32_t gmac_total_ticks;	\/**< Total clock ticks spend inside the GMAC *\/$/;"	m	struct:nss_gmac_stats
gmac_total_ticks	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t gmac_total_ticks;	\/**< Total clock ticks spend inside the GMAC *\/$/;"	m	struct:nss_gmac_stats
gmac_ts_addend	include/nss_gmac_dev.h	/^	gmac_ts_addend = 0x0718,	\/* Used by Software to readjust the$/;"	e	enum:gmac_registers
gmac_ts_addend	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_addend = 0x0718,	\/* Used by Software to readjust the$/;"	e	enum:gmac_registers
gmac_ts_control	include/nss_gmac_dev.h	/^	gmac_ts_control = 0x0700,	\/* Controls the Timestamp update logic:$/;"	e	enum:gmac_registers
gmac_ts_control	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_control = 0x0700,	\/* Controls the Timestamp update logic:$/;"	e	enum:gmac_registers
gmac_ts_high	include/nss_gmac_dev.h	/^	gmac_ts_high = 0x0708,		\/* 32 bit seconds(MS): only when$/;"	e	enum:gmac_registers
gmac_ts_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_high = 0x0708,		\/* 32 bit seconds(MS): only when$/;"	e	enum:gmac_registers
gmac_ts_high_update	include/nss_gmac_dev.h	/^	gmac_ts_high_update = 0x0710,	\/* 32bit seconds(MS) to be written\/added$/;"	e	enum:gmac_registers
gmac_ts_high_update	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_high_update = 0x0710,	\/* 32bit seconds(MS) to be written\/added$/;"	e	enum:gmac_registers
gmac_ts_high_word	include/nss_gmac_dev.h	/^	gmac_ts_high_word = 0x0724,	\/* Time Stamp Higher Word Register(Ver.$/;"	e	enum:gmac_registers
gmac_ts_high_word	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_high_word = 0x0724,	\/* Time Stamp Higher Word Register(Ver.$/;"	e	enum:gmac_registers
gmac_ts_int_sts	include/nss_gmac_dev.h	/^	gmac_ts_int_sts = 0x00000200,	\/* set if int generated due to TS (Read$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_ts_int_sts	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_int_sts = 0x00000200,	\/* set if int generated due to TS (Read$/;"	e	enum:gmac_interrupt_status_bit_definition
gmac_ts_low	include/nss_gmac_dev.h	/^	gmac_ts_low = 0x070C,		\/* 32 bit nano seconds(MS): only when$/;"	e	enum:gmac_registers
gmac_ts_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_low = 0x070C,		\/* 32 bit nano seconds(MS): only when$/;"	e	enum:gmac_registers
gmac_ts_low_update	include/nss_gmac_dev.h	/^	gmac_ts_low_update = 0x0714,	\/* 32 bit nano seconds(MS) to be$/;"	e	enum:gmac_registers
gmac_ts_low_update	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_low_update = 0x0714,	\/* 32 bit nano seconds(MS) to be$/;"	e	enum:gmac_registers
gmac_ts_status	include/nss_gmac_dev.h	/^	gmac_ts_status = 0x0728,	\/* Time Stamp Status Register         *\/$/;"	e	enum:gmac_registers
gmac_ts_status	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_status = 0x0728,	\/* Time Stamp Status Register         *\/$/;"	e	enum:gmac_registers
gmac_ts_sub_sec_incr	include/nss_gmac_dev.h	/^	gmac_ts_sub_sec_incr = 0x0704,	\/* 8 bit value by which sub second$/;"	e	enum:gmac_registers
gmac_ts_sub_sec_incr	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_sub_sec_incr = 0x0704,	\/* 8 bit value by which sub second$/;"	e	enum:gmac_registers
gmac_ts_target_time_high	include/nss_gmac_dev.h	/^	gmac_ts_target_time_high = 0x071C,\/* 32 bit seconds(MS) to be compared$/;"	e	enum:gmac_registers
gmac_ts_target_time_high	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_target_time_high = 0x071C,\/* 32 bit seconds(MS) to be compared$/;"	e	enum:gmac_registers
gmac_ts_target_time_low	include/nss_gmac_dev.h	/^	gmac_ts_target_time_low = 0x0720,	\/* 32 bit nano seconds(MS) to be$/;"	e	enum:gmac_registers
gmac_ts_target_time_low	ipq806x/include/nss_gmac_dev.h	/^	gmac_ts_target_time_low = 0x0720,	\/* 32 bit nano seconds(MS) to be$/;"	e	enum:gmac_registers
gmac_twokpe	include/nss_gmac_dev.h	/^	gmac_twokpe = 0x08000000,$/;"	e	enum:gmac_config_reg
gmac_twokpe	ipq806x/include/nss_gmac_dev.h	/^	gmac_twokpe = 0x08000000,$/;"	e	enum:gmac_config_reg
gmac_twokpe_disable	include/nss_gmac_dev.h	/^	gmac_twokpe_disable = 0x00000000,$/;"	e	enum:gmac_config_reg
gmac_twokpe_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_twokpe_disable = 0x00000000,$/;"	e	enum:gmac_config_reg
gmac_twokpe_enable	include/nss_gmac_dev.h	/^	gmac_twokpe_enable = 0x08000000,$/;"	e	enum:gmac_config_reg
gmac_twokpe_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_twokpe_enable = 0x08000000,$/;"	e	enum:gmac_config_reg
gmac_tx	include/nss_gmac_dev.h	/^	gmac_tx = 0x00000008,$/;"	e	enum:gmac_config_reg
gmac_tx	ipq806x/include/nss_gmac_dev.h	/^	gmac_tx = 0x00000008,$/;"	e	enum:gmac_config_reg
gmac_tx_disable	include/nss_gmac_dev.h	/^	gmac_tx_disable = 0x00000000,		\/* Transmitter disable        *\/$/;"	e	enum:gmac_config_reg
gmac_tx_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_tx_disable = 0x00000000,		\/* Transmitter disable        *\/$/;"	e	enum:gmac_config_reg
gmac_tx_enable	include/nss_gmac_dev.h	/^	gmac_tx_enable = 0x00000008,		\/* (TE)Transmitter enable     *\/$/;"	e	enum:gmac_config_reg
gmac_tx_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_tx_enable = 0x00000008,		\/* (TE)Transmitter enable     *\/$/;"	e	enum:gmac_config_reg
gmac_tx_flow_control	include/nss_gmac_dev.h	/^	gmac_tx_flow_control = 0x00000002,$/;"	e	enum:gmac_flow_control_reg
gmac_tx_flow_control	ipq806x/include/nss_gmac_dev.h	/^	gmac_tx_flow_control = 0x00000002,$/;"	e	enum:gmac_flow_control_reg
gmac_tx_flow_control_disable	include/nss_gmac_dev.h	/^	gmac_tx_flow_control_disable = 0x00000000,	\/* Disable flow$/;"	e	enum:gmac_flow_control_reg
gmac_tx_flow_control_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_tx_flow_control_disable = 0x00000000,	\/* Disable flow$/;"	e	enum:gmac_flow_control_reg
gmac_tx_flow_control_enable	include/nss_gmac_dev.h	/^	gmac_tx_flow_control_enable = 0x00000002,	\/* (TFE)Enable Tx flow$/;"	e	enum:gmac_flow_control_reg
gmac_tx_flow_control_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_tx_flow_control_enable = 0x00000002,	\/* (TFE)Enable Tx flow$/;"	e	enum:gmac_flow_control_reg
gmac_ucast_hash_filter	include/nss_gmac_dev.h	/^	gmac_ucast_hash_filter = 0x00000002,$/;"	e	enum:gmac_frame_filter_reg
gmac_ucast_hash_filter	ipq806x/include/nss_gmac_dev.h	/^	gmac_ucast_hash_filter = 0x00000002,$/;"	e	enum:gmac_frame_filter_reg
gmac_ucast_hash_filter_off	include/nss_gmac_dev.h	/^	gmac_ucast_hash_filter_off = 0x00000000,\/* perfect filtering only     *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_ucast_hash_filter_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_ucast_hash_filter_off = 0x00000000,\/* perfect filtering only     *\/$/;"	e	enum:gmac_frame_filter_reg
gmac_ucast_hash_filter_on	include/nss_gmac_dev.h	/^	gmac_ucast_hash_filter_on = 0x00000002,	\/* (HUC)Unicast Hash filtering$/;"	e	enum:gmac_frame_filter_reg
gmac_ucast_hash_filter_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_ucast_hash_filter_on = 0x00000002,	\/* (HUC)Unicast Hash filtering$/;"	e	enum:gmac_frame_filter_reg
gmac_unicast_pause_frame	include/nss_gmac_dev.h	/^	gmac_unicast_pause_frame = 0x00000008,$/;"	e	enum:gmac_flow_control_reg
gmac_unicast_pause_frame	ipq806x/include/nss_gmac_dev.h	/^	gmac_unicast_pause_frame = 0x00000008,$/;"	e	enum:gmac_flow_control_reg
gmac_unicast_pause_frame_off	include/nss_gmac_dev.h	/^	gmac_unicast_pause_frame_off = 0x00000000,\/* Detect only pause frame$/;"	e	enum:gmac_flow_control_reg
gmac_unicast_pause_frame_off	ipq806x/include/nss_gmac_dev.h	/^	gmac_unicast_pause_frame_off = 0x00000000,\/* Detect only pause frame$/;"	e	enum:gmac_flow_control_reg
gmac_unicast_pause_frame_on	include/nss_gmac_dev.h	/^	gmac_unicast_pause_frame_on = 0x00000008,\/* (UP)Detect pause frame$/;"	e	enum:gmac_flow_control_reg
gmac_unicast_pause_frame_on	ipq806x/include/nss_gmac_dev.h	/^	gmac_unicast_pause_frame_on = 0x00000008,\/* (UP)Detect pause frame$/;"	e	enum:gmac_flow_control_reg
gmac_version	include/nss_gmac_dev.h	/^	gmac_version = 0x0020,		\/* GMAC Core Version Register         *\/$/;"	e	enum:gmac_registers
gmac_version	ipq806x/include/nss_gmac_dev.h	/^	gmac_version = 0x0020,		\/* GMAC Core Version Register         *\/$/;"	e	enum:gmac_registers
gmac_vlan	include/nss_gmac_dev.h	/^	gmac_vlan = 0x001c,		\/* VLAN tag Register (IEEE 802.1Q)    *\/$/;"	e	enum:gmac_registers
gmac_vlan	ipq806x/include/nss_gmac_dev.h	/^	gmac_vlan = 0x001c,		\/* VLAN tag Register (IEEE 802.1Q)    *\/$/;"	e	enum:gmac_registers
gmac_wakeup_addr	include/nss_gmac_dev.h	/^	gmac_wakeup_addr = 0x0028,	\/* GMAC wake-up frame filter adrress$/;"	e	enum:gmac_registers
gmac_wakeup_addr	ipq806x/include/nss_gmac_dev.h	/^	gmac_wakeup_addr = 0x0028,	\/* GMAC wake-up frame filter adrress$/;"	e	enum:gmac_registers
gmac_watchdog	include/nss_gmac_dev.h	/^	gmac_watchdog = 0x00800000,$/;"	e	enum:gmac_config_reg
gmac_watchdog	ipq806x/include/nss_gmac_dev.h	/^	gmac_watchdog = 0x00800000,$/;"	e	enum:gmac_config_reg
gmac_watchdog_disable	include/nss_gmac_dev.h	/^	gmac_watchdog_disable = 0x00800000,	\/* (WD)Disable watchdog timer$/;"	e	enum:gmac_config_reg
gmac_watchdog_disable	ipq806x/include/nss_gmac_dev.h	/^	gmac_watchdog_disable = 0x00800000,	\/* (WD)Disable watchdog timer$/;"	e	enum:gmac_config_reg
gmac_watchdog_enable	include/nss_gmac_dev.h	/^	gmac_watchdog_enable = 0x00000000,	\/* Enable watchdog timer      *\/$/;"	e	enum:gmac_config_reg
gmac_watchdog_enable	ipq806x/include/nss_gmac_dev.h	/^	gmac_watchdog_enable = 0x00000000,	\/* Enable watchdog timer      *\/$/;"	e	enum:gmac_config_reg
gmac_workqueue	include/nss_gmac_dev.h	/^	struct workqueue_struct *gmac_workqueue;$/;"	m	struct:nss_gmac_global_ctx	typeref:struct:nss_gmac_global_ctx::workqueue_struct
gmac_workqueue	ipq806x/include/nss_gmac_dev.h	/^	struct workqueue_struct *gmac_workqueue;$/;"	m	struct:nss_gmac_global_ctx	typeref:struct:nss_gmac_global_ctx::workqueue_struct
gmac_workqueue_name	include/nss_gmac_dev.h	/^	char *gmac_workqueue_name;$/;"	m	struct:nss_gmac_global_ctx
gmac_workqueue_name	ipq806x/include/nss_gmac_dev.h	/^	char *gmac_workqueue_name;$/;"	m	struct:nss_gmac_global_ctx
gmac_worst_case_ticks	exports/nss_gmac_api_if.h	/^	uint32_t gmac_worst_case_ticks;	\/**< Worst case iteration of the GMAC in ticks *\/$/;"	m	struct:nss_gmac_stats
gmac_worst_case_ticks	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t gmac_worst_case_ticks;	\/**< Worst case iteration of the GMAC in ticks *\/$/;"	m	struct:nss_gmac_stats
gmacwork	include/nss_gmac_dev.h	/^	struct delayed_work gmacwork;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::delayed_work
gmacwork	ipq806x/include/nss_gmac_dev.h	/^	struct delayed_work gmacwork;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::delayed_work
gmii_busy	include/nss_gmac_dev.h	/^	gmii_busy = 0x00000001,		\/* (GB)GMII interface is busy         *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_busy	ipq806x/include/nss_gmac_dev.h	/^	gmii_busy = 0x00000001,		\/* (GB)GMII interface is busy         *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk0	include/nss_gmac_dev.h	/^	gmii_csr_clk0 = 0x00000000,	\/*                      60-100 MHz    *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk0	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk0 = 0x00000000,	\/*                      60-100 MHz    *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk1	include/nss_gmac_dev.h	/^	gmii_csr_clk1 = 0x00000004,	\/*                      100-150 MHz   *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk1	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk1 = 0x00000004,	\/*                      100-150 MHz   *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk2	include/nss_gmac_dev.h	/^	gmii_csr_clk2 = 0x00000008,	\/*                      20-35 MHz     *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk2	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk2 = 0x00000008,	\/*                      20-35 MHz     *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk3	include/nss_gmac_dev.h	/^	gmii_csr_clk3 = 0x0000000C,	\/*                      35-60 MHz     *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk3	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk3 = 0x0000000C,	\/*                      35-60 MHz     *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk4	include/nss_gmac_dev.h	/^	gmii_csr_clk4 = 0x00000010,	\/*                      150-250 MHz   *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk4	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk4 = 0x00000010,	\/*                      150-250 MHz   *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk5	include/nss_gmac_dev.h	/^	gmii_csr_clk5 = 0x00000014,	\/* (CR)CSR Clock Range  250-300 MHz   *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk5	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk5 = 0x00000014,	\/* (CR)CSR Clock Range  250-300 MHz   *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk_mask	include/nss_gmac_dev.h	/^	gmii_csr_clk_mask = 0x0000003C,	\/* CSR Clock bit Mask                 *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk_mask	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk_mask = 0x0000003C,	\/* CSR Clock bit Mask                 *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk_shift	include/nss_gmac_dev.h	/^	gmii_csr_clk_shift = 2,		\/* CSR Clock bit Shift                *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_csr_clk_shift	ipq806x/include/nss_gmac_dev.h	/^	gmii_csr_clk_shift = 2,		\/* CSR Clock bit Shift                *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_data_mask	include/nss_gmac_dev.h	/^	gmii_data_mask = 0x0000FFFF,		\/* (GD)GMII Data              *\/$/;"	e	enum:gmac_gmii_data_reg
gmii_data_mask	ipq806x/include/nss_gmac_dev.h	/^	gmii_data_mask = 0x0000FFFF,		\/* (GD)GMII Data              *\/$/;"	e	enum:gmac_gmii_data_reg
gmii_dev_mask	include/nss_gmac_dev.h	/^	gmii_dev_mask = 0x0000F800,	\/* (PA)GMII device address            *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_dev_mask	ipq806x/include/nss_gmac_dev.h	/^	gmii_dev_mask = 0x0000F800,	\/* (PA)GMII device address            *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_dev_shift	include/nss_gmac_dev.h	/^	gmii_dev_shift = 11,$/;"	e	enum:gmac_gmii_addr_reg
gmii_dev_shift	ipq806x/include/nss_gmac_dev.h	/^	gmii_dev_shift = 11,$/;"	e	enum:gmac_gmii_addr_reg
gmii_read	include/nss_gmac_dev.h	/^	gmii_read = 0x00000000,		\/* Read from register                 *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_read	ipq806x/include/nss_gmac_dev.h	/^	gmii_read = 0x00000000,		\/* Read from register                 *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_reg_mask	include/nss_gmac_dev.h	/^	gmii_reg_mask = 0x000007C0,	\/* (GR)GMII register in selected Phy  *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_reg_mask	ipq806x/include/nss_gmac_dev.h	/^	gmii_reg_mask = 0x000007C0,	\/* (GR)GMII register in selected Phy  *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_reg_shift	include/nss_gmac_dev.h	/^	gmii_reg_shift = 6,$/;"	e	enum:gmac_gmii_addr_reg
gmii_reg_shift	ipq806x/include/nss_gmac_dev.h	/^	gmii_reg_shift = 6,$/;"	e	enum:gmac_gmii_addr_reg
gmii_write	include/nss_gmac_dev.h	/^	gmii_write = 0x00000002,		\/* (GW)Write to register      *\/$/;"	e	enum:gmac_gmii_addr_reg
gmii_write	ipq806x/include/nss_gmac_dev.h	/^	gmii_write = 0x00000002,		\/* (GW)Write to register      *\/$/;"	e	enum:gmac_gmii_addr_reg
hw_errs	exports/nss_gmac_api_if.h	/^	uint32_t hw_errs[10];		\/**< GMAC DMA error counters *\/$/;"	m	struct:nss_gmac_stats
hw_errs	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t hw_errs[10];		\/**< GMAC DMA error counters *\/$/;"	m	struct:nss_gmac_stats
initial_registers	include/nss_gmac_dev.h	/^enum initial_registers {$/;"	g
initial_registers	ipq806x/include/nss_gmac_dev.h	/^enum initial_registers {$/;"	g
interface	exports/nss_gmac_api_if.h	/^	int32_t interface;		\/**< Interface number *\/$/;"	m	struct:nss_gmac_stats
interface	ipq806x/exports/nss_gmac_api_if.h	/^	int32_t interface;		\/**< Interface number *\/$/;"	m	struct:nss_gmac_stats
ipv6_pssthrgh_enable	ipq806x/nss_gmac_ctrl.c	/^EXPORT_SYMBOL(ipv6_pssthrgh_enable);$/;"	v
ipv6_pssthrgh_enable	ipq806x/nss_gmac_ctrl.c	/^int ipv6_pssthrgh_enable = 0;$/;"	v
ipv6_pssthrgh_read	ipq806x/nss_gmac_ctrl.c	/^static int ipv6_pssthrgh_read( char *buffer, char **start, off_t offset, int count, int *eof, void *data)$/;"	f	file:
ipv6_pssthrgh_write	ipq806x/nss_gmac_ctrl.c	/^static  int ipv6_pssthrgh_write( struct file *file, const char *buffer, unsigned long count, void *unused_data)$/;"	f	file:
lan0_isFullDuplex	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan0_isFullDuplex;$/;"	m	struct:mii_ioctl_priv_data	file:
lan0_speed	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan0_speed;$/;"	m	struct:mii_ioctl_priv_data	file:
lan1_isFullDuplex	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan1_isFullDuplex;$/;"	m	struct:mii_ioctl_priv_data	file:
lan1_speed	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan1_speed;$/;"	m	struct:mii_ioctl_priv_data	file:
lan2_isFullDuplex	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan2_isFullDuplex;$/;"	m	struct:mii_ioctl_priv_data	file:
lan2_speed	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan2_speed;$/;"	m	struct:mii_ioctl_priv_data	file:
lan3_isFullDuplex	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan3_isFullDuplex;$/;"	m	struct:mii_ioctl_priv_data	file:
lan3_speed	ipq806x/nss_gmac_ctrl.c	/^	uint32_t lan3_speed;$/;"	m	struct:mii_ioctl_priv_data	file:
lan_led_ctrl_cleanup	ipq806x/nss_gmac_ctrl.c	/^static void lan_led_ctrl_cleanup(void)$/;"	f	file:
lan_led_ctrl_init	ipq806x/nss_gmac_ctrl.c	/^static void lan_led_ctrl_init(void)$/;"	f	file:
lan_led_ctrl_read	ipq806x/nss_gmac_ctrl.c	/^static int lan_led_ctrl_read( char *page, char **start, off_t offset, int count, int *eof, void *data)$/;"	f	file:
lan_led_ctrl_write	ipq806x/nss_gmac_ctrl.c	/^static int lan_led_ctrl_write( struct file *file, const char *buffer, unsigned long count, void *unused_data)$/;"	f	file:
leftdata	ipq806x/nss_gmac_tx_rx_offload.c	/^        u64 leftdata;$/;"	m	struct:msg_data	file:
length	include/nss_gmac_dev.h	/^	uint32_t length;	\/* Buffer 1  and Buffer 2 length      *\/$/;"	m	struct:dma_desc
length	ipq806x/include/nss_gmac_dev.h	/^	uint32_t length;	\/* Buffer 1  and Buffer 2 length      *\/$/;"	m	struct:dma_desc
link_mutex	include/nss_gmac_dev.h	/^	struct mutex link_mutex;	\/* Lock to protect link status change *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::mutex
link_mutex	ipq806x/include/nss_gmac_dev.h	/^	struct mutex link_mutex;	\/* Lock to protect link status change *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::mutex
link_state	exports/nss_gmac_api_if.h	/^	int (*link_state)(void *ctx, uint32_t link_state);$/;"	m	struct:nss_gmac_data_plane_ops
link_state	include/nss_gmac_dev.h	/^	uint32_t link_state;	\/* Link status as reported by the Phy         *\/$/;"	m	struct:nss_gmac_dev
link_state	ipq806x/exports/nss_gmac_api_if.h	/^	int (*link_state)(void *ctx, uint32_t link_state);$/;"	m	struct:nss_gmac_data_plane_ops
link_state	ipq806x/include/nss_gmac_dev.h	/^	uint32_t link_state;	\/* Link status as reported by the Phy         *\/$/;"	m	struct:nss_gmac_dev
loop_back_mode	include/nss_gmac_dev.h	/^	uint32_t loop_back_mode;\/* Loopback status of the Phy                 *\/$/;"	m	struct:nss_gmac_dev
loop_back_mode	ipq806x/include/nss_gmac_dev.h	/^	uint32_t loop_back_mode;\/* Loopback status of the Phy                 *\/$/;"	m	struct:nss_gmac_dev
loops	ipq806x/nss_gmac_ctrl.c	/^	int loops;$/;"	m	struct:switch_phy_timer	file:
mac_addr	exports/nss_gmac_api_if.h	/^	int (*mac_addr)(void *ctx, uint8_t *addr);$/;"	m	struct:nss_gmac_data_plane_ops
mac_addr	include/msm_nss_gmac.h	/^	uint8_t  mac_addr[6];$/;"	m	struct:msm_nss_gmac_platform_data
mac_addr	ipq806x/exports/nss_gmac_api_if.h	/^	int (*mac_addr)(void *ctx, uint8_t *addr);$/;"	m	struct:nss_gmac_data_plane_ops
mac_addr	ipq806x/include/msm_nss_gmac.h	/^	uint8_t  mac_addr[6];$/;"	m	struct:msm_nss_gmac_platform_data
mac_base	include/nss_gmac_dev.h	/^	uint32_t mac_base;	\/* base address of MAC registers              *\/$/;"	m	struct:nss_gmac_dev
mac_base	ipq806x/include/nss_gmac_dev.h	/^	uint32_t mac_base;	\/* base address of MAC registers              *\/$/;"	m	struct:nss_gmac_dev
mac_id	include/nss_gmac_dev.h	/^	uint32_t mac_id;$/;"	m	struct:nss_gmac_speed_ctx
mac_id	ipq806x/include/nss_gmac_dev.h	/^	uint32_t mac_id;$/;"	m	struct:nss_gmac_speed_ctx
macid	include/nss_gmac_dev.h	/^	uint32_t macid;		\/* Sequence number of Mac on the platform     *\/$/;"	m	struct:nss_gmac_dev
macid	ipq806x/include/nss_gmac_dev.h	/^	uint32_t macid;		\/* Sequence number of Mac on the platform     *\/$/;"	m	struct:nss_gmac_dev
mdc_clk_div	include/nss_gmac_dev.h	/^	uint32_t mdc_clk_div;	\/* Clock divider value programmed in the$/;"	m	struct:nss_gmac_dev
mdc_clk_div	ipq806x/include/nss_gmac_dev.h	/^	uint32_t mdc_clk_div;	\/* Clock divider value programmed in the$/;"	m	struct:nss_gmac_dev
memres	include/nss_gmac_dev.h	/^	struct resource *memres;	\/* memory resource                    *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::resource
memres	ipq806x/include/nss_gmac_dev.h	/^	struct resource *memres;	\/* memory resource                    *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::resource
mii_duplex_mode	include/nss_gmac_dev.h	/^enum mii_duplex_mode {$/;"	g
mii_duplex_mode	ipq806x/include/nss_gmac_dev.h	/^enum mii_duplex_mode {$/;"	g
mii_ioctl_priv_data	ipq806x/nss_gmac_ctrl.c	/^typedef struct mii_ioctl_priv_data {$/;"	s	file:
mii_ioctl_priv_data	ipq806x/nss_gmac_ctrl.c	/^} mii_ioctl_priv_data;$/;"	t	typeref:struct:mii_ioctl_priv_data	file:
mii_link_speed	include/nss_gmac_dev.h	/^enum mii_link_speed {$/;"	g
mii_link_speed	ipq806x/include/nss_gmac_dev.h	/^enum mii_link_speed {$/;"	g
mii_link_status	include/nss_gmac_dev.h	/^enum mii_link_status {$/;"	g
mii_link_status	ipq806x/include/nss_gmac_dev.h	/^enum mii_link_status {$/;"	g
mii_loop_back	include/nss_gmac_dev.h	/^enum mii_loop_back {$/;"	g
mii_loop_back	ipq806x/include/nss_gmac_dev.h	/^enum mii_loop_back {$/;"	g
miibus	include/nss_gmac_dev.h	/^	struct mii_bus *miibus;		\/* MDIO bus associated with this GMAC *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::mii_bus
miibus	ipq806x/include/nss_gmac_dev.h	/^	struct mii_bus *miibus;		\/* MDIO bus associated with this GMAC *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::mii_bus
miibus_get	ipq806x/nss_gmac_ctrl.c	/^static void miibus_get(void)$/;"	f	file:
mirror_wan_cleanup	ipq806x/nss_gmac_ctrl.c	/^static void mirror_wan_cleanup(void)$/;"	f	file:
mirror_wan_init	ipq806x/nss_gmac_ctrl.c	/^static void mirror_wan_init(void)$/;"	f	file:
mirror_wan_read	ipq806x/nss_gmac_ctrl.c	/^static int mirror_wan_read( char *page, char **start, off_t offset, int count, int *eof, void *data)$/;"	f	file:
mirror_wan_write	ipq806x/nss_gmac_ctrl.c	/^static int mirror_wan_write( struct file *file, const char *buffer, unsigned long count, void *unused_data)$/;"	f	file:
mmc_enable	include/nss_gmac_dev.h	/^enum mmc_enable {$/;"	g
mmc_enable	ipq806x/include/nss_gmac_dev.h	/^enum mmc_enable {$/;"	g
mmc_ip_related	include/nss_gmac_dev.h	/^enum mmc_ip_related {$/;"	g
mmc_ip_related	ipq806x/include/nss_gmac_dev.h	/^enum mmc_ip_related {$/;"	g
msg_data	ipq806x/nss_gmac_tx_rx_offload.c	/^struct msg_data{$/;"	s	file:
msg_recive	ipq806x/nss_gmac_tx_rx_offload.c	/^int msg_recive = 0;$/;"	v
msm_nss_gmac_platform_data	include/msm_nss_gmac.h	/^struct msm_nss_gmac_platform_data {$/;"	s
msm_nss_gmac_platform_data	ipq806x/include/msm_nss_gmac.h	/^struct msm_nss_gmac_platform_data {$/;"	s
napi	include/nss_gmac_dev.h	/^	struct napi_struct napi;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::napi_struct
napi	ipq806x/include/nss_gmac_dev.h	/^	struct napi_struct napi;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::napi_struct
need_blink_wan_led	ipq806x/nss_gmac_tx_rx_offload.c	/^static int need_blink_wan_led = 1;$/;"	v	file:
need_drop	ipq806x/nss_gmac_tx_rx_offload.c	/^int need_drop = 0;$/;"	v
netdev	include/nss_gmac_dev.h	/^	struct net_device *netdev;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::net_device
netdev	ipq806x/include/nss_gmac_dev.h	/^	struct net_device *netdev;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::net_device
nl_sk	ipq806x/nss_gmac_tx_rx_offload.c	/^struct sock *nl_sk = NULL;$/;"	v	typeref:struct:sock
nss_base	include/nss_gmac_dev.h	/^	uint8_t *nss_base;	\/* Base address of NSS GMACs'$/;"	m	struct:nss_gmac_global_ctx
nss_base	ipq806x/include/nss_gmac_dev.h	/^	uint8_t *nss_base;	\/* Base address of NSS GMACs'$/;"	m	struct:nss_gmac_global_ctx
nss_gmac	include/nss_gmac_dev.h	/^	struct nss_gmac_dev *nss_gmac[NSS_MAX_GMACS];$/;"	m	struct:nss_gmac_global_ctx	typeref:struct:nss_gmac_global_ctx::nss_gmac_dev
nss_gmac	ipq806x/include/nss_gmac_dev.h	/^	struct nss_gmac_dev *nss_gmac[NSS_MAX_GMACS];$/;"	m	struct:nss_gmac_global_ctx	typeref:struct:nss_gmac_global_ctx::nss_gmac_dev
nss_gmac_adjust_link	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_adjust_link(struct net_device *netdev)$/;"	f
nss_gmac_ath_phy_disable_802az	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_ath_phy_disable_802az(struct phy_device *phydev)$/;"	f
nss_gmac_ath_phy_disable_smart_802az	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_ath_phy_disable_smart_802az(struct phy_device *phydev)$/;"	f
nss_gmac_ath_phy_mmd_rd	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_ath_phy_mmd_rd(struct phy_device *phydev,$/;"	f
nss_gmac_ath_phy_mmd_wr	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_ath_phy_mmd_wr(struct phy_device *phydev,$/;"	f
nss_gmac_attach	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_attach(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_back_off_limit	ipq806x/nss_gmac_dev.c	/^void nss_gmac_back_off_limit(struct nss_gmac_dev *gmacdev, uint32_t value)$/;"	f
nss_gmac_broadcast_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_broadcast_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_check_link	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_check_link(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_check_pcs_status	ipq806x/nss_gmac_dev.c	/^static void nss_gmac_check_pcs_status(struct nss_gmac_dev *gmacdev)$/;"	f	file:
nss_gmac_check_phy_init	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_check_phy_init(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_check_reg_bits	include/nss_gmac_dev.h	/^static inline bool nss_gmac_check_reg_bits(uint32_t *regbase,$/;"	f
nss_gmac_check_reg_bits	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_check_reg_bits(uint32_t *regbase,$/;"	f
nss_gmac_check_sgmii_link	ipq806x/nss_gmac_dev.c	/^static void nss_gmac_check_sgmii_link(struct nss_gmac_dev *gmacdev)$/;"	f	file:
nss_gmac_clear_all_regs	ipq806x/nss_gmac_init.c	/^static void nss_gmac_clear_all_regs(uint32_t *nss_base)$/;"	f	file:
nss_gmac_clear_interrupt	include/nss_gmac_dev.h	/^static inline void nss_gmac_clear_interrupt(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_clear_interrupt	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_clear_interrupt(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_clear_reg_bits	include/nss_gmac_dev.h	/^static inline void nss_gmac_clear_reg_bits(uint32_t *regbase,$/;"	f
nss_gmac_clear_reg_bits	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_clear_reg_bits(uint32_t *regbase,$/;"	f
nss_gmac_common_deinit	ipq806x/nss_gmac_init.c	/^void nss_gmac_common_deinit(struct nss_gmac_global_ctx *ctx)$/;"	f
nss_gmac_common_init	ipq806x/nss_gmac_init.c	/^int32_t nss_gmac_common_init(struct nss_gmac_global_ctx *ctx)$/;"	f
nss_gmac_config_flow_control	ipq806x/nss_gmac_dev.c	/^void nss_gmac_config_flow_control(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_copy_stats	ipq806x/nss_gmac_tx_rx_offload.c	/^static void nss_gmac_copy_stats(struct nss_gmac_dev *gmacdev,$/;"	f	file:
nss_gmac_copyright	include/nss_gmac_dev.h	/^static const uint8_t nss_gmac_copyright[] =$/;"	v
nss_gmac_copyright	ipq806x/include/nss_gmac_dev.h	/^static const uint8_t nss_gmac_copyright[] =$/;"	v
nss_gmac_data_plane_ops	exports/nss_gmac_api_if.h	/^struct nss_gmac_data_plane_ops {$/;"	s
nss_gmac_data_plane_ops	ipq806x/exports/nss_gmac_api_if.h	/^struct nss_gmac_data_plane_ops {$/;"	s
nss_gmac_deferral_check_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_deferral_check_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_deinit_mdiobus	ipq806x/nss_gmac_mdiobus.c	/^void nss_gmac_deinit_mdiobus(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_deregister_driver	ipq806x/nss_gmac_ctrl.c	/^void __exit nss_gmac_deregister_driver(void)$/;"	f
nss_gmac_detach	ipq806x/nss_gmac_dev.c	/^void nss_gmac_detach(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_dev	include/nss_gmac_dev.h	/^struct nss_gmac_dev {$/;"	s
nss_gmac_dev	ipq806x/include/nss_gmac_dev.h	/^struct nss_gmac_dev {$/;"	s
nss_gmac_dev_init	ipq806x/nss_gmac_init.c	/^void nss_gmac_dev_init(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_dev_set_speed	ipq806x/nss_gmac_init.c	/^int32_t nss_gmac_dev_set_speed(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_crs	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_crs(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_dma_rx	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_dma_rx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_dma_tx	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_dma_tx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_interrupt	include/nss_gmac_dev.h	/^static inline void nss_gmac_disable_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_disable_interrupt	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_disable_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_disable_interrupt_all	include/nss_gmac_dev.h	/^static inline void nss_gmac_disable_interrupt_all(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_interrupt_all	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_disable_interrupt_all(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_mac_interrupt	include/nss_gmac_dev.h	/^static inline void nss_gmac_disable_mac_interrupt(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_mac_interrupt	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_disable_mac_interrupt(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_disable_mmc_ipc_rx_interrupt	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_mmc_ipc_rx_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_disable_mmc_rx_interrupt	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_mmc_rx_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_disable_mmc_tx_interrupt	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_mmc_tx_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_disable_rx_chksum_offload	ipq806x/nss_gmac_dev.c	/^void nss_gmac_disable_rx_chksum_offload(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_dma_axi_bus_mode_init	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_dma_axi_bus_mode_init(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_dma_bus_mode_init	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_dma_bus_mode_init(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_dma_control_init	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_dma_control_init(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_do_common_init	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_do_common_init(struct platform_device *pdev)$/;"	f	file:
nss_gmac_driver_string	include/nss_gmac_dev.h	/^static const uint8_t nss_gmac_driver_string[] =$/;"	v
nss_gmac_driver_string	ipq806x/include/nss_gmac_dev.h	/^static const uint8_t nss_gmac_driver_string[] =$/;"	v
nss_gmac_driver_version	include/nss_gmac_dev.h	/^static const uint8_t nss_gmac_driver_version[] = "1.0";$/;"	v
nss_gmac_driver_version	ipq806x/include/nss_gmac_dev.h	/^static const uint8_t nss_gmac_driver_version[] = "1.0";$/;"	v
nss_gmac_drv	ipq806x/nss_gmac_ctrl.c	/^static struct platform_driver nss_gmac_drv = {$/;"	v	typeref:struct:platform_driver	file:
nss_gmac_dst_addr_filter_normal	ipq806x/nss_gmac_dev.c	/^void nss_gmac_dst_addr_filter_normal(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_dt_ids	ipq806x/nss_gmac_ctrl.c	/^static struct of_device_id nss_gmac_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
nss_gmac_enable_crs	ipq806x/nss_gmac_dev.c	/^void nss_gmac_enable_crs(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_enable_dma_rx	ipq806x/nss_gmac_dev.c	/^void nss_gmac_enable_dma_rx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_enable_dma_tx	ipq806x/nss_gmac_dev.c	/^void nss_gmac_enable_dma_tx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_enable_interrupt	include/nss_gmac_dev.h	/^static inline void nss_gmac_enable_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_enable_interrupt	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_enable_interrupt(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_enable_rx_chksum_offload	ipq806x/nss_gmac_dev.c	/^void nss_gmac_enable_rx_chksum_offload(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_ethtool_ops	ipq806x/nss_gmac_ethtool.c	/^struct ethtool_ops nss_gmac_ethtool_ops = {$/;"	v	typeref:struct:ethtool_ops
nss_gmac_ethtool_register	ipq806x/nss_gmac_ethtool.c	/^void nss_gmac_ethtool_register(struct net_device *netdev)$/;"	f
nss_gmac_ethtool_stats	ipq806x/nss_gmac_ethtool.c	/^struct nss_gmac_ethtool_stats {$/;"	s	file:
nss_gmac_event_receive	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_event_receive);$/;"	v
nss_gmac_event_receive	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_event_receive(void *if_ctx, int ev_type,$/;"	f
nss_gmac_exit_network_interfaces	ipq806x/nss_gmac_ctrl.c	/^void nss_gmac_exit_network_interfaces(void)$/;"	f
nss_gmac_flush_tx_fifo	ipq806x/nss_gmac_dev.c	/^void nss_gmac_flush_tx_fifo(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_frame_burst_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_frame_burst_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_frame_filter_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_frame_filter_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_desc_data	ipq806x/nss_gmac_dev.c	/^void nss_gmac_get_desc_data(struct dma_desc *desc,$/;"	f
nss_gmac_get_drvinfo	ipq806x/nss_gmac_ethtool.c	/^static void nss_gmac_get_drvinfo(struct net_device *dev,$/;"	f	file:
nss_gmac_get_ethtool_stats	ipq806x/nss_gmac_ethtool.c	/^static void nss_gmac_get_ethtool_stats(struct net_device *netdev,$/;"	f	file:
nss_gmac_get_interrupt_mask	include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_interrupt_mask(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_interrupt_mask	ipq806x/include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_interrupt_mask(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_interrupt_type	include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_interrupt_type(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_interrupt_type	ipq806x/include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_interrupt_type(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_mac_addr	ipq806x/nss_gmac_dev.c	/^void nss_gmac_get_mac_addr(struct nss_gmac_dev *gmacdev, uint32_t mac_high,$/;"	f
nss_gmac_get_msglevel	ipq806x/nss_gmac_ethtool.c	/^static uint32_t nss_gmac_get_msglevel(struct net_device *netdev)$/;"	f	file:
nss_gmac_get_netdev_by_macid	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_get_netdev_by_macid);$/;"	v
nss_gmac_get_netdev_by_macid	ipq806x/nss_gmac_tx_rx_offload.c	/^struct net_device *nss_gmac_get_netdev_by_macid(int macid)$/;"	f
nss_gmac_get_pauseparam	ipq806x/nss_gmac_ethtool.c	/^static void nss_gmac_get_pauseparam(struct net_device *netdev,$/;"	f	file:
nss_gmac_get_phy_profile	ipq806x/nss_gmac_init.c	/^int32_t nss_gmac_get_phy_profile(void)$/;"	f
nss_gmac_get_priv_flags	ipq806x/nss_gmac_ethtool.c	/^static uint32_t nss_gmac_get_priv_flags(struct net_device *netdev)$/;"	f	file:
nss_gmac_get_rx_desc_frame_length	include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_rx_desc_frame_length(uint32_t status)$/;"	f
nss_gmac_get_rx_desc_frame_length	ipq806x/include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_rx_desc_frame_length(uint32_t status)$/;"	f
nss_gmac_get_rx_qptr	include/nss_gmac_dev.h	/^static inline struct dma_desc *nss_gmac_get_rx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_rx_qptr	ipq806x/include/nss_gmac_dev.h	/^static inline struct dma_desc *nss_gmac_get_rx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_settings	ipq806x/nss_gmac_ethtool.c	/^static int32_t nss_gmac_get_settings(struct net_device *netdev,$/;"	f	file:
nss_gmac_get_strings	ipq806x/nss_gmac_ethtool.c	/^static void nss_gmac_get_strings(struct net_device *netdev, uint32_t stringset,$/;"	f	file:
nss_gmac_get_strset_count	ipq806x/nss_gmac_ethtool.c	/^static int32_t nss_gmac_get_strset_count(struct net_device *netdev,$/;"	f	file:
nss_gmac_get_tx_collision_count	include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_tx_collision_count(uint32_t status)$/;"	f
nss_gmac_get_tx_collision_count	ipq806x/include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_get_tx_collision_count(uint32_t status)$/;"	f
nss_gmac_get_tx_qptr	include/nss_gmac_dev.h	/^static inline struct dma_desc *nss_gmac_get_tx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_tx_qptr	ipq806x/include/nss_gmac_dev.h	/^static inline struct dma_desc *nss_gmac_get_tx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_get_wol	ipq806x/nss_gmac_ethtool.c	/^static void nss_gmac_get_wol(struct net_device *netdev,$/;"	f	file:
nss_gmac_giveup_rx_desc_queue	ipq806x/nss_gmac_ctrl.c	/^static void nss_gmac_giveup_rx_desc_queue(struct nss_gmac_dev *gmacdev,$/;"	f	file:
nss_gmac_giveup_tx_desc_queue	ipq806x/nss_gmac_ctrl.c	/^static void nss_gmac_giveup_tx_desc_queue(struct nss_gmac_dev *gmacdev,$/;"	f	file:
nss_gmac_global_ctx	include/nss_gmac_dev.h	/^struct nss_gmac_global_ctx {$/;"	s
nss_gmac_global_ctx	ipq806x/include/nss_gmac_dev.h	/^struct nss_gmac_global_ctx {$/;"	s
nss_gmac_handle_irq	ipq806x/nss_gmac_tx_rx_offload.c	/^irqreturn_t nss_gmac_handle_irq(int irq, void *ctx)$/;"	f
nss_gmac_host_interface_exit	ipq806x/nss_gmac_ctrl.c	/^module_exit(nss_gmac_host_interface_exit);$/;"	v
nss_gmac_host_interface_exit	ipq806x/nss_gmac_ctrl.c	/^void __exit nss_gmac_host_interface_exit(void)$/;"	f
nss_gmac_host_interface_init	ipq806x/nss_gmac_ctrl.c	/^int __init nss_gmac_host_interface_init(void)$/;"	f
nss_gmac_host_interface_init	ipq806x/nss_gmac_ctrl.c	/^module_init(nss_gmac_host_interface_init);$/;"	v
nss_gmac_ifg_reset	ipq806x/nss_gmac_init.c	/^static void nss_gmac_ifg_reset(uint32_t gmac_id)$/;"	f	file:
nss_gmac_init_mdiobus	ipq806x/nss_gmac_mdiobus.c	/^int32_t nss_gmac_init_mdiobus(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_init_rx_desc_base	ipq806x/nss_gmac_dev.c	/^void nss_gmac_init_rx_desc_base(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_init_tx_desc_base	ipq806x/nss_gmac_dev.c	/^void nss_gmac_init_tx_desc_base(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_ipc_offload_init	ipq806x/nss_gmac_dev.c	/^void nss_gmac_ipc_offload_init(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_is_da_filter_failed	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_da_filter_failed(struct dma_desc *desc)$/;"	f
nss_gmac_is_desc_empty	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_desc_empty(struct dma_desc *desc)$/;"	f
nss_gmac_is_desc_empty	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_desc_empty(struct dma_desc *desc)$/;"	f
nss_gmac_is_desc_owned_by_dma	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_desc_owned_by_dma(struct dma_desc *desc)$/;"	f
nss_gmac_is_desc_owned_by_dma	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_desc_owned_by_dma(struct dma_desc *desc)$/;"	f
nss_gmac_is_desc_valid	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_desc_valid(uint32_t status)$/;"	f
nss_gmac_is_desc_valid	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_desc_valid(uint32_t status)$/;"	f
nss_gmac_is_eof_in_rx_desc	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_eof_in_rx_desc(struct dma_desc *desc)$/;"	f
nss_gmac_is_exc_tx_collisions	include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_is_exc_tx_collisions(uint32_t status)$/;"	f
nss_gmac_is_exc_tx_collisions	ipq806x/include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_is_exc_tx_collisions(uint32_t status)$/;"	f
nss_gmac_is_frame_dribbling_errors	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_frame_dribbling_errors(uint32_t status)$/;"	f
nss_gmac_is_in_open_state	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_is_in_open_state);$/;"	v
nss_gmac_is_in_open_state	ipq806x/nss_gmac_tx_rx_offload.c	/^bool nss_gmac_is_in_open_state(struct net_device *netdev)$/;"	f
nss_gmac_is_last_rx_desc	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_last_rx_desc(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_is_last_rx_desc	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_last_rx_desc(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_is_last_tx_desc	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_last_tx_desc(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_is_last_tx_desc	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_last_tx_desc(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_is_rx_crc	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_rx_crc(uint32_t status)$/;"	f
nss_gmac_is_rx_desc_chained	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_rx_desc_chained(struct dma_desc *desc)$/;"	f
nss_gmac_is_rx_desc_chained	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_rx_desc_chained(struct dma_desc *desc)$/;"	f
nss_gmac_is_rx_desc_valid	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_rx_desc_valid(uint32_t status)$/;"	f
nss_gmac_is_rx_desc_valid	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_rx_desc_valid(uint32_t status)$/;"	f
nss_gmac_is_rx_frame_collision	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_rx_frame_collision(uint32_t status)$/;"	f
nss_gmac_is_rx_frame_damaged	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_rx_frame_damaged(uint32_t status)$/;"	f
nss_gmac_is_rx_frame_length_errors	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_rx_frame_length_errors(uint32_t status)$/;"	f
nss_gmac_is_sa_filter_failed	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_sa_filter_failed(struct dma_desc *desc)$/;"	f
nss_gmac_is_sof_in_rx_desc	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_sof_in_rx_desc(struct dma_desc *desc)$/;"	f
nss_gmac_is_tx_aborted	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_tx_aborted(uint32_t status)$/;"	f
nss_gmac_is_tx_carrier_error	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_tx_carrier_error(uint32_t status)$/;"	f
nss_gmac_is_tx_desc_chained	include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_tx_desc_chained(struct dma_desc *desc)$/;"	f
nss_gmac_is_tx_desc_chained	ipq806x/include/nss_gmac_dev.h	/^static inline bool nss_gmac_is_tx_desc_chained(struct dma_desc *desc)$/;"	f
nss_gmac_is_tx_lc_error	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_tx_lc_error(uint32_t status)$/;"	f
nss_gmac_is_tx_underflow_error	ipq806x/nss_gmac_dev.c	/^bool nss_gmac_is_tx_underflow_error(uint32_t status)$/;"	f
nss_gmac_jab_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_jab_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_jumbo_frame_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_jumbo_frame_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_jumbo_frame_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_jumbo_frame_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_link_state_change_notify_register	ipq806x/nss_gmac_init.c	/^EXPORT_SYMBOL_GPL(nss_gmac_link_state_change_notify_register);$/;"	v
nss_gmac_link_state_change_notify_register	ipq806x/nss_gmac_init.c	/^void nss_gmac_link_state_change_notify_register(struct notifier_block *nb)$/;"	f
nss_gmac_link_state_change_notify_unregister	ipq806x/nss_gmac_init.c	/^EXPORT_SYMBOL_GPL(nss_gmac_link_state_change_notify_unregister);$/;"	v
nss_gmac_link_state_change_notify_unregister	ipq806x/nss_gmac_init.c	/^void nss_gmac_link_state_change_notify_unregister(struct notifier_block *nb)$/;"	f
nss_gmac_link_status_set	ipq806x/nss_gmac_init.c	/^static void nss_gmac_link_status_set(uint32_t gmac_id, uint32_t link_state)$/;"	f	file:
nss_gmac_linkdown	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_linkdown(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_linkup	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_linkup(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_linux_change_mtu	ipq806x/nss_gmac_tx_rx_offload.c	/^int32_t nss_gmac_linux_change_mtu(struct net_device *netdev, int32_t newmtu)$/;"	f
nss_gmac_linux_close	ipq806x/nss_gmac_tx_rx_offload.c	/^int nss_gmac_linux_close(struct net_device *netdev)$/;"	f
nss_gmac_linux_do_ioctl	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_linux_do_ioctl(struct net_device *netdev,$/;"	f	file:
nss_gmac_linux_get_stats64	ipq806x/nss_gmac_ctrl.c	/^struct rtnl_link_stats64 *nss_gmac_linux_get_stats64(struct net_device *netdev,$/;"	f
nss_gmac_linux_open	ipq806x/nss_gmac_tx_rx_offload.c	/^int nss_gmac_linux_open(struct net_device *netdev)$/;"	f
nss_gmac_linux_set_mac_address	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_linux_set_mac_address(struct net_device *netdev,$/;"	f	file:
nss_gmac_linux_set_rx_mode	ipq806x/nss_gmac_ctrl.c	/^static void nss_gmac_linux_set_rx_mode(struct net_device *netdev)$/;"	f	file:
nss_gmac_linux_tx_timeout	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_linux_tx_timeout(struct net_device *netdev)$/;"	f
nss_gmac_linux_xmit_frames	ipq806x/nss_gmac_tx_rx_offload.c	/^int32_t nss_gmac_linux_xmit_frames(struct sk_buff *skb,$/;"	f
nss_gmac_loopback_off	ipq806x/nss_gmac_dev.c	/^void nss_gmac_loopback_off(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_mac_init	ipq806x/nss_gmac_dev.c	/^void nss_gmac_mac_init(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_mdiobus_read	ipq806x/nss_gmac_mdiobus.c	/^static int32_t nss_gmac_mdiobus_read(struct mii_bus *bus, int32_t phy_id,$/;"	f	file:
nss_gmac_mdiobus_reset	ipq806x/nss_gmac_mdiobus.c	/^int32_t nss_gmac_mdiobus_reset(struct mii_bus *bus)$/;"	f
nss_gmac_mdiobus_write	ipq806x/nss_gmac_mdiobus.c	/^static int32_t nss_gmac_mdiobus_write(struct mii_bus *bus, int32_t phy_id,$/;"	f	file:
nss_gmac_mii_rd_reg	ipq806x/nss_gmac_dev.c	/^uint16_t nss_gmac_mii_rd_reg(struct nss_gmac_dev *gmacdev, uint32_t phy,$/;"	f
nss_gmac_mii_wr_reg	ipq806x/nss_gmac_dev.c	/^void nss_gmac_mii_wr_reg(struct nss_gmac_dev *gmacdev, uint32_t phy,$/;"	f
nss_gmac_multicast_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_multicast_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_multicast_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_multicast_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_multicast_hash_filter_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_multicast_hash_filter_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_netdev_ops	ipq806x/nss_gmac_ctrl.c	/^static const struct net_device_ops nss_gmac_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
nss_gmac_nway_reset	ipq806x/nss_gmac_ethtool.c	/^static int nss_gmac_nway_reset(struct net_device *netdev)$/;"	f	file:
nss_gmac_of_get_pdata	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_of_get_pdata(struct device_node *np,$/;"	f	file:
nss_gmac_open_work	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_open_work(struct work_struct *work)$/;"	f
nss_gmac_override_data_plane	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_override_data_plane);$/;"	v
nss_gmac_override_data_plane	ipq806x/nss_gmac_tx_rx_offload.c	/^int nss_gmac_override_data_plane(struct net_device *netdev,$/;"	f
nss_gmac_pad_crc_strip_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_pad_crc_strip_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_phy_fixup	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_phy_fixup(struct phy_device *phydev)$/;"	f	file:
nss_gmac_poll	ipq806x/nss_gmac_tx_rx_offload.c	/^int nss_gmac_poll(struct napi_struct *napi, int budget)$/;"	f
nss_gmac_priv_flags	include/nss_gmac_dev.h	/^enum nss_gmac_priv_flags {$/;"	g
nss_gmac_priv_flags	ipq806x/include/nss_gmac_dev.h	/^enum nss_gmac_priv_flags {$/;"	g
nss_gmac_probe	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_probe(struct platform_device *pdev)$/;"	f	file:
nss_gmac_process_tx_complete	ipq806x/nss_gmac_tx_rx_offload.c	/^static inline void nss_gmac_process_tx_complete(struct nss_gmac_dev *gmacdev)$/;"	f	file:
nss_gmac_promisc_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_promisc_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_promisc_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_promisc_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_qsgmii_common_init	ipq806x/nss_gmac_init.c	/^static void nss_gmac_qsgmii_common_init(struct nss_gmac_global_ctx *ctx)$/;"	f	file:
nss_gmac_qsgmii_dev_init	ipq806x/nss_gmac_init.c	/^void nss_gmac_qsgmii_dev_init(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_read_phy_reg	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_read_phy_reg(uint32_t *reg_base, uint32_t phy_base,$/;"	f
nss_gmac_read_reg	include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_read_reg(uint32_t *regbase,$/;"	f
nss_gmac_read_reg	ipq806x/include/nss_gmac_dev.h	/^static inline uint32_t nss_gmac_read_reg(uint32_t *regbase,$/;"	f
nss_gmac_read_version	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_read_version(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_receive	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_receive);$/;"	v
nss_gmac_receive	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_receive(struct net_device *netdev, struct sk_buff *skb,$/;"	f
nss_gmac_register_driver	ipq806x/nss_gmac_ctrl.c	/^int32_t __init nss_gmac_register_driver(void)$/;"	f
nss_gmac_remove	ipq806x/nss_gmac_ctrl.c	/^static int nss_gmac_remove(struct platform_device *pdev)$/;"	f	file:
nss_gmac_reset	ipq806x/nss_gmac_dev.c	/^void nss_gmac_reset(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_reset_phy	ipq806x/nss_gmac_dev.c	/^void nss_gmac_reset_phy(struct nss_gmac_dev *gmacdev, uint32_t phyid)$/;"	f
nss_gmac_reset_rx_qptr	include/nss_gmac_dev.h	/^static inline void nss_gmac_reset_rx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_reset_rx_qptr	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_reset_rx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_reset_tx_qptr	include/nss_gmac_dev.h	/^static inline void nss_gmac_reset_tx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_reset_tx_qptr	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_reset_tx_qptr(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_restore_data_plane	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_restore_data_plane);$/;"	v
nss_gmac_restore_data_plane	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_restore_data_plane(struct net_device *netdev)$/;"	f
nss_gmac_resume_dma_rx	include/nss_gmac_dev.h	/^static inline void nss_gmac_resume_dma_rx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_resume_dma_rx	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_resume_dma_rx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_resume_dma_tx	include/nss_gmac_dev.h	/^static inline void nss_gmac_resume_dma_tx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_resume_dma_tx	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_resume_dma_tx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_retry_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_retry_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_retry_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_retry_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rumi_qsgmii_init	ipq806x/nss_gmac_init.c	/^static void nss_gmac_rumi_qsgmii_init(struct nss_gmac_dev *gmacdev)$/;"	f	file:
nss_gmac_rx	ipq806x/nss_gmac_tx_rx_offload.c	/^static inline int nss_gmac_rx(struct nss_gmac_dev *gmacdev, int budget)$/;"	f	file:
nss_gmac_rx_desc_init_ring	include/nss_gmac_dev.h	/^static inline void nss_gmac_rx_desc_init_ring(struct dma_desc *desc,$/;"	f
nss_gmac_rx_desc_init_ring	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_rx_desc_init_ring(struct dma_desc *desc,$/;"	f
nss_gmac_rx_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_flow_control_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_flow_control_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_own_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_own_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_own_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_own_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_pause_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_pause_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_pause_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_pause_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_refill	ipq806x/nss_gmac_tx_rx_offload.c	/^static inline void nss_gmac_rx_refill(struct nss_gmac_dev *gmacdev)$/;"	f	file:
nss_gmac_rx_tcpip_chksum_drop_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_tcpip_chksum_drop_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_rx_tcpip_chksum_drop_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_rx_tcpip_chksum_drop_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_select_gmii	ipq806x/nss_gmac_dev.c	/^void nss_gmac_select_gmii(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_select_mii	ipq806x/nss_gmac_dev.c	/^void nss_gmac_select_mii(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_set_desc_eof	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_desc_eof(struct dma_desc *desc)$/;"	f
nss_gmac_set_desc_sof	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_desc_sof(struct dma_desc *desc)$/;"	f
nss_gmac_set_features	ipq806x/nss_gmac_ctrl.c	/^static int32_t nss_gmac_set_features(struct net_device *netdev,$/;"	f	file:
nss_gmac_set_full_duplex	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_full_duplex(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_set_half_duplex	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_half_duplex(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_set_mac_addr	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_mac_addr(struct nss_gmac_dev *gmacdev, uint32_t mac_high,$/;"	f
nss_gmac_set_owner_dma	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_owner_dma(struct dma_desc *desc)$/;"	f
nss_gmac_set_pass_control	ipq806x/nss_gmac_dev.c	/^void nss_gmac_set_pass_control(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_set_pauseparam	ipq806x/nss_gmac_ethtool.c	/^static int nss_gmac_set_pauseparam(struct net_device *netdev,$/;"	f	file:
nss_gmac_set_priv_flags	ipq806x/nss_gmac_ethtool.c	/^static int32_t nss_gmac_set_priv_flags(struct net_device *netdev, u32 flags)$/;"	f	file:
nss_gmac_set_reg_bits	include/nss_gmac_dev.h	/^static inline void nss_gmac_set_reg_bits(uint32_t *regbase,$/;"	f
nss_gmac_set_reg_bits	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_set_reg_bits(uint32_t *regbase,$/;"	f
nss_gmac_set_rx_qptr	include/nss_gmac_dev.h	/^static inline int32_t nss_gmac_set_rx_qptr(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_set_rx_qptr	ipq806x/include/nss_gmac_dev.h	/^static inline int32_t nss_gmac_set_rx_qptr(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_set_settings	ipq806x/nss_gmac_ethtool.c	/^static int32_t nss_gmac_set_settings(struct net_device *netdev,$/;"	f	file:
nss_gmac_set_tx_qptr	include/nss_gmac_dev.h	/^static inline struct dma_desc *nss_gmac_set_tx_qptr(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_set_tx_qptr	ipq806x/include/nss_gmac_dev.h	/^static inline struct dma_desc *nss_gmac_set_tx_qptr(struct nss_gmac_dev *gmacdev,$/;"	f
nss_gmac_setup_rx_desc_queue	ipq806x/nss_gmac_tx_rx_offload.c	/^static int32_t nss_gmac_setup_rx_desc_queue(struct nss_gmac_dev *gmacdev,$/;"	f	file:
nss_gmac_setup_tx_desc_queue	ipq806x/nss_gmac_tx_rx_offload.c	/^static int32_t nss_gmac_setup_tx_desc_queue(struct nss_gmac_dev *gmacdev,$/;"	f	file:
nss_gmac_slowpath_if_change_mtu	ipq806x/nss_gmac_tx_rx_offload.c	/^static int nss_gmac_slowpath_if_change_mtu(void *app_data, uint32_t mtu)$/;"	f	file:
nss_gmac_slowpath_if_close	ipq806x/nss_gmac_tx_rx_offload.c	/^static int nss_gmac_slowpath_if_close(void *app_data)$/;"	f	file:
nss_gmac_slowpath_if_link_state	ipq806x/nss_gmac_tx_rx_offload.c	/^static int nss_gmac_slowpath_if_link_state(void *app_data, uint32_t link_state)$/;"	f	file:
nss_gmac_slowpath_if_mac_addr	ipq806x/nss_gmac_tx_rx_offload.c	/^static int nss_gmac_slowpath_if_mac_addr(void *app_data, uint8_t *addr)$/;"	f	file:
nss_gmac_slowpath_if_open	ipq806x/nss_gmac_tx_rx_offload.c	/^static int nss_gmac_slowpath_if_open(void *app_data, uint32_t tx_desc_ring,$/;"	f	file:
nss_gmac_slowpath_if_xmit	ipq806x/nss_gmac_tx_rx_offload.c	/^static int nss_gmac_slowpath_if_xmit(void *app_data, struct sk_buff *skb)$/;"	f	file:
nss_gmac_slowpath_ops	ipq806x/nss_gmac_tx_rx_offload.c	/^struct nss_gmac_data_plane_ops nss_gmac_slowpath_ops = {$/;"	v	typeref:struct:nss_gmac_data_plane_ops
nss_gmac_spare_ctl	ipq806x/nss_gmac_init.c	/^void nss_gmac_spare_ctl(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_speed_ctx	include/nss_gmac_dev.h	/^struct nss_gmac_speed_ctx {$/;"	s
nss_gmac_speed_ctx	ipq806x/include/nss_gmac_dev.h	/^struct nss_gmac_speed_ctx {$/;"	s
nss_gmac_src_addr_filter_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_src_addr_filter_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_start_data_plane	ipq806x/nss_gmac_tx_rx_offload.c	/^EXPORT_SYMBOL(nss_gmac_start_data_plane);$/;"	v
nss_gmac_start_data_plane	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_start_data_plane(struct net_device *netdev, void *ctx)$/;"	f
nss_gmac_start_up	ipq806x/nss_gmac_tx_rx_offload.c	/^void nss_gmac_start_up(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_state	include/nss_gmac_dev.h	/^enum nss_gmac_state {$/;"	g
nss_gmac_state	ipq806x/include/nss_gmac_dev.h	/^enum nss_gmac_state {$/;"	g
nss_gmac_stats	exports/nss_gmac_api_if.h	/^struct nss_gmac_stats {$/;"	s
nss_gmac_stats	ipq806x/exports/nss_gmac_api_if.h	/^struct nss_gmac_stats {$/;"	s
nss_gmac_stats_receive	ipq806x/nss_gmac_tx_rx_offload.c	/^static void nss_gmac_stats_receive(struct nss_gmac_dev *gmacdev,$/;"	f	file:
nss_gmac_take_desc_ownership	ipq806x/nss_gmac_dev.c	/^void nss_gmac_take_desc_ownership(struct dma_desc *desc)$/;"	f
nss_gmac_take_desc_ownership_rx	ipq806x/nss_gmac_dev.c	/^void nss_gmac_take_desc_ownership_rx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_take_desc_ownership_tx	ipq806x/nss_gmac_dev.c	/^void nss_gmac_take_desc_ownership_tx(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_to_ethtool_duplex	ipq806x/nss_gmac_ethtool.c	/^static int32_t nss_gmac_to_ethtool_duplex(int32_t duplex)$/;"	f	file:
nss_gmac_to_ethtool_speed	ipq806x/nss_gmac_ethtool.c	/^static int32_t nss_gmac_to_ethtool_speed(int32_t speed)$/;"	f	file:
nss_gmac_twokpe_frame_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_twokpe_frame_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_twokpe_frame_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_twokpe_frame_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_tx_checksum_offload_tcp_pseudo	include/nss_gmac_dev.h	/^static inline void nss_gmac_tx_checksum_offload_tcp_pseudo(struct nss_gmac_dev *$/;"	f
nss_gmac_tx_checksum_offload_tcp_pseudo	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_tx_checksum_offload_tcp_pseudo(struct nss_gmac_dev *$/;"	f
nss_gmac_tx_desc_init_ring	include/nss_gmac_dev.h	/^static inline void nss_gmac_tx_desc_init_ring(struct dma_desc *desc,$/;"	f
nss_gmac_tx_desc_init_ring	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_tx_desc_init_ring(struct dma_desc *desc,$/;"	f
nss_gmac_tx_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_tx_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_tx_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_tx_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_tx_flow_control_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_tx_flow_control_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_tx_pause_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_tx_pause_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_tx_pause_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_tx_pause_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_tx_rx_desc_init	ipq806x/nss_gmac_ctrl.c	/^void nss_gmac_tx_rx_desc_init(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_unicast_hash_filter_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_unicast_hash_filter_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_unicast_pause_frame_detect_disable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_unicast_pause_frame_detect_disable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_update_features	ipq806x/nss_gmac_ctrl.c	/^static void nss_gmac_update_features(uint32_t *supp, uint32_t *adv)$/;"	f	file:
nss_gmac_wakeup_filter_config0	ipq806x/nss_gmac_ctrl.c	/^uint32_t nss_gmac_wakeup_filter_config0[] = {$/;"	v
nss_gmac_wakeup_filter_config1	ipq806x/nss_gmac_ctrl.c	/^uint32_t nss_gmac_wakeup_filter_config1[] = {$/;"	v
nss_gmac_wakeup_filter_config2	ipq806x/nss_gmac_ctrl.c	/^uint32_t nss_gmac_wakeup_filter_config2[] = {$/;"	v
nss_gmac_wakeup_filter_config3	ipq806x/nss_gmac_ctrl.c	/^uint32_t nss_gmac_wakeup_filter_config3[] = {$/;"	v
nss_gmac_wd_enable	ipq806x/nss_gmac_dev.c	/^void nss_gmac_wd_enable(struct nss_gmac_dev *gmacdev)$/;"	f
nss_gmac_write_phy_reg	ipq806x/nss_gmac_dev.c	/^int32_t nss_gmac_write_phy_reg(uint32_t *reg_base, uint32_t phy_base,$/;"	f
nss_gmac_write_reg	include/nss_gmac_dev.h	/^static inline void nss_gmac_write_reg(uint32_t *regbase,$/;"	f
nss_gmac_write_reg	ipq806x/include/nss_gmac_dev.h	/^static inline void nss_gmac_write_reg(uint32_t *regbase,$/;"	f
nss_macsec_bypass_en_set	ipq806x/nss_gmac_init.c	/^EXPORT_SYMBOL(nss_macsec_bypass_en_set);$/;"	v
nss_macsec_bypass_en_set	ipq806x/nss_gmac_init.c	/^void nss_macsec_bypass_en_set(uint32_t gmac_id, bool enable)$/;"	f
nss_macsec_pre_exit	ipq806x/nss_gmac_init.c	/^EXPORT_SYMBOL(nss_macsec_pre_exit);$/;"	v
nss_macsec_pre_exit	ipq806x/nss_gmac_init.c	/^void nss_macsec_pre_exit(void)$/;"	f
nss_macsec_pre_init	ipq806x/nss_gmac_init.c	/^EXPORT_SYMBOL(nss_macsec_pre_init);$/;"	v
nss_macsec_pre_init	ipq806x/nss_gmac_init.c	/^void nss_macsec_pre_init(void)$/;"	f
nss_notify_linkup	ipq806x/nss_gmac_tx_rx_offload.c	/^static void nss_notify_linkup(struct nss_gmac_dev *gmacdev)$/;"	f	file:
nss_stats	include/nss_gmac_dev.h	/^	struct nss_gmac_stats nss_stats;\/* Stats synced from NSS	      *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::nss_gmac_stats
nss_stats	ipq806x/include/nss_gmac_dev.h	/^	struct nss_gmac_stats nss_stats;\/* Stats synced from NSS	      *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::nss_gmac_stats
obj	ipq806x/Makefile	/^obj ?= .$/;"	m
open	exports/nss_gmac_api_if.h	/^	int (*open)(void *ctx, uint32_t tx_desc_ring, uint32_t rx_desc_ring,$/;"	m	struct:nss_gmac_data_plane_ops
open	ipq806x/exports/nss_gmac_api_if.h	/^	int (*open)(void *ctx, uint32_t tx_desc_ring, uint32_t rx_desc_ring,$/;"	m	struct:nss_gmac_data_plane_ops
pause	include/nss_gmac_dev.h	/^	uint32_t pause;		\/* Current flow control settings              *\/$/;"	m	struct:nss_gmac_dev
pause	ipq806x/include/nss_gmac_dev.h	/^	uint32_t pause;		\/* Current flow control settings              *\/$/;"	m	struct:nss_gmac_dev
pdev	include/nss_gmac_dev.h	/^	struct platform_device *pdev;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::platform_device
pdev	ipq806x/include/nss_gmac_dev.h	/^	struct platform_device *pdev;$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::platform_device
phy2port	ipq806x/nss_gmac_ctrl.c	/^static inline int phy2port(int phyUnit) { return (phyUnit==0) ? 4 : (phyUnit-1) ; }$/;"	f	file:
phy2port	ipq806x/nss_gmac_ctrl.c	/^static inline int phy2port(int phyUnit) { return phyUnit; }$/;"	f	file:
phy_base	include/nss_gmac_dev.h	/^	uint32_t phy_base;	\/* PHY device address on MII interface        *\/$/;"	m	struct:nss_gmac_dev
phy_base	ipq806x/include/nss_gmac_dev.h	/^	uint32_t phy_base;	\/* PHY device address on MII interface        *\/$/;"	m	struct:nss_gmac_dev
phy_irq	ipq806x/nss_gmac_mdiobus.c	/^static int32_t phy_irq[PHY_MAX_ADDR];$/;"	v	file:
phy_mdio_addr	include/msm_nss_gmac.h	/^	uint32_t phy_mdio_addr;		\/* MDIO address of the connected PHY *\/$/;"	m	struct:msm_nss_gmac_platform_data
phy_mdio_addr	ipq806x/include/msm_nss_gmac.h	/^	uint32_t phy_mdio_addr;		\/* MDIO address of the connected PHY *\/$/;"	m	struct:msm_nss_gmac_platform_data
phy_mii_type	include/msm_nss_gmac.h	/^	uint32_t phy_mii_type;$/;"	m	struct:msm_nss_gmac_platform_data
phy_mii_type	include/nss_gmac_dev.h	/^	uint32_t phy_mii_type;	\/* RGMII\/SGMII\/QSGMII                         *\/$/;"	m	struct:nss_gmac_dev
phy_mii_type	ipq806x/include/msm_nss_gmac.h	/^	uint32_t phy_mii_type;$/;"	m	struct:msm_nss_gmac_platform_data
phy_mii_type	ipq806x/include/nss_gmac_dev.h	/^	uint32_t phy_mii_type;	\/* RGMII\/SGMII\/QSGMII                         *\/$/;"	m	struct:nss_gmac_dev
phydev	include/nss_gmac_dev.h	/^	struct phy_device *phydev;	\/* Phy device			      *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::phy_device
phydev	ipq806x/include/nss_gmac_dev.h	/^	struct phy_device *phydev;	\/* Phy device			      *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::phy_device
poll_required	include/msm_nss_gmac.h	/^	uint32_t poll_required;		\/* [0\/1] Link status poll? *\/$/;"	m	struct:msm_nss_gmac_platform_data
poll_required	ipq806x/include/msm_nss_gmac.h	/^	uint32_t poll_required;		\/* [0\/1] Link status poll? *\/$/;"	m	struct:msm_nss_gmac_platform_data
port2phy	ipq806x/nss_gmac_ctrl.c	/^static inline int port2phy(int port) { return (port==4) ? 0 : (port+1); }$/;"	f	file:
port2phy	ipq806x/nss_gmac_ctrl.c	/^static inline int port2phy(int port) { return port; }$/;"	f	file:
port_mask	ipq806x/nss_gmac_ctrl.c	/^	int port_mask;$/;"	m	struct:switch_phy_timer	file:
pssthrgh_proc_init	ipq806x/nss_gmac_ctrl.c	/^static void pssthrgh_proc_init(void)$/;"	f	file:
qca_mii_read	ipq806x/nss_gmac_ctrl.c	/^static uint32_t qca_mii_read(int reg)$/;"	f	file:
qca_mii_write	ipq806x/nss_gmac_ctrl.c	/^static void qca_mii_write(int reg, uint32_t val)$/;"	f	file:
qsgmii_base	include/nss_gmac_dev.h	/^	uint32_t *qsgmii_base;$/;"	m	struct:nss_gmac_global_ctx
qsgmii_base	ipq806x/include/nss_gmac_dev.h	/^	uint32_t *qsgmii_base;$/;"	m	struct:nss_gmac_global_ctx
real_dev	ipq806x/include/ipv6_pssthrgh.h	/^        struct net_device *real_dev;$/;"	m	struct:dni_enet_info	typeref:struct:dni_enet_info::net_device
reg_lock	include/nss_gmac_dev.h	/^	spinlock_t reg_lock;	\/* Lock to protect NSS register	*\/$/;"	m	struct:nss_gmac_global_ctx
reg_lock	ipq806x/include/nss_gmac_dev.h	/^	spinlock_t reg_lock;	\/* Lock to protect NSS register	*\/$/;"	m	struct:nss_gmac_global_ctx
reserved1	include/nss_gmac_dev.h	/^	uint32_t reserved1;	\/* Reserved word                      *\/$/;"	m	struct:dma_desc
reserved1	ipq806x/include/nss_gmac_dev.h	/^	uint32_t reserved1;	\/* Reserved word                      *\/$/;"	m	struct:dma_desc
rgmii_delay	include/msm_nss_gmac.h	/^	uint32_t rgmii_delay;$/;"	m	struct:msm_nss_gmac_platform_data
rgmii_delay	include/nss_gmac_dev.h	/^	uint32_t rgmii_delay;	\/* RGMII delay settings                       *\/$/;"	m	struct:nss_gmac_dev
rgmii_delay	ipq806x/include/msm_nss_gmac.h	/^	uint32_t rgmii_delay;$/;"	m	struct:msm_nss_gmac_platform_data
rgmii_delay	ipq806x/include/nss_gmac_dev.h	/^	uint32_t rgmii_delay;	\/* RGMII delay settings                       *\/$/;"	m	struct:nss_gmac_dev
rx_busy	include/nss_gmac_dev.h	/^	uint32_t rx_busy;	\/* index of the rx descriptor owned by DMA,$/;"	m	struct:nss_gmac_dev
rx_busy	ipq806x/include/nss_gmac_dev.h	/^	uint32_t rx_busy;	\/* index of the rx descriptor owned by DMA,$/;"	m	struct:nss_gmac_dev
rx_busy_desc	include/nss_gmac_dev.h	/^	struct dma_desc *rx_busy_desc;	\/* Rx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
rx_busy_desc	ipq806x/include/nss_gmac_dev.h	/^	struct dma_desc *rx_busy_desc;	\/* Rx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
rx_bytes	exports/nss_gmac_api_if.h	/^	uint32_t rx_bytes;		\/**< Number of RX bytes *\/$/;"	m	struct:nss_gmac_stats
rx_bytes	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_bytes;		\/**< Number of RX bytes *\/$/;"	m	struct:nss_gmac_stats
rx_crc_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_crc_errors;		\/**< Number of RX CRC errors *\/$/;"	m	struct:nss_gmac_stats
rx_crc_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_crc_errors;		\/**< Number of RX CRC errors *\/$/;"	m	struct:nss_gmac_stats
rx_desc	include/nss_gmac_dev.h	/^	struct dma_desc *rx_desc;\/* start address of RX descriptors ring or$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
rx_desc	ipq806x/include/nss_gmac_dev.h	/^	struct dma_desc *rx_desc;\/* start address of RX descriptors ring or$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
rx_desc_chain	include/nss_gmac_dev.h	/^	rx_desc_chain = 0x00004000,	\/* (TCH)Second buffer address$/;"	e	enum:dma_descriptor_status
rx_desc_chain	ipq806x/include/nss_gmac_dev.h	/^	rx_desc_chain = 0x00004000,	\/* (TCH)Second buffer address$/;"	e	enum:dma_descriptor_status
rx_desc_count	include/nss_gmac_dev.h	/^	uint32_t rx_desc_count;	\/* number of rx descriptors in the$/;"	m	struct:nss_gmac_dev
rx_desc_count	ipq806x/include/nss_gmac_dev.h	/^	uint32_t rx_desc_count;	\/* number of rx descriptors in the$/;"	m	struct:nss_gmac_dev
rx_desc_dma	include/nss_gmac_dev.h	/^	dma_addr_t rx_desc_dma;	\/* Dma-albe address of first rx descriptor$/;"	m	struct:nss_gmac_dev
rx_desc_dma	ipq806x/include/nss_gmac_dev.h	/^	dma_addr_t rx_desc_dma;	\/* Dma-albe address of first rx descriptor$/;"	m	struct:nss_gmac_dev
rx_desc_end_of_ring	include/nss_gmac_dev.h	/^	rx_desc_end_of_ring = 0x00008000,	\/* (TER)End of descriptor ring*\/$/;"	e	enum:dma_descriptor_status
rx_desc_end_of_ring	ipq806x/include/nss_gmac_dev.h	/^	rx_desc_end_of_ring = 0x00008000,	\/* (TER)End of descriptor ring*\/$/;"	e	enum:dma_descriptor_status
rx_descriptor_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_descriptor_errors;	\/**< Number of RX descriptor errors *\/$/;"	m	struct:nss_gmac_stats
rx_descriptor_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_descriptor_errors;	\/**< Number of RX descriptor errors *\/$/;"	m	struct:nss_gmac_stats
rx_dis_int_compl	include/nss_gmac_dev.h	/^	rx_dis_int_compl = 0x80000000,	\/* (Disable Rx int on completion)     *\/$/;"	e	enum:dma_descriptor_status
rx_dis_int_compl	ipq806x/include/nss_gmac_dev.h	/^	rx_dis_int_compl = 0x80000000,	\/* (Disable Rx int on completion)     *\/$/;"	e	enum:dma_descriptor_status
rx_dribble_bit_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_dribble_bit_errors;	\/**< Number of RX dribble bit errors *\/$/;"	m	struct:nss_gmac_stats
rx_dribble_bit_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_dribble_bit_errors;	\/**< Number of RX dribble bit errors *\/$/;"	m	struct:nss_gmac_stats
rx_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_errors;		\/**< Number of RX errors *\/$/;"	m	struct:nss_gmac_stats
rx_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_errors;		\/**< Number of RX errors *\/$/;"	m	struct:nss_gmac_stats
rx_ip_header_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_ip_header_errors;	\/**< Number of RX IP header errors *\/$/;"	m	struct:nss_gmac_stats
rx_ip_header_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_ip_header_errors;	\/**< Number of RX IP header errors *\/$/;"	m	struct:nss_gmac_stats
rx_ip_payload_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_ip_payload_errors;	\/**< Number of RX IP payload errors *\/$/;"	m	struct:nss_gmac_stats
rx_ip_payload_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_ip_payload_errors;	\/**< Number of RX IP payload errors *\/$/;"	m	struct:nss_gmac_stats
rx_late_collision_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_late_collision_errors;$/;"	m	struct:nss_gmac_stats
rx_late_collision_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_late_collision_errors;$/;"	m	struct:nss_gmac_stats
rx_length_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_length_errors;	\/**< Number of RX length errors *\/$/;"	m	struct:nss_gmac_stats
rx_length_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_length_errors;	\/**< Number of RX length errors *\/$/;"	m	struct:nss_gmac_stats
rx_missed	exports/nss_gmac_api_if.h	/^	uint32_t rx_missed;		\/**< Number of RX packets missed by the DMA *\/$/;"	m	struct:nss_gmac_stats
rx_missed	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_missed;		\/**< Number of RX packets missed by the DMA *\/$/;"	m	struct:nss_gmac_stats
rx_next	include/nss_gmac_dev.h	/^	uint32_t rx_next;	\/* index of the rx descriptor next available$/;"	m	struct:nss_gmac_dev
rx_next	ipq806x/include/nss_gmac_dev.h	/^	uint32_t rx_next;	\/* index of the rx descriptor next available$/;"	m	struct:nss_gmac_dev
rx_next_desc	include/nss_gmac_dev.h	/^	struct dma_desc *rx_next_desc;	\/* Rx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
rx_next_desc	ipq806x/include/nss_gmac_dev.h	/^	struct dma_desc *rx_next_desc;	\/* Rx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
rx_no_buffer_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_no_buffer_errors;	\/**< Number of RX no-buffer errors *\/$/;"	m	struct:nss_gmac_stats
rx_no_buffer_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_no_buffer_errors;	\/**< Number of RX no-buffer errors *\/$/;"	m	struct:nss_gmac_stats
rx_overflow_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_overflow_errors;	\/**< Number of RX overflow errors *\/$/;"	m	struct:nss_gmac_stats
rx_overflow_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_overflow_errors;	\/**< Number of RX overflow errors *\/$/;"	m	struct:nss_gmac_stats
rx_packets	exports/nss_gmac_api_if.h	/^	uint32_t rx_packets;		\/**< Number of RX packets *\/$/;"	m	struct:nss_gmac_stats
rx_packets	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_packets;		\/**< Number of RX packets *\/$/;"	m	struct:nss_gmac_stats
rx_receive_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_receive_errors;	\/**< Number of RX receive errors *\/$/;"	m	struct:nss_gmac_stats
rx_receive_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_receive_errors;	\/**< Number of RX receive errors *\/$/;"	m	struct:nss_gmac_stats
rx_scatter_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_scatter_errors;	\/**< Number of scattered frames received by the DMA *\/$/;"	m	struct:nss_gmac_stats
rx_scatter_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_scatter_errors;	\/**< Number of scattered frames received by the DMA *\/$/;"	m	struct:nss_gmac_stats
rx_transport_csum_bypassed	exports/nss_gmac_api_if.h	/^	uint32_t rx_transport_csum_bypassed;$/;"	m	struct:nss_gmac_stats
rx_transport_csum_bypassed	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_transport_csum_bypassed;$/;"	m	struct:nss_gmac_stats
rx_watchdog_timeout_errors	exports/nss_gmac_api_if.h	/^	uint32_t rx_watchdog_timeout_errors;$/;"	m	struct:nss_gmac_stats
rx_watchdog_timeout_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t rx_watchdog_timeout_errors;$/;"	m	struct:nss_gmac_stats
set_blink_wan_led	ipq806x/nss_gmac_tx_rx_offload.c	/^void set_blink_wan_led(int val)$/;"	f
set_lan_led_func	ipq806x/nss_gmac_ctrl.c	/^void set_lan_led_func(int option)$/;"	f
set_mii_data	ipq806x/nss_gmac_ctrl.c	/^void set_mii_data(int port, int phy_up, int speed, int fdx)$/;"	f
slock	include/nss_gmac_dev.h	/^	spinlock_t slock;		\/* Lock to protect datapath	      *\/$/;"	m	struct:nss_gmac_dev
slock	ipq806x/include/nss_gmac_dev.h	/^	spinlock_t slock;		\/* Lock to protect datapath	      *\/$/;"	m	struct:nss_gmac_dev
socver	include/msm_nss_gmac.h	/^	uint32_t socver;$/;"	m	struct:msm_nss_gmac_platform_data
socver	include/nss_gmac_dev.h	/^	uint32_t socver;	\/* SOC version *\/$/;"	m	struct:nss_gmac_global_ctx
socver	ipq806x/include/msm_nss_gmac.h	/^	uint32_t socver;$/;"	m	struct:msm_nss_gmac_platform_data
socver	ipq806x/include/nss_gmac_dev.h	/^	uint32_t socver;	\/* SOC version *\/$/;"	m	struct:nss_gmac_global_ctx
speed	include/nss_gmac_dev.h	/^	uint32_t speed;		\/* Speed of the Phy                           *\/$/;"	m	struct:nss_gmac_dev
speed	include/nss_gmac_dev.h	/^	uint32_t speed;$/;"	m	struct:nss_gmac_speed_ctx
speed	ipq806x/include/nss_gmac_dev.h	/^	uint32_t speed;		\/* Speed of the Phy                           *\/$/;"	m	struct:nss_gmac_dev
speed	ipq806x/include/nss_gmac_dev.h	/^	uint32_t speed;$/;"	m	struct:nss_gmac_speed_ctx
split_addr	ipq806x/nss_gmac_ctrl.c	/^static inline void split_addr(uint32_t regaddr, uint16_t *r1, uint16_t *r2, uint16_t *page)$/;"	f	file:
stat_offset	ipq806x/nss_gmac_ethtool.c	/^	uint32_t stat_offset;$/;"	m	struct:nss_gmac_ethtool_stats	file:
stat_string	ipq806x/nss_gmac_ethtool.c	/^	uint8_t stat_string[ETH_GSTRING_LEN];$/;"	m	struct:nss_gmac_ethtool_stats	file:
stats	include/nss_gmac_dev.h	/^	struct rtnl_link_stats64 stats;	\/* statistics counters                *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::rtnl_link_stats64
stats	ipq806x/include/nss_gmac_dev.h	/^	struct rtnl_link_stats64 stats;	\/* statistics counters                *\/$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::rtnl_link_stats64
stats_lock	include/nss_gmac_dev.h	/^	spinlock_t stats_lock;		\/* Lock to retrieve stats atomically  *\/$/;"	m	struct:nss_gmac_dev
stats_lock	ipq806x/include/nss_gmac_dev.h	/^	spinlock_t stats_lock;		\/* Lock to retrieve stats atomically  *\/$/;"	m	struct:nss_gmac_dev
status	include/nss_gmac_dev.h	/^	uint32_t status;	\/* Status                             *\/$/;"	m	struct:dma_desc
status	ipq806x/include/nss_gmac_dev.h	/^	uint32_t status;	\/* Status                             *\/$/;"	m	struct:dma_desc
switch_phy_read	ipq806x/nss_gmac_ctrl.c	/^static int switch_phy_read( char *page, char **start, off_t offset, int count, int *eof, void *data)$/;"	f	file:
switch_phy_timer	ipq806x/nss_gmac_ctrl.c	/^struct switch_phy_timer {$/;"	s	file:
switch_phy_work	ipq806x/nss_gmac_ctrl.c	/^static void switch_phy_work(struct work_struct *work)$/;"	f	file:
switch_phy_write	ipq806x/nss_gmac_ctrl.c	/^static int switch_phy_write( struct file *file, const char *buffer, unsigned long count, void *unused_data)$/;"	f	file:
test_netlink	ipq806x/nss_gmac_tx_rx_offload.c	/^void test_netlink (struct sk_buff *__skb)$/;"	f
timer	ipq806x/nss_gmac_ctrl.c	/^	struct timer_list timer;$/;"	m	struct:switch_phy_timer	typeref:struct:switch_phy_timer::timer_list	file:
timestamphigh	include/nss_gmac_dev.h	/^	uint32_t timestamphigh;	\/* Higher 32 bits of the 64$/;"	m	struct:dma_desc
timestamphigh	ipq806x/include/nss_gmac_dev.h	/^	uint32_t timestamphigh;	\/* Higher 32 bits of the 64$/;"	m	struct:dma_desc
timestamplow	include/nss_gmac_dev.h	/^	uint32_t timestamplow;	\/* Lower 32 bits of the 64$/;"	m	struct:dma_desc
timestamplow	ipq806x/include/nss_gmac_dev.h	/^	uint32_t timestamplow;	\/* Lower 32 bits of the 64$/;"	m	struct:dma_desc
tm_dir	ipq806x/nss_gmac_tx_rx_offload.c	/^        int tm_dir;$/;"	m	struct:msg_data	file:
tm_limit	ipq806x/nss_gmac_tx_rx_offload.c	/^unsigned long long tm_limit = TM_ETH_MAX_LIMIT;$/;"	v
tm_netlink_deinit	ipq806x/nss_gmac_tx_rx_offload.c	/^void tm_netlink_deinit(void)$/;"	f
tm_netlink_init	ipq806x/nss_gmac_tx_rx_offload.c	/^void tm_netlink_init(struct module *module)$/;"	f
tmp_counter	ipq806x/nss_gmac_tx_rx_offload.c	/^unsigned long long tmp_counter = 0;$/;"	v
tx_busy	include/nss_gmac_dev.h	/^	uint32_t tx_busy;	\/* index of the tx descriptor owned by DMA,$/;"	m	struct:nss_gmac_dev
tx_busy	ipq806x/include/nss_gmac_dev.h	/^	uint32_t tx_busy;	\/* index of the tx descriptor owned by DMA,$/;"	m	struct:nss_gmac_dev
tx_busy_desc	include/nss_gmac_dev.h	/^	struct dma_desc *tx_busy_desc;	\/* Tx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
tx_busy_desc	ipq806x/include/nss_gmac_dev.h	/^	struct dma_desc *tx_busy_desc;	\/* Tx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
tx_bytes	exports/nss_gmac_api_if.h	/^	uint32_t tx_bytes;		\/**< Number of TX bytes *\/$/;"	m	struct:nss_gmac_stats
tx_bytes	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_bytes;		\/**< Number of TX bytes *\/$/;"	m	struct:nss_gmac_stats
tx_collisions	exports/nss_gmac_api_if.h	/^	uint32_t tx_collisions;		\/**< Number of TX collisions *\/$/;"	m	struct:nss_gmac_stats
tx_collisions	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_collisions;		\/**< Number of TX collisions *\/$/;"	m	struct:nss_gmac_stats
tx_desc	include/nss_gmac_dev.h	/^	struct dma_desc *tx_desc;\/* start address of TX descriptors ring or$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
tx_desc	ipq806x/include/nss_gmac_dev.h	/^	struct dma_desc *tx_desc;\/* start address of TX descriptors ring or$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
tx_desc_chain	include/nss_gmac_dev.h	/^	tx_desc_chain = 0x00100000,		\/* (TCH)Second buffer address$/;"	e	enum:dma_descriptor_status
tx_desc_chain	ipq806x/include/nss_gmac_dev.h	/^	tx_desc_chain = 0x00100000,		\/* (TCH)Second buffer address$/;"	e	enum:dma_descriptor_status
tx_desc_count	include/nss_gmac_dev.h	/^	uint32_t tx_desc_count;	\/* number of tx descriptors in the$/;"	m	struct:nss_gmac_dev
tx_desc_count	ipq806x/include/nss_gmac_dev.h	/^	uint32_t tx_desc_count;	\/* number of tx descriptors in the$/;"	m	struct:nss_gmac_dev
tx_desc_dma	include/nss_gmac_dev.h	/^	dma_addr_t tx_desc_dma;	\/* Dma-able address of first tx descriptor$/;"	m	struct:nss_gmac_dev
tx_desc_dma	ipq806x/include/nss_gmac_dev.h	/^	dma_addr_t tx_desc_dma;	\/* Dma-able address of first tx descriptor$/;"	m	struct:nss_gmac_dev
tx_desc_end_of_ring	include/nss_gmac_dev.h	/^	tx_desc_end_of_ring = 0x00200000,	\/* (TER)End of descriptor ring*\/$/;"	e	enum:dma_descriptor_status
tx_desc_end_of_ring	ipq806x/include/nss_gmac_dev.h	/^	tx_desc_end_of_ring = 0x00200000,	\/* (TER)End of descriptor ring*\/$/;"	e	enum:dma_descriptor_status
tx_dropped	exports/nss_gmac_api_if.h	/^	uint32_t tx_dropped;		\/**< Number of TX dropped packets *\/$/;"	m	struct:nss_gmac_stats
tx_dropped	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_dropped;		\/**< Number of TX dropped packets *\/$/;"	m	struct:nss_gmac_stats
tx_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_errors;		\/**< Number of TX errors *\/$/;"	m	struct:nss_gmac_stats
tx_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_errors;		\/**< Number of TX errors *\/$/;"	m	struct:nss_gmac_stats
tx_excessive_collision_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_excessive_collision_errors;$/;"	m	struct:nss_gmac_stats
tx_excessive_collision_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_excessive_collision_errors;$/;"	m	struct:nss_gmac_stats
tx_excessive_deferral_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_excessive_deferral_errors;$/;"	m	struct:nss_gmac_stats
tx_excessive_deferral_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_excessive_deferral_errors;$/;"	m	struct:nss_gmac_stats
tx_frame_flushed_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_frame_flushed_errors;$/;"	m	struct:nss_gmac_stats
tx_frame_flushed_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_frame_flushed_errors;$/;"	m	struct:nss_gmac_stats
tx_ip_header_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_ip_header_errors;	\/**< Number of TX IP header errors *\/$/;"	m	struct:nss_gmac_stats
tx_ip_header_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_ip_header_errors;	\/**< Number of TX IP header errors *\/$/;"	m	struct:nss_gmac_stats
tx_ip_payload_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_ip_payload_errors;	\/**< Number of TX IP payload errors *\/$/;"	m	struct:nss_gmac_stats
tx_ip_payload_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_ip_payload_errors;	\/**< Number of TX IP payload errors *\/$/;"	m	struct:nss_gmac_stats
tx_jabber_timeout_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_jabber_timeout_errors;$/;"	m	struct:nss_gmac_stats
tx_jabber_timeout_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_jabber_timeout_errors;$/;"	m	struct:nss_gmac_stats
tx_late_collision_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_late_collision_errors;$/;"	m	struct:nss_gmac_stats
tx_late_collision_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_late_collision_errors;$/;"	m	struct:nss_gmac_stats
tx_loss_of_carrier_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_loss_of_carrier_errors;$/;"	m	struct:nss_gmac_stats
tx_loss_of_carrier_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_loss_of_carrier_errors;$/;"	m	struct:nss_gmac_stats
tx_next	include/nss_gmac_dev.h	/^	uint32_t tx_next;	\/* index of the tx descriptor next available$/;"	m	struct:nss_gmac_dev
tx_next	ipq806x/include/nss_gmac_dev.h	/^	uint32_t tx_next;	\/* index of the tx descriptor next available$/;"	m	struct:nss_gmac_dev
tx_next_desc	include/nss_gmac_dev.h	/^	struct dma_desc *tx_next_desc;	\/* Tx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
tx_next_desc	ipq806x/include/nss_gmac_dev.h	/^	struct dma_desc *tx_next_desc;	\/* Tx Descriptor address corresponding$/;"	m	struct:nss_gmac_dev	typeref:struct:nss_gmac_dev::dma_desc
tx_no_carrier_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_no_carrier_errors;	\/**< Number of TX no carrier errors *\/$/;"	m	struct:nss_gmac_stats
tx_no_carrier_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_no_carrier_errors;	\/**< Number of TX no carrier errors *\/$/;"	m	struct:nss_gmac_stats
tx_packets	exports/nss_gmac_api_if.h	/^	uint32_t tx_packets;		\/**< Number of TX packets *\/$/;"	m	struct:nss_gmac_stats
tx_packets	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_packets;		\/**< Number of TX packets *\/$/;"	m	struct:nss_gmac_stats
tx_underflow_errors	exports/nss_gmac_api_if.h	/^	uint32_t tx_underflow_errors;	\/**< Number of TX underflow errors *\/$/;"	m	struct:nss_gmac_stats
tx_underflow_errors	ipq806x/exports/nss_gmac_api_if.h	/^	uint32_t tx_underflow_errors;	\/**< Number of TX underflow errors *\/$/;"	m	struct:nss_gmac_stats
unit0	ipq806x/nss_gmac_ctrl.c	/^	uint32_t unit0;		\/* LAN0 index *\/$/;"	m	struct:mii_ioctl_priv_data	file:
unit1	ipq806x/nss_gmac_ctrl.c	/^	uint32_t unit1;		\/* LAN1 index *\/$/;"	m	struct:mii_ioctl_priv_data	file:
unit2	ipq806x/nss_gmac_ctrl.c	/^	uint32_t unit2;		\/* LAN2 index *\/$/;"	m	struct:mii_ioctl_priv_data	file:
unit3	ipq806x/nss_gmac_ctrl.c	/^	uint32_t unit3;		\/* LAN3 index *\/$/;"	m	struct:mii_ioctl_priv_data	file:
unit4	ipq806x/nss_gmac_ctrl.c	/^	uint32_t unit4;		\/* WAN index  *\/$/;"	m	struct:mii_ioctl_priv_data	file:
version	include/nss_gmac_dev.h	/^	uint32_t version;	\/* Gmac Revision version                      *\/$/;"	m	struct:nss_gmac_dev
version	ipq806x/include/nss_gmac_dev.h	/^	uint32_t version;	\/* Gmac Revision version                      *\/$/;"	m	struct:nss_gmac_dev
wan_isFullDuplex	ipq806x/nss_gmac_ctrl.c	/^	uint32_t wan_isFullDuplex;$/;"	m	struct:mii_ioctl_priv_data	file:
wan_speed	ipq806x/nss_gmac_ctrl.c	/^	uint32_t wan_speed;$/;"	m	struct:mii_ioctl_priv_data	file:
work	ipq806x/nss_gmac_ctrl.c	/^	struct work_struct work;$/;"	m	struct:switch_phy_timer	typeref:struct:switch_phy_timer::work_struct	file:
xmit	exports/nss_gmac_api_if.h	/^	int (*xmit)(void *ctx, struct sk_buff *os_buf);$/;"	m	struct:nss_gmac_data_plane_ops
xmit	ipq806x/exports/nss_gmac_api_if.h	/^	int (*xmit)(void *ctx, struct sk_buff *os_buf);$/;"	m	struct:nss_gmac_data_plane_ops
