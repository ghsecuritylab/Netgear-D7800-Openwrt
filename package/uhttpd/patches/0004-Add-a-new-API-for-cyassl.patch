diff -Nurp uhttpd-old//src/uhttpd-tls.c uhttpd/src/uhttpd-tls.c
--- uhttpd-old//src/uhttpd-tls.c	2016-08-26 10:38:17.075384236 -0400
+++ uhttpd/src/uhttpd-tls.c	2016-08-26 10:45:45.845383907 -0400
@@ -33,12 +33,7 @@ static int uh_cyassl_recv_cb(char *buf,
 	if (!(cl = uh_client_lookup(socket)))
 		return -1; /* unexpected error */
 
-	rv = uh_tcp_recv_lowlevel(cl, buf, sz);
-
-	if (rv <= 0)
-		return -5; /* connection closed */
-
-	return rv;
+	return uh_cyassl_tcp_recv(cl, buf, sz);
 }
 
 static int uh_cyassl_send_cb(char *buf, int sz, void *ctx)
@@ -50,12 +45,7 @@ static int uh_cyassl_send_cb(char *buf,
 	if (!(cl = uh_client_lookup(socket)))
 		return -1; /* unexpected error */
 
-	rv = uh_tcp_send_lowlevel(cl, buf, sz);
-
-	if (rv <= 0)
-		return -5; /* connection dead */
-
-	return rv;
+	return uh_cyassl_tcp_send(cl, buf, sz);
 }
 
 void SetCallbackIORecv_Ctx(SSL_CTX*, int (*)(char *, int, void *));
diff -Nurp uhttpd-old//src/uhttpd-utils.c uhttpd/src/uhttpd-utils.c
--- uhttpd-old//src/uhttpd-utils.c	2016-08-26 10:38:17.075384236 -0400
+++ uhttpd/src/uhttpd-utils.c	2016-08-26 10:50:13.915383713 -0400
@@ -162,6 +162,38 @@ int uh_tcp_send_lowlevel(struct client *
 	return -1;
 }
 
+#ifdef TLS_IS_CYASSL
+int uh_cyassl_tcp_send(struct client *cl, const char *buf, int len)
+{
+	fd_set writer;
+	struct timeval timeout;
+	int ret;
+
+	FD_ZERO(&writer);
+	FD_SET(cl->socket, &writer);
+
+	timeout.tv_sec = cl->server->conf->network_timeout;
+	timeout.tv_usec = 0;
+
+	ret = select(cl->socket + 1, NULL, &writer, NULL, &timeout);
+
+	/* the fd can be writable */
+	if (ret > 0)
+	{
+		ret = send(cl->socket, buf, len, 0);
+		if (ret > 0)	//succeed
+			return ret;
+		else if (ret = -1 &&(errno == EINTR || errno == EWOULDBLOCK || errno ==EAGAIN))
+			return -4;	//retransmit
+		else
+			return -5;	//close
+	}
+	/* "<= 0" means that the link should be closed */
+	else
+		return -1;
+}
+#endif
+
 int uh_tcp_send(struct client *cl, const char *buf, int len)
 {
 #ifdef HAVE_TLS
@@ -207,6 +239,38 @@ int uh_tcp_recv_lowlevel(struct client *
 	return -1;
 }
 
+#ifdef TLS_IS_CYASSL
+int uh_cyassl_tcp_recv(struct client * cl, const char *buf, int len)
+{
+	fd_set reader;
+	struct timeval timeout;
+	int ret;
+
+	FD_ZERO(&reader);
+	FD_SET(cl->socket, &reader);
+
+	timeout.tv_sec  = cl->server->conf->network_timeout;
+	timeout.tv_usec = 0;
+
+	ret = select(cl->socket + 1, &reader, NULL, NULL, &timeout);
+
+	/* some data need to be read */
+	if (ret > 0)
+	{
+		ret = recv(cl->socket, buf, len, 0);
+		if (ret > 0)
+			return ret;	//succeed
+		else if (ret = -1 &&(errno == EINTR || errno == EWOULDBLOCK || errno ==EAGAIN))
+			return -4;	//retransmit
+		else
+			return -5;	//close
+	}
+	/* "<= 0" means that the link should be closed */
+	else
+		return -1;
+}
+#endif
+
 int uh_tcp_recv(struct client *cl, char *buf, int len)
 {
 	int sz = 0;
diff -Nurp uhttpd-old//src/uhttpd-utils.h uhttpd/src/uhttpd-utils.h
--- uhttpd-old//src/uhttpd-utils.h	2016-08-26 10:38:17.075384236 -0400
+++ uhttpd/src/uhttpd-utils.h	2016-08-26 10:48:54.245383769 -0400
@@ -71,7 +71,10 @@ int uh_tcp_send_lowlevel(struct client *
 int uh_tcp_peek(struct client *cl, char *buf, int len);
 int uh_tcp_recv(struct client *cl, char *buf, int len);
 int uh_tcp_recv_lowlevel(struct client *cl, char *buf, int len);
-
+#ifdef TLS_IS_CYASSL 
+int uh_cyassl_tcp_send(struct client *cl, const char *buf, int len);
+int uh_cyassl_tcp_recv(struct client *cl, const char *buf, int len);
+#endif
 int uh_http_sendhf(
 	struct client *cl, int code, const char *summary,
 	const char *fmt, ...
